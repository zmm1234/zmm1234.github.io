{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3a9843bf9730ab2f1065a92a0d961c77572ccd9c","modified":1551359057000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1550216770000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1550216770000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1550216770000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1550216770000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1550216770000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1550216770000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1550321844000},{"_id":"source/_posts/Beating-the-Average-为什么要学习Lisp-转.md","hash":"4ff8ec55155bf178cbf2f1620b20a44d386549e3","modified":1550322197000},{"_id":"source/_posts/QT中拖拽的实现（附示例代码）.md","hash":"dd9cb21a63f339734bbaffaa118891110d2425c3","modified":1550844304000},{"_id":"source/_posts/QT项目性能调优小记.md","hash":"e72feb4b78ce31101b3b648cad55ca1b149e308c","modified":1550841043000},{"_id":"source/_posts/QT中的View-Model模型系列一.md","hash":"4d81d1c53ed042dfc7f090c8af038b8fe4e90672","modified":1550322197000},{"_id":"source/_posts/Tiled-地图编辑器分析（QT平台）.md","hash":"5c3e921f0690210e05343732e5ab71a36356062a","modified":1550322197000},{"_id":"source/_posts/TimeZoneChange事件的捕获.md","hash":"7bf6e1e9ca22fe0c782ee5de1577b04db5aa52c8","modified":1550760680000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1550216770000},{"_id":"source/_posts/WPF中Dependency属性设置顺序的心得.md","hash":"33c7f30cb551d1b918355b0aec04247871199a2c","modified":1550669984000},{"_id":"source/_posts/tutoial-of-hexo.md","hash":"2fe7b2df619a2f51dab07c0380e3ad424d80e53c","modified":1550498483000},{"_id":"source/_posts/Windows下HG服务器的搭建.md","hash":"1f115452337b68b7734f16099d31fcb1e4b9f9fb","modified":1550844484000},{"_id":"source/_posts/muder的课件-更新中.md","hash":"887cf02d4d347b8766f66fee60f4110898bddf3e","modified":1550322197000},{"_id":"source/_posts/也谈线程同步变量.md","hash":"cba0520c31c95de0c10fcd5507152dfa56da23c7","modified":1550761398000},{"_id":"source/_posts/svn-tp-link-花生壳搭建外网服务器.md","hash":"6e276e6578e4be7797a51b821703d4efad113a96","modified":1550322197000},{"_id":"source/_posts/从农夫养牛问题推广到斐波那契数列.md","hash":"60250c42a07adc54b29b5078e6dca621d21eedcb","modified":1550589914000},{"_id":"source/_posts/windows7到期的问题.md","hash":"80b1224541960036e62bf8090aafb6566aec715c","modified":1550322197000},{"_id":"source/_posts/udev介绍.md","hash":"8ec66af17f9d196cbbcc4f2ae0fcb2124f3df4c4","modified":1550322197000},{"_id":"source/_posts/从QDataStream向QByteArray中写入数据时的注意点（QT）.md","hash":"3960791d31efc6625384524881e9e575e95463ab","modified":1550841655000},{"_id":"source/_posts/巧用qmake工具生成专业的makefile.md","hash":"2891530b6c73078b30694c6d3fe3189e1d7bac48","modified":1550842705000},{"_id":"source/_posts/关于随机数的讨论.md","hash":"39b34d8d27171d0d2837bf82da3d7ec20560cea6","modified":1550322197000},{"_id":"source/_posts/如何保持GUI的响应流畅-QT平台.md","hash":"a99ea4d279b9f4e7aaa07059d4b8f618b9c402de","modified":1550760926000},{"_id":"source/_posts/浏览器扩展系列————异步可插入协议（pluggable-protocol）的实现.md","hash":"099555d1cae7fa2dae8f6343c4a00cce859e46b4","modified":1550322197000},{"_id":"source/_posts/极大极小博弈树的简洁（附Tic-Tac-Toe源码）.md","hash":"c245330b3cde01780a85eaadc741ba9b8b066a09","modified":1550671485000},{"_id":"source/_posts/浏览器扩展系列————在WPF中定制WebBrowser快捷菜单.md","hash":"4adaf4c313229243481da45a1f0ebe7d4e277dd0","modified":1551106263000},{"_id":"source/_posts/浏览器扩展系列————给MSTHML添加内置脚本对象【包括自定义事件】.md","hash":"08764abbe9d4611fb9f7984cfd34c2314209a8dc","modified":1551107060000},{"_id":"source/_posts/程序优化小记.md","hash":"52e4042b8459ad329105c7812d111ba715d9d706","modified":1550761012000},{"_id":"source/_posts/浏览器扩展系列————透明浏览器窗口的实现.md","hash":"5d6ce1e8b8bdb5d63751b7f54bf6c4ffc6db43cc","modified":1551106779000},{"_id":"source/_posts/简述FPS的计算方法.md","hash":"0aa66d32816ea06d3998ab089710c44e325d695f","modified":1550669088000},{"_id":"source/_drafts/Hexo静态博客定制.md","hash":"986024dd964f65e80e3b1ceece9a36173630dc67","modified":1550667225000},{"_id":"source/_drafts/从博客园迁移到Hexo静态博客.md","hash":"953b07df9cb7821ed2d6b00b35fa0400c02acef5","modified":1550414347000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1550216770000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1550216770000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1550216770000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1550216770000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1550216770000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1550216770000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1550216770000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1550216770000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1550216770000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1550216770000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1550216770000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1550216770000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1550216770000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1550216770000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1550216770000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1550216770000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1550216770000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1550216770000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1550216770000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1550216770000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1550216770000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1550216770000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1550216770000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1550216770000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1550216770000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1550216770000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1550216770000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1550216770000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1550216770000},{"_id":"source/_posts/NET-性能优化方法总结-转.md","hash":"a283c4a7dde64dd176b12898f6a69f8f877006fa","modified":1550322197000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1550216770000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1550216770000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1550216770000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1550216770000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1550216770000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1550216770000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1550216770000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1550216770000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1550216770000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1550216770000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1550216770000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1550216770000},{"_id":"public/2019/02/15/hello-world/index.html","hash":"adf86b2d503137b20dabdd6b1e2affa836097f06","modified":1550589693678},{"_id":"public/2019/02/15/tutoial-of-hexo/index.html","hash":"10f56e6dd23f7444b7cda285ee8d5d5e35f2e282","modified":1551359072688},{"_id":"public/2011/08/10/svn-tp-link-花生壳搭建外网服务器/index.html","hash":"e2d5ab2cd130ebdb5b6e1415e09a3dea466507d7","modified":1551359072797},{"_id":"public/2011/01/19/程序优化小记/index.html","hash":"7a3910f9242440a0ac0f30efa65737e9931b0010","modified":1551359072688},{"_id":"public/2010/12/11/巧用qmake工具生成专业的makefile/index.html","hash":"bb6a977a02697f6d52311707ef1a0bbbd262e00b","modified":1551359072797},{"_id":"public/2010/10/10/QT中拖拽的实现（附示例代码）/index.html","hash":"0399582a76c87c000e21a499f75bc61e2eabb3e1","modified":1551359072799},{"_id":"public/2010/08/21/Tiled-地图编辑器分析（QT平台）/index.html","hash":"7b4eaf728054bf02029af5a61ced049302ee0431","modified":1551359072787},{"_id":"public/2010/02/24/windows7到期的问题/index.html","hash":"b36abbe53e10dd04fd6e5d1077f2ac852eaa87cf","modified":1551359072788},{"_id":"public/2008/04/23/muder的课件-更新中/index.html","hash":"02bc7370a11620d7b074101a9abc41696a5df911","modified":1550589693679},{"_id":"public/2008/01/08/关于随机数的讨论/index.html","hash":"2ef475ad829c23bdc2211db9bb5ea81b0df133fa","modified":1550589693679},{"_id":"public/archives/index.html","hash":"4986e284dbed1c757f0e5ce7c3dd5f8ae40ad019","modified":1551359072791},{"_id":"public/archives/page/2/index.html","hash":"a7da6a6478f760753512994be4c66a1c267d3297","modified":1551359072791},{"_id":"public/archives/page/3/index.html","hash":"3c1d3d0e697ae034ebcaec3e92c7eb73d147d36d","modified":1551359072798},{"_id":"public/archives/2008/index.html","hash":"9e4f8e688766b79a2bde87165b5b4a1b90fe4b41","modified":1550589693680},{"_id":"public/archives/2008/01/index.html","hash":"bedcd994dc439f0b13191ad0b464e490324d8d40","modified":1550589693680},{"_id":"public/archives/2008/04/index.html","hash":"b4e0cccaa9f96d61368991947eb36e5907b1e417","modified":1550589693680},{"_id":"public/archives/2009/index.html","hash":"cc0a1d5c09cfc66cd7390caa71eecfa72ef85233","modified":1551359072791},{"_id":"public/archives/2009/02/index.html","hash":"5ec1a8580523f3ecf4e946514e63414dabedfca5","modified":1551359072791},{"_id":"public/archives/2009/03/index.html","hash":"f2f68d9b19b87a104ca59ae2d324aedfeba717bb","modified":1551359072798},{"_id":"public/archives/2009/04/index.html","hash":"0943af8a42dac91b24a06cff85affdfc5b8cc073","modified":1550589693680},{"_id":"public/archives/2009/08/index.html","hash":"f96b6b50d1f648e4efbf2aef9a93848195078af1","modified":1551359072791},{"_id":"public/archives/2009/10/index.html","hash":"4787b5a26486c4e4dae315b9e63a361384261204","modified":1551359072791},{"_id":"public/archives/2010/index.html","hash":"8812ec9545bb56f6e13435c1c69f5dbde1b60471","modified":1551359072791},{"_id":"public/archives/2010/01/index.html","hash":"4f14f8c859d01ec2fe4a584bb4e4ff8ff4198487","modified":1550589693680},{"_id":"public/archives/2010/02/index.html","hash":"42a2d306b0781bfcc54eb8d22b671800b109c325","modified":1551359072792},{"_id":"public/archives/2010/04/index.html","hash":"c194f59369ee2986d62942875f9a2d032a8330a8","modified":1551359072792},{"_id":"public/archives/2010/05/index.html","hash":"3e7aa38ffa8abec4cd9609e0cbd20a2c5d4ab20f","modified":1551359072792},{"_id":"public/archives/2010/08/index.html","hash":"ed1829f7e8018d1dced0af4978e7cdd9d263433d","modified":1551359072792},{"_id":"public/archives/2010/10/index.html","hash":"bdf3a2eb421a4dcac8f6dc18fb399f55b7b952c6","modified":1551359072798},{"_id":"public/archives/2010/12/index.html","hash":"31418940f91381017a44e90635cdcd909c5813cc","modified":1551359072798},{"_id":"public/archives/2011/index.html","hash":"94a48e663a0cd1c901ce09e9325626b2e6d29a54","modified":1551359072792},{"_id":"public/archives/2011/01/index.html","hash":"17cfde19893f5a64bb4336054065c1a5092f613a","modified":1551359072792},{"_id":"public/archives/2011/07/index.html","hash":"ce8ac1369115ed62abad1a252de57c7668b2ed5d","modified":1550589693681},{"_id":"public/archives/2011/08/index.html","hash":"f0c3c38666a9266e8d45af8bf6186005ce5cf565","modified":1551359072798},{"_id":"public/archives/2015/index.html","hash":"ec4c67ebf22832d11e4578fad88381088e3170ab","modified":1551359072798},{"_id":"public/archives/2015/08/index.html","hash":"acab8b6a3ed303963420da7befc81a2bdd4ce562","modified":1551359072798},{"_id":"public/archives/2016/index.html","hash":"b456e22d906b16b51a376a24e5fff00959afcb3e","modified":1551359072798},{"_id":"public/archives/2016/05/index.html","hash":"3d30985c697a03083b6117174df5cfcbca97ed7d","modified":1551359072798},{"_id":"public/archives/2019/index.html","hash":"7248ac05ea9a9b1ea61434d3d9d30d857bfbe2ab","modified":1551359072792},{"_id":"public/archives/2019/02/index.html","hash":"13a1176f933948e2243051e5f8431c3ced236bab","modified":1551359072793},{"_id":"public/2016/05/30/QT项目性能调优小记/index.html","hash":"ca200fa513b28e203ad7d13f77469b98d910b180","modified":1551359072799},{"_id":"public/2015/08/28/Windows下HG服务器的搭建/index.html","hash":"3ac83be193adf848e19ba2416ba54970d37d46c7","modified":1551359072799},{"_id":"public/2011/07/21/udev介绍/index.html","hash":"1b848bb21f4f760d74611af73dc45da431cbc937","modified":1550589693681},{"_id":"public/2011/01/26/极大极小博弈树的简洁（附Tic-Tac-Toe源码）/index.html","hash":"829c3f744ecfda88bb0642b8aa7a402382cbfd8f","modified":1551359072793},{"_id":"public/2010/12/13/Beating-the-Average-为什么要学习Lisp-转/index.html","hash":"1b35b886895c53895bf2dedeb403f986cc4ad8b8","modified":1551359072799},{"_id":"public/2010/05/29/从QDataStream向QByteArray中写入数据时的注意点（QT）/index.html","hash":"c0c508bc9e1ad1c32d1a910c6d7587cad29c7709","modified":1551359072797},{"_id":"public/2010/04/08/也谈线程同步变量/index.html","hash":"ddc3e8a02b490760dbdf9f53e372349278a389c9","modified":1551359072793},{"_id":"public/2010/05/08/如何保持GUI的响应流畅-QT平台/index.html","hash":"f802680554c624924333c0b7f1119c962625ebc4","modified":1551359072793},{"_id":"public/2010/02/04/简述FPS的计算方法/index.html","hash":"3c259a8d4d973ce3345215e5f96cbe1022897d47","modified":1551359072791},{"_id":"public/2010/01/16/QT中的View-Model模型系列一/index.html","hash":"edcfcd59d6755749ceb34a2c01021348f8c8d0ba","modified":1550589693682},{"_id":"public/2009/10/31/从农夫养牛问题推广到斐波那契数列/index.html","hash":"c09329d4e8a63be04d41adc1d0f47bd72484a835","modified":1551359072793},{"_id":"public/2009/10/27/NET-性能优化方法总结-转/index.html","hash":"f26cf783d4b3f0ca9f9130d03ccd0710383e2e3b","modified":1550589693682},{"_id":"public/2009/08/08/TimeZoneChange事件的捕获/index.html","hash":"5200ea57df2c7d685ca9b004484974b04429ec6a","modified":1551359072791},{"_id":"public/2009/04/26/浏览器扩展系列————透明浏览器窗口的实现/index.html","hash":"71f238c77924bf00f038fae96b94d84adc72c410","modified":1550589693682},{"_id":"public/2009/03/28/浏览器扩展系列————异步可插入协议（pluggable-protocol）的实现/index.html","hash":"ca8b653fe71fcfa681b047fbb259a7e95fa7a887","modified":1550589693682},{"_id":"public/2009/02/23/浏览器扩展系列————在WPF中定制WebBrowser快捷菜单/index.html","hash":"40c7d69ed2fc1ea6cb1d6f221222372911f1cb40","modified":1551359072799},{"_id":"public/2009/03/02/浏览器扩展系列————给MSTHML添加内置脚本对象【包括自定义事件】/index.html","hash":"b177174a2c3e76397f81c36ffcb0109aae1101f0","modified":1551359072799},{"_id":"public/2009/02/10/WPF中Dependency属性设置顺序的心得/index.html","hash":"fc6503e1855a23073861b238b68605097dab13ed","modified":1551359072793},{"_id":"public/index.html","hash":"f8e98c1738f73764a8d546e309b48f0d5d33eb32","modified":1551359072793},{"_id":"public/page/3/index.html","hash":"a2c9b15dc0a8039421224d4a6813885d65d32a21","modified":1551359072799},{"_id":"public/page/2/index.html","hash":"bbbbfef62c7a8a4ef3200915101e0c3e4a9cbbf9","modified":1551359072793},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1550589693687},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1550589693687},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1550589693687},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1550589693688},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1550589693688},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1550589693688},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1550589693688},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1550589693688},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1550589693688},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1550589693688},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1550589694072},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1550589694073},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1550589694081},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1550589694081},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1550589694081},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1550589694081},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1550589694081},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1550589694081},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1550589694081},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1550589694081},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1550589694081},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1550589694083},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1550589694084},{"_id":"source/_drafts/Beating-the-Average-为什么要学习Lisp-转.md","hash":"4ff8ec55155bf178cbf2f1620b20a44d386549e3","modified":1550322197000},{"_id":"source/_drafts/QT中拖拽的实现（附示例代码）.md","hash":"9e5fcb24e811fb585679841059d587fcacbfed62","modified":1550322197000},{"_id":"source/_drafts/QT中的View-Model模型系列一.md","hash":"4d81d1c53ed042dfc7f090c8af038b8fe4e90672","modified":1550322197000},{"_id":"source/_drafts/QT项目性能调优小记.md","hash":"e8870c62b5f1715b501e6c5b1327b8b2047b40fc","modified":1550322197000},{"_id":"source/_drafts/Tiled-地图编辑器分析（QT平台）.md","hash":"5c3e921f0690210e05343732e5ab71a36356062a","modified":1550322197000},{"_id":"source/_drafts/TimeZoneChange事件的捕获.md","hash":"77597d2133b837853c1c8a88fa072c1cc3fabf82","modified":1550322197000},{"_id":"source/_drafts/Windows下HG服务器的搭建.md","hash":"de5ab39c5ee4e275fd3461f534a9b6a2b4cb15e2","modified":1550322197000},{"_id":"source/_drafts/WPF中Dependency属性设置顺序的心得.md","hash":"6c38dc001ba0170219dfc629ceea39f8596d8f95","modified":1550322197000},{"_id":"source/_drafts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1550216770000},{"_id":"source/_drafts/muder的课件-更新中.md","hash":"887cf02d4d347b8766f66fee60f4110898bddf3e","modified":1550322197000},{"_id":"source/_drafts/svn-tp-link-花生壳搭建外网服务器.md","hash":"6e276e6578e4be7797a51b821703d4efad113a96","modified":1550322197000},{"_id":"source/_drafts/udev介绍.md","hash":"8ec66af17f9d196cbbcc4f2ae0fcb2124f3df4c4","modified":1550322197000},{"_id":"source/_drafts/windows7到期的问题.md","hash":"80b1224541960036e62bf8090aafb6566aec715c","modified":1550322197000},{"_id":"source/_drafts/也谈线程同步变量.md","hash":"e4aed9198a78a161400615c28869ac1e3a318b27","modified":1550322197000},{"_id":"source/_drafts/从QDataStream向QByteArray中写入数据时的注意点（QT）.md","hash":"e21aef83aa630a0ab23e1901c312a8990a2673dc","modified":1550322197000},{"_id":"source/_drafts/关于随机数的讨论.md","hash":"39b34d8d27171d0d2837bf82da3d7ec20560cea6","modified":1550322197000},{"_id":"source/_drafts/如何保持GUI的响应流畅-QT平台.md","hash":"75d227a75b7a0ccf013d34b6136d6a49d5ce1edf","modified":1550322197000},{"_id":"source/_drafts/巧用qmake工具生成专业的makefile.md","hash":"ece2fe157663eb637a8a11caf96b290d1dce3e16","modified":1550322197000},{"_id":"source/_drafts/极大极小博弈树的简洁（附Tic-Tac-Toe源码）.md","hash":"3bce6b95dfb4d4692091373d19592eb42744f8a8","modified":1550322197000},{"_id":"source/_drafts/浏览器扩展系列————异步可插入协议（pluggable-protocol）的实现.md","hash":"099555d1cae7fa2dae8f6343c4a00cce859e46b4","modified":1550322197000},{"_id":"source/_drafts/浏览器扩展系列————在WPF中定制WebBrowser快捷菜单.md","hash":"92a716101148cff1ef3dbd467182d7d43ea88451","modified":1550322197000},{"_id":"source/_drafts/浏览器扩展系列————给MSTHML添加内置脚本对象【包括自定义事件】.md","hash":"035efdf40c64deef7f8a552023f032e1e9f7f85a","modified":1550322197000},{"_id":"source/_drafts/程序优化小记.md","hash":"e59ee6a8e764dfd2646b60f25d8f9dd19fa87c52","modified":1550322197000},{"_id":"source/_drafts/简述FPS的计算方法.md","hash":"cd860f11ba12ccd5074e89ee1880372ab1dc624c","modified":1550322197000},{"_id":"source/_drafts/浏览器扩展系列————透明浏览器窗口的实现.md","hash":"9e2ba76ea9957d6e4935c40535f3ecceb1c3d9cb","modified":1550322197000},{"_id":"source/_drafts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1550590081000},{"_id":"source/_drafts/NET-性能优化方法总结-转.md","hash":"a283c4a7dde64dd176b12898f6a69f8f877006fa","modified":1550322197000},{"_id":"public/2019/02/16/浏览器扩展系列————透明浏览器窗口的实现/index.html","hash":"c0d1171092c272e7c95d5ef7b0b0edab04dd7029","modified":1551359072798}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hexo静态博客定制","_content":"\n## 定制内容提要\n在你写 md 文章的时候，可以在内容中加上 <!--more-->，这样首页和列表页展示的文章内容就是 <!--more--> 之前的文字，而之后的就不会显示了。\nref：[让hexo的首页只显示文章的部分内容而不是全部](http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html)\n\n## 设置代码引用\n\n使用以下代码：\n\n\\`\\`\\`cpp\n\nthis is cpp code\n\n\\`\\`\\`\n\n效果如下：\n\n```cpp\nthis is cpp code\n```\n\n","source":"_drafts/Hexo静态博客定制.md","raw":"---\ntitle: Hexo静态博客定制\ntags: Hexo，定制\n---\n\n## 定制内容提要\n在你写 md 文章的时候，可以在内容中加上 <!--more-->，这样首页和列表页展示的文章内容就是 <!--more--> 之前的文字，而之后的就不会显示了。\nref：[让hexo的首页只显示文章的部分内容而不是全部](http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html)\n\n## 设置代码引用\n\n使用以下代码：\n\n\\`\\`\\`cpp\n\nthis is cpp code\n\n\\`\\`\\`\n\n效果如下：\n\n```cpp\nthis is cpp code\n```\n\n","slug":"Hexo静态博客定制","published":0,"date":"2019-02-18T13:59:15.000Z","updated":"2019-02-20T12:53:45.000Z","_id":"cjsbx2f4t000ruszsmokkmxzb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"定制内容提要\"><a href=\"#定制内容提要\" class=\"headerlink\" title=\"定制内容提要\"></a>定制内容提要</h2><p>在你写 md 文章的时候，可以在内容中加上 <a id=\"more\"></a>，这样首页和列表页展示的文章内容就是 <!--more--> 之前的文字，而之后的就不会显示了。<br>ref：<a href=\"http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html\" target=\"_blank\" rel=\"noopener\">让hexo的首页只显示文章的部分内容而不是全部</a></p>\n<h2 id=\"设置代码引用\"><a href=\"#设置代码引用\" class=\"headerlink\" title=\"设置代码引用\"></a>设置代码引用</h2><p>使用以下代码：</p>\n<p>```cpp</p>\n<p>this is cpp code</p>\n<p>```</p>\n<p>效果如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span> is cpp code</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"定制内容提要\"><a href=\"#定制内容提要\" class=\"headerlink\" title=\"定制内容提要\"></a>定制内容提要</h2><p>在你写 md 文章的时候，可以在内容中加上","more":"，这样首页和列表页展示的文章内容就是 <!--more--> 之前的文字，而之后的就不会显示了。<br>ref：<a href=\"http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html\" target=\"_blank\" rel=\"noopener\">让hexo的首页只显示文章的部分内容而不是全部</a></p>\n<h2 id=\"设置代码引用\"><a href=\"#设置代码引用\" class=\"headerlink\" title=\"设置代码引用\"></a>设置代码引用</h2><p>使用以下代码：</p>\n<p>```cpp</p>\n<p>this is cpp code</p>\n<p>```</p>\n<p>效果如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span> is cpp code</span><br></pre></td></tr></table></figure>"},{"title":"从博客园迁移到Hexo静态博客","_content":"","source":"_drafts/从博客园迁移到Hexo静态博客.md","raw":"---\ntitle: 从博客园迁移到Hexo静态博客\ntags:\n---\n","slug":"从博客园迁移到Hexo静态博客","published":0,"date":"2019-02-17T14:39:07.000Z","updated":"2019-02-17T14:39:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsbx2f4u000suszsyr1htrz2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于随机数的讨论","date":"2008-01-08T04:55:00.000Z","_content":"\n写得有点乱，大家耐心点看吧，这都是我得&#8220;谬论&#8221;。 \n\nc中的rand（）函数，能返回0到max int间的一个随机数，我认为在包含这个函数的库中，应该有一个静态变量保存它上一次得到的随机数，然后用这个数得到它的下一个随机数。\n\n而且我认为一个产生随机数的算法，当它确定后，这个随机数序列就应该已经确定了，假设这个随机数序列是1到10的：1，3，5，2，6，9，7，10，4，8。这是一定的即通过给定一个种子，那个随机数的算法利用这个种子如4\n\n则它一定得到下一个随机数8，我想这应该是确定的。\n\n再\n说说它的伪随机性，如果把真实的随机数算法看成是一个股子，那么如果投出一个4点，那个再投的时候它应该有6中可能，且概率相等。如果投6次，那么应该有\n6的6此方中组合，即可以认为是6的6次方个随机序列，那个一个随机数算法器相当于，取了这么多随机数序列中的一个。那么从整体上看，再加上你并不能预测\n一个数的下个个随机数是什么，所以可以认为这个随机序列是随机的的。\n\n再谈谈一个随机数序列的一些特性，就是我认为不可能在两个不同的数上\n作用这个随机数发生器那么不可能，得到一个相同的数，而且我认为这个序列应该属于离散上的一种特殊的格：链，它具体的定义是对于集合中的任意两个数l1，\nl2，都有l1&lt; l2,或l2 &lt; l1。这里的小于号表示一种关系。如果用c＋＋的一个成员函数来表示就是，l2.rand(l2)\n\n&nbsp;== l1，当然这个不一定是一种直接的关系，还可能通过一些间接的数如 l3.rand(l2.rand(l2)) == l1;\n\n可以用一个图表来表示\n\n9\n\n/\n\n6\n\n/\n\n2\n\n/\n\n3\n\n/\n\n5\n\n/\n\n1\n\n/\n\n7\n\n/\n\n10\n\n/\n\n4\n\n/\n\n8\n\n如9&gt;8, 9&gt; 6, 4&gt; 8等。\n\n而不可能存在叉就是有，有两个数指向一个数，就是\n\n9\n\n/\n\n6\n\n/\n\n2\n\n/\n\n5&nbsp;&nbsp; 3\n\n/&nbsp;&nbsp; /\n\n1\n\n/\n\n7\n\n/\n\n10\n\n/\n\n4\n\n/\n\n8\n\n5 &gt;1,3 &gt; 1,那么谁指向3呢，如是8以外的数指向它（8是最后的数，一会再讨论），如6那么这个6就有两个指向了2和3，不符合唯一性了。\n\n而如果是8呢？那么就形成了一个3， 1， 7，10，4，8，3的小循环，排除了其他元素所以是不可能的。\n\n&nbsp;再说一下关于存在重复序列的问题，即如果有序列中4，4这个序列，4。rand（4） ＝＝ 4，就会出现4循环永远是4了。\n\n那么再回头看一下，再把回到开始的假设随机数发生器是rand（）函数，能返回0到max int间的一个随机数，\n\n那么它里面就不能有重复的序列，即对于一个数来说它的下一个数一定是一个非自身的数，那么和实际的随机数来说不是就有一个缺陷了吗？\n\n而\n我昨天说用rand（）%10 +\n1,得到一个1到10的随机序列，它的间隔比较大，其实我的意思是重它的序列中你可以看到重复数的序列。这是因为如果在rand（）的随机数序列中如果存\n在45，55，这个子序列，那么就得到了6，6序列有重复的子序列，而如果是35，78，就得到了6，9，可以看出6的下一个数在这种情况下是不确定的这\n当然是很好的。但是我想如果用直接打印rand（）序列就不可能再出现相同的子序列。\n\n那么会不会是rand（）能产生更大的随机数然后在缩小到现在的这个去间呢，就像上面用rand（）来生成一个1到10的随机序列，象这种比较好的随机序列。","source":"_drafts/关于随机数的讨论.md","raw":"---\ntitle: 关于随机数的讨论\ntags: []\ndate: 2008-01-08 12:55:00\n---\n\n写得有点乱，大家耐心点看吧，这都是我得&#8220;谬论&#8221;。 \n\nc中的rand（）函数，能返回0到max int间的一个随机数，我认为在包含这个函数的库中，应该有一个静态变量保存它上一次得到的随机数，然后用这个数得到它的下一个随机数。\n\n而且我认为一个产生随机数的算法，当它确定后，这个随机数序列就应该已经确定了，假设这个随机数序列是1到10的：1，3，5，2，6，9，7，10，4，8。这是一定的即通过给定一个种子，那个随机数的算法利用这个种子如4\n\n则它一定得到下一个随机数8，我想这应该是确定的。\n\n再\n说说它的伪随机性，如果把真实的随机数算法看成是一个股子，那么如果投出一个4点，那个再投的时候它应该有6中可能，且概率相等。如果投6次，那么应该有\n6的6此方中组合，即可以认为是6的6次方个随机序列，那个一个随机数算法器相当于，取了这么多随机数序列中的一个。那么从整体上看，再加上你并不能预测\n一个数的下个个随机数是什么，所以可以认为这个随机序列是随机的的。\n\n再谈谈一个随机数序列的一些特性，就是我认为不可能在两个不同的数上\n作用这个随机数发生器那么不可能，得到一个相同的数，而且我认为这个序列应该属于离散上的一种特殊的格：链，它具体的定义是对于集合中的任意两个数l1，\nl2，都有l1&lt; l2,或l2 &lt; l1。这里的小于号表示一种关系。如果用c＋＋的一个成员函数来表示就是，l2.rand(l2)\n\n&nbsp;== l1，当然这个不一定是一种直接的关系，还可能通过一些间接的数如 l3.rand(l2.rand(l2)) == l1;\n\n可以用一个图表来表示\n\n9\n\n/\n\n6\n\n/\n\n2\n\n/\n\n3\n\n/\n\n5\n\n/\n\n1\n\n/\n\n7\n\n/\n\n10\n\n/\n\n4\n\n/\n\n8\n\n如9&gt;8, 9&gt; 6, 4&gt; 8等。\n\n而不可能存在叉就是有，有两个数指向一个数，就是\n\n9\n\n/\n\n6\n\n/\n\n2\n\n/\n\n5&nbsp;&nbsp; 3\n\n/&nbsp;&nbsp; /\n\n1\n\n/\n\n7\n\n/\n\n10\n\n/\n\n4\n\n/\n\n8\n\n5 &gt;1,3 &gt; 1,那么谁指向3呢，如是8以外的数指向它（8是最后的数，一会再讨论），如6那么这个6就有两个指向了2和3，不符合唯一性了。\n\n而如果是8呢？那么就形成了一个3， 1， 7，10，4，8，3的小循环，排除了其他元素所以是不可能的。\n\n&nbsp;再说一下关于存在重复序列的问题，即如果有序列中4，4这个序列，4。rand（4） ＝＝ 4，就会出现4循环永远是4了。\n\n那么再回头看一下，再把回到开始的假设随机数发生器是rand（）函数，能返回0到max int间的一个随机数，\n\n那么它里面就不能有重复的序列，即对于一个数来说它的下一个数一定是一个非自身的数，那么和实际的随机数来说不是就有一个缺陷了吗？\n\n而\n我昨天说用rand（）%10 +\n1,得到一个1到10的随机序列，它的间隔比较大，其实我的意思是重它的序列中你可以看到重复数的序列。这是因为如果在rand（）的随机数序列中如果存\n在45，55，这个子序列，那么就得到了6，6序列有重复的子序列，而如果是35，78，就得到了6，9，可以看出6的下一个数在这种情况下是不确定的这\n当然是很好的。但是我想如果用直接打印rand（）序列就不可能再出现相同的子序列。\n\n那么会不会是rand（）能产生更大的随机数然后在缩小到现在的这个去间呢，就像上面用rand（）来生成一个1到10的随机序列，象这种比较好的随机序列。","slug":"关于随机数的讨论","published":0,"updated":"2019-02-16T13:03:17.000Z","_id":"cjsbx7ya2000ty6zsh1hzc7bb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>写得有点乱，大家耐心点看吧，这都是我得&#8220;谬论&#8221;。 </p>\n<p>c中的rand（）函数，能返回0到max int间的一个随机数，我认为在包含这个函数的库中，应该有一个静态变量保存它上一次得到的随机数，然后用这个数得到它的下一个随机数。</p>\n<p>而且我认为一个产生随机数的算法，当它确定后，这个随机数序列就应该已经确定了，假设这个随机数序列是1到10的：1，3，5，2，6，9，7，10，4，8。这是一定的即通过给定一个种子，那个随机数的算法利用这个种子如4</p>\n<p>则它一定得到下一个随机数8，我想这应该是确定的。</p>\n<p>再<br>说说它的伪随机性，如果把真实的随机数算法看成是一个股子，那么如果投出一个4点，那个再投的时候它应该有6中可能，且概率相等。如果投6次，那么应该有<br>6的6此方中组合，即可以认为是6的6次方个随机序列，那个一个随机数算法器相当于，取了这么多随机数序列中的一个。那么从整体上看，再加上你并不能预测<br>一个数的下个个随机数是什么，所以可以认为这个随机序列是随机的的。</p>\n<p>再谈谈一个随机数序列的一些特性，就是我认为不可能在两个不同的数上<br>作用这个随机数发生器那么不可能，得到一个相同的数，而且我认为这个序列应该属于离散上的一种特殊的格：链，它具体的定义是对于集合中的任意两个数l1，<br>l2，都有l1&lt; l2,或l2 &lt; l1。这里的小于号表示一种关系。如果用c＋＋的一个成员函数来表示就是，l2.rand(l2)</p>\n<p>&nbsp;== l1，当然这个不一定是一种直接的关系，还可能通过一些间接的数如 l3.rand(l2.rand(l2)) == l1;</p>\n<p>可以用一个图表来表示</p>\n<p>9</p>\n<p>/</p>\n<p>6</p>\n<p>/</p>\n<p>2</p>\n<p>/</p>\n<p>3</p>\n<p>/</p>\n<p>5</p>\n<p>/</p>\n<p>1</p>\n<p>/</p>\n<p>7</p>\n<p>/</p>\n<p>10</p>\n<p>/</p>\n<p>4</p>\n<p>/</p>\n<p>8</p>\n<p>如9&gt;8, 9&gt; 6, 4&gt; 8等。</p>\n<p>而不可能存在叉就是有，有两个数指向一个数，就是</p>\n<p>9</p>\n<p>/</p>\n<p>6</p>\n<p>/</p>\n<p>2</p>\n<p>/</p>\n<p>5&nbsp;&nbsp; 3</p>\n<p>/&nbsp;&nbsp; /</p>\n<p>1</p>\n<p>/</p>\n<p>7</p>\n<p>/</p>\n<p>10</p>\n<p>/</p>\n<p>4</p>\n<p>/</p>\n<p>8</p>\n<p>5 &gt;1,3 &gt; 1,那么谁指向3呢，如是8以外的数指向它（8是最后的数，一会再讨论），如6那么这个6就有两个指向了2和3，不符合唯一性了。</p>\n<p>而如果是8呢？那么就形成了一个3， 1， 7，10，4，8，3的小循环，排除了其他元素所以是不可能的。</p>\n<p>&nbsp;再说一下关于存在重复序列的问题，即如果有序列中4，4这个序列，4。rand（4） ＝＝ 4，就会出现4循环永远是4了。</p>\n<p>那么再回头看一下，再把回到开始的假设随机数发生器是rand（）函数，能返回0到max int间的一个随机数，</p>\n<p>那么它里面就不能有重复的序列，即对于一个数来说它的下一个数一定是一个非自身的数，那么和实际的随机数来说不是就有一个缺陷了吗？</p>\n<p>而<br>我昨天说用rand（）%10 +<br>1,得到一个1到10的随机序列，它的间隔比较大，其实我的意思是重它的序列中你可以看到重复数的序列。这是因为如果在rand（）的随机数序列中如果存<br>在45，55，这个子序列，那么就得到了6，6序列有重复的子序列，而如果是35，78，就得到了6，9，可以看出6的下一个数在这种情况下是不确定的这<br>当然是很好的。但是我想如果用直接打印rand（）序列就不可能再出现相同的子序列。</p>\n<p>那么会不会是rand（）能产生更大的随机数然后在缩小到现在的这个去间呢，就像上面用rand（）来生成一个1到10的随机序列，象这种比较好的随机序列。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>写得有点乱，大家耐心点看吧，这都是我得&#8220;谬论&#8221;。 </p>\n<p>c中的rand（）函数，能返回0到max int间的一个随机数，我认为在包含这个函数的库中，应该有一个静态变量保存它上一次得到的随机数，然后用这个数得到它的下一个随机数。</p>\n<p>而且我认为一个产生随机数的算法，当它确定后，这个随机数序列就应该已经确定了，假设这个随机数序列是1到10的：1，3，5，2，6，9，7，10，4，8。这是一定的即通过给定一个种子，那个随机数的算法利用这个种子如4</p>\n<p>则它一定得到下一个随机数8，我想这应该是确定的。</p>\n<p>再<br>说说它的伪随机性，如果把真实的随机数算法看成是一个股子，那么如果投出一个4点，那个再投的时候它应该有6中可能，且概率相等。如果投6次，那么应该有<br>6的6此方中组合，即可以认为是6的6次方个随机序列，那个一个随机数算法器相当于，取了这么多随机数序列中的一个。那么从整体上看，再加上你并不能预测<br>一个数的下个个随机数是什么，所以可以认为这个随机序列是随机的的。</p>\n<p>再谈谈一个随机数序列的一些特性，就是我认为不可能在两个不同的数上<br>作用这个随机数发生器那么不可能，得到一个相同的数，而且我认为这个序列应该属于离散上的一种特殊的格：链，它具体的定义是对于集合中的任意两个数l1，<br>l2，都有l1&lt; l2,或l2 &lt; l1。这里的小于号表示一种关系。如果用c＋＋的一个成员函数来表示就是，l2.rand(l2)</p>\n<p>&nbsp;== l1，当然这个不一定是一种直接的关系，还可能通过一些间接的数如 l3.rand(l2.rand(l2)) == l1;</p>\n<p>可以用一个图表来表示</p>\n<p>9</p>\n<p>/</p>\n<p>6</p>\n<p>/</p>\n<p>2</p>\n<p>/</p>\n<p>3</p>\n<p>/</p>\n<p>5</p>\n<p>/</p>\n<p>1</p>\n<p>/</p>\n<p>7</p>\n<p>/</p>\n<p>10</p>\n<p>/</p>\n<p>4</p>\n<p>/</p>\n<p>8</p>\n<p>如9&gt;8, 9&gt; 6, 4&gt; 8等。</p>\n<p>而不可能存在叉就是有，有两个数指向一个数，就是</p>\n<p>9</p>\n<p>/</p>\n<p>6</p>\n<p>/</p>\n<p>2</p>\n<p>/</p>\n<p>5&nbsp;&nbsp; 3</p>\n<p>/&nbsp;&nbsp; /</p>\n<p>1</p>\n<p>/</p>\n<p>7</p>\n<p>/</p>\n<p>10</p>\n<p>/</p>\n<p>4</p>\n<p>/</p>\n<p>8</p>\n<p>5 &gt;1,3 &gt; 1,那么谁指向3呢，如是8以外的数指向它（8是最后的数，一会再讨论），如6那么这个6就有两个指向了2和3，不符合唯一性了。</p>\n<p>而如果是8呢？那么就形成了一个3， 1， 7，10，4，8，3的小循环，排除了其他元素所以是不可能的。</p>\n<p>&nbsp;再说一下关于存在重复序列的问题，即如果有序列中4，4这个序列，4。rand（4） ＝＝ 4，就会出现4循环永远是4了。</p>\n<p>那么再回头看一下，再把回到开始的假设随机数发生器是rand（）函数，能返回0到max int间的一个随机数，</p>\n<p>那么它里面就不能有重复的序列，即对于一个数来说它的下一个数一定是一个非自身的数，那么和实际的随机数来说不是就有一个缺陷了吗？</p>\n<p>而<br>我昨天说用rand（）%10 +<br>1,得到一个1到10的随机序列，它的间隔比较大，其实我的意思是重它的序列中你可以看到重复数的序列。这是因为如果在rand（）的随机数序列中如果存<br>在45，55，这个子序列，那么就得到了6，6序列有重复的子序列，而如果是35，78，就得到了6，9，可以看出6的下一个数在这种情况下是不确定的这<br>当然是很好的。但是我想如果用直接打印rand（）序列就不可能再出现相同的子序列。</p>\n<p>那么会不会是rand（）能产生更大的随机数然后在缩小到现在的这个去间呢，就像上面用rand（）来生成一个1到10的随机序列，象这种比较好的随机序列。</p>\n"},{"title":"浏览器扩展系列————异步可插入协议（pluggable protocol）的实现","date":"2009-03-28T10:42:00.000Z","_content":"\n&nbsp;&nbsp; &nbsp; &nbsp;IE中有很多我们比较熟悉的协议，如http,https,mailto,ftp等。当然你也可以实现自己定义的协议，稍微谈一下这里所说的协议，从我的理解来说这里的协议只有当你的网页引用某个资源时才会调用，而不是随便在某个属性的值前面加上某个协议的名称就可以了。常见的协议调用如img的src属性中，很多元素style中的background-image属性中，还有a标签的href属性中。\n\n&nbsp;&nbsp; &nbsp; &nbsp; 言归正传，前面说到的实现自定义协议就用到了一种IE下异步可插入协议的技术。\n\n&nbsp;&nbsp; &nbsp; &nbsp; 从分类上来说，这种异步可插入协议的技术还分为两种：\n\n*   永久的异步可插入协议，就像http，https，mailto这种不论在ie中或是其它用到浏览器控件中使用。\n*   临时的异步可插入协议，只能用在某个进程内，用完可以擦除。\n\n&nbsp;\n\n&nbsp;&nbsp; &nbsp; 更详细介绍异步可插入协议的资源有[http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html](http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html)。\n\n&nbsp;&nbsp; &nbsp; 因为网上介绍永久的异步可插入协议的资源还很多，如codeproject上的：\n\n> [http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html](http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html)\n> [http://www.codeproject.com/KB/aspnet/AspxProtocol.aspx](http://www.codeproject.com/KB/aspnet/AspxProtocol.aspx)\n\n&nbsp;&nbsp;&nbsp;&nbsp;这篇就主要谈谈如何实现临时的异步可插入协议的方法。\n\n&nbsp;\n\n下面谈下具体的实现。\n\n在本实现中主要用到了下面这几个接口：\n\n*   <span style=\"font-size:12pt\">**IInternetProtocol\n    **</span>\n*   <span style=\"font-size:12pt\">**IInternetProtocolRoot\n    **</span>\n*   <span style=\"font-size:12pt\">**IInternetSession\n    **</span>\n*   <div><span style=\"font-size:12pt\">**IInternetProtocolInfo\n    **</span></div>\n\n    &nbsp;\n\n**IInternetProtocol**接口\n\n它有四个方法：\n\n<div>\n<table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\">\n    <colgroup><col style=\"width:101px\"><col style=\"width:483px\"></colgroup>\n    <tbody valign=\"top\">\n        <tr>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">LockRequest</span>&nbsp;\n\n            </td>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Locks the requested resource so that the IInternetProtocolRoot::Terminate method can be called, and the remaining data can be read. </span>\n\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Read</span>&nbsp;\n\n            </td>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Reads data that the pluggable protocol handler gets. </span>&nbsp;\n\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Seek</span>&nbsp;\n\n            </td>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Moves the current seek offset.</span>&nbsp;\n\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">UnlockRequest</span>&nbsp;\n\n            </td>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Frees any resources associated with a lock. </span>\n\n            </td>\n        </tr>\n    </table>\n    </div>\n\n主要用于下载资源，将处理后的资源传递给IE进行显示。\n\n    &nbsp;\n\n**IInternetProtocolRoot**接口\n\n    <div>\n    <table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\">\n        <colgroup><col style=\"width:74px\"><col style=\"width:510px\"></colgroup>\n        <tbody valign=\"top\">\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Abort</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Cancels an operation that is in progress. </span>&nbsp;\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Continue</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Enables the pluggable protocol handler to continue processing data on the apartment thread. </span>&nbsp;\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Resume</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Not currently implemented. </span>&nbsp;\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Start</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Starts the operation. </span>\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Suspend</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Not implemented.</span>&nbsp;\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Terminate</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Releases the resources used by the pluggable protocol handler. </span>&nbsp;\n\n                </td>\n            </tr>\n        </table>\n        </div>\n\n主要用于解析资源，准备待下载的资源。\n\n        &nbsp;\n\n**IInternetSession**接口\n\n它包括9个方法，根据需要我们只用到了下面两个方法：\n\n        <div>\n        <table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\">\n            <colgroup><col style=\"width:140px\"><col style=\"width:444px\"></colgroup>\n            <tbody valign=\"top\">\n                <tr>\n                    <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nRegisterNameSpace\n\n                    </td>\n                    <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nRegisters a temporary pluggable namespace handler on the current process.\n\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nUnregisterNameSpace&nbsp;\n\n                    </td>\n                    <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nUnregisters a temporary pluggable namespace handler.&nbsp;\n\n                    </td>\n                </tr>\n            </table>\n            </div>\n\n实现临时可插入协议的注册和取消。\n\n            &nbsp;\n\n**IInternetProtocolInfo**接口**\n            **\n\n它包括4个方法。\n\n            <div>\n            <table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\">\n                <colgroup><col style=\"width:79px\"><col style=\"width:327px\"></colgroup>\n                <tbody valign=\"top\">\n                    <tr>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nCombineUrl&nbsp;\n\n                        </td>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nCombines a base URL and relative URL into a full URL. &nbsp;\n\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nCompareUrl&nbsp;\n\n                        </td>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nCompares two URLs and determines if they are equal. \n\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nParseUrl&nbsp;\n\n                        </td>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nParses a URL. &nbsp;\n\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nQueryInfo&nbsp;\n\n                        </td>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nGets information related to the specified URL. &nbsp;\n\n                        </td>\n                    </tr>\n                </table>\n                </div>\n\n主要提供了对于Url的处理。\n\n                &nbsp;\n\n此外，在构造IInternetSession的时候还用到了一个外部方法：\n\n<span style=\"font-family:新宋体; font-size:10pt\">[<span style=\"color:#2b91af\">DllImport</span>(<span style=\"color:#a31515\">\"urlmon.dll\"</span>)]\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:blue\">private</span>\n                <span style=\"color:blue\">static</span>\n                <span style=\"color:blue\">extern</span>\n                <span style=\"color:blue\">void</span> CoInternetGetSession(<span style=\"color:blue\">int</span> sessionMode,\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">out</span>\n                <span style=\"color:#2b91af\">IInternetSession</span> session, <span style=\"color:blue\">int</span> reserved);\n                </span>\n\n                &nbsp;\n\n预备的知识介绍完，下面就是具体实现了。\n\n一般方法是在一个类中实现**IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo**三个接口，然后通过IInternetSession接口的<span style=\"font-family:新宋体; font-size:10pt\">RegisterNameSpace方法</span>来注册这个自定义协议，用完这后再调用UnregisterNameSpace方法来注销这个自定义协议。\n\n关于IE和**IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo**三个接口的调用流程可以参考msdn上的介绍,中文版的翻译可以参考：\n\n[http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html](http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html)\n\n                &nbsp;\n\n首先通过CoInternetGetSession方法得到一个IInternetSession对象，然后注册自定义的协议：\n\n<span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:#2b91af\">IInternetSession</span> session;\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">CoInternetGetSession(0, <span style=\"color:blue\">out</span> session, 0);\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:#2b91af\">Guid</span> guid = <span style=\"color:blue\">new</span>\n                <span style=\"color:#2b91af\">Guid</span>(<span style=\"color:#a31515\">\"79EAC9E4-BAF9-11CE-8C82-00AA004BA90B\"</span>);\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">session.RegisterNameSpace(<span style=\"color:blue\">new</span>\n                <span style=\"color:#2b91af\">ClassFactory</span>(), <span style=\"color:blue\">ref</span> guid, ProcotolName, 0, <span style=\"color:blue\">null</span>, 0);\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">在注册的时候要传入一个实现了IClassFactory接口的对象，下面是对次接口的实现：\n                </span>\n\n<span style=\"color:green; font-family:新宋体; font-size:10pt\">// Interface IClassFactory is here to provide a C# definition of the\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:green\">// COM IClassFactory interface.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">    [\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:#2b91af\">ComImport</span>, <span style=\"color:green\">// This interface originated from COM.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:#2b91af\">ComVisible</span>(<span style=\"color:blue\">true</span>), <span style=\"color:green\">// It is not hard to imagine that this interface must not be exposed to COM.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:#2b91af\">InterfaceType</span>(<span style=\"color:#2b91af\">ComInterfaceType</span>.InterfaceIsIUnknown), <span style=\"color:green\">// Indicate that this interface is not IDispatch-based.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:#2b91af\">Guid</span>(<span style=\"color:#a31515\">\"00000001-0000-0000-C000-000000000046\"</span>)  <span style=\"color:green\">// This GUID is the actual GUID of IClassFactory.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">    ]\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">public</span>\n                <span style=\"color:blue\">interface</span>\n                <span style=\"color:#2b91af\">IClassFactory\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">    {\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">void</span> CreateInstance(<span style=\"color:#2b91af\">IntPtr</span> pUnkOuter, <span style=\"color:blue\">ref</span>\n                <span style=\"color:#2b91af\">Guid</span> riid, <span style=\"color:blue\">out</span>\n                <span style=\"color:#2b91af\">IntPtr</span> ppvObject);\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">}\n                </span>\n\n                &nbsp;\n\n<span style=\"font-family:新宋体; font-size:10pt\">[<span style=\"color:#2b91af\">ComVisible</span>(<span style=\"color:blue\">true</span>)]\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">public</span>\n                <span style=\"color:blue\">class</span>\n                <span style=\"color:#2b91af\">ClassFactory</span> : <span style=\"color:#2b91af\">IClassFactory\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">    {\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:blue\">        #region</span> IClassFactory Implementations\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">public</span>\n                <span style=\"color:blue\">void</span> CreateInstance(<span style=\"color:#2b91af\">IntPtr</span> pUnkOuter, <span style=\"color:blue\">ref</span>\n                <span style=\"color:#2b91af\">Guid</span> riid, <span style=\"color:blue\">out</span>\n                <span style=\"color:#2b91af\">IntPtr</span> ppvObject)\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">        {\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">            ppvObject = <span style=\"color:#2b91af\">Marshal</span>.GetComInterfaceForObject(<span style=\"color:blue\">new</span>\n                <span style=\"color:#2b91af\">MyImageProtocol</span>(), <span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">IInternetProtocolInfo</span>));\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">        }\n                </span>\n\n<span style=\"color:blue; font-family:新宋体; font-size:10pt\">        #endregion\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">}\n                </span>\n\n                &nbsp;\n\n一下至于**IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo**三个接口实现，大家可以参考上面提到的[http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html](http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html)这篇文章。不过要注意的就是这个实现的第二个协议似乎有bug，在实验一次后，可能将IE搞崩溃了，所以实验时要谨慎，不行就用regasm /u命令将dll注销了。\n                ","source":"_drafts/浏览器扩展系列————异步可插入协议（pluggable-protocol）的实现.md","raw":"---\ntitle: 浏览器扩展系列————异步可插入协议（pluggable protocol）的实现\ntags: []\ndate: 2009-03-28 18:42:00\n---\n\n&nbsp;&nbsp; &nbsp; &nbsp;IE中有很多我们比较熟悉的协议，如http,https,mailto,ftp等。当然你也可以实现自己定义的协议，稍微谈一下这里所说的协议，从我的理解来说这里的协议只有当你的网页引用某个资源时才会调用，而不是随便在某个属性的值前面加上某个协议的名称就可以了。常见的协议调用如img的src属性中，很多元素style中的background-image属性中，还有a标签的href属性中。\n\n&nbsp;&nbsp; &nbsp; &nbsp; 言归正传，前面说到的实现自定义协议就用到了一种IE下异步可插入协议的技术。\n\n&nbsp;&nbsp; &nbsp; &nbsp; 从分类上来说，这种异步可插入协议的技术还分为两种：\n\n*   永久的异步可插入协议，就像http，https，mailto这种不论在ie中或是其它用到浏览器控件中使用。\n*   临时的异步可插入协议，只能用在某个进程内，用完可以擦除。\n\n&nbsp;\n\n&nbsp;&nbsp; &nbsp; 更详细介绍异步可插入协议的资源有[http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html](http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html)。\n\n&nbsp;&nbsp; &nbsp; 因为网上介绍永久的异步可插入协议的资源还很多，如codeproject上的：\n\n> [http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html](http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html)\n> [http://www.codeproject.com/KB/aspnet/AspxProtocol.aspx](http://www.codeproject.com/KB/aspnet/AspxProtocol.aspx)\n\n&nbsp;&nbsp;&nbsp;&nbsp;这篇就主要谈谈如何实现临时的异步可插入协议的方法。\n\n&nbsp;\n\n下面谈下具体的实现。\n\n在本实现中主要用到了下面这几个接口：\n\n*   <span style=\"font-size:12pt\">**IInternetProtocol\n    **</span>\n*   <span style=\"font-size:12pt\">**IInternetProtocolRoot\n    **</span>\n*   <span style=\"font-size:12pt\">**IInternetSession\n    **</span>\n*   <div><span style=\"font-size:12pt\">**IInternetProtocolInfo\n    **</span></div>\n\n    &nbsp;\n\n**IInternetProtocol**接口\n\n它有四个方法：\n\n<div>\n<table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\">\n    <colgroup><col style=\"width:101px\"><col style=\"width:483px\"></colgroup>\n    <tbody valign=\"top\">\n        <tr>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">LockRequest</span>&nbsp;\n\n            </td>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Locks the requested resource so that the IInternetProtocolRoot::Terminate method can be called, and the remaining data can be read. </span>\n\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Read</span>&nbsp;\n\n            </td>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Reads data that the pluggable protocol handler gets. </span>&nbsp;\n\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Seek</span>&nbsp;\n\n            </td>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Moves the current seek offset.</span>&nbsp;\n\n            </td>\n        </tr>\n        <tr>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">UnlockRequest</span>&nbsp;\n\n            </td>\n            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-family:Cambria\">Frees any resources associated with a lock. </span>\n\n            </td>\n        </tr>\n    </table>\n    </div>\n\n主要用于下载资源，将处理后的资源传递给IE进行显示。\n\n    &nbsp;\n\n**IInternetProtocolRoot**接口\n\n    <div>\n    <table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\">\n        <colgroup><col style=\"width:74px\"><col style=\"width:510px\"></colgroup>\n        <tbody valign=\"top\">\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Abort</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Cancels an operation that is in progress. </span>&nbsp;\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Continue</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Enables the pluggable protocol handler to continue processing data on the apartment thread. </span>&nbsp;\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Resume</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Not currently implemented. </span>&nbsp;\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Start</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Starts the operation. </span>\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Suspend</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Not implemented.</span>&nbsp;\n\n                </td>\n            </tr>\n            <tr>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Terminate</span>&nbsp;\n\n                </td>\n                <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\n<span style=\"font-size:12pt\">Releases the resources used by the pluggable protocol handler. </span>&nbsp;\n\n                </td>\n            </tr>\n        </table>\n        </div>\n\n主要用于解析资源，准备待下载的资源。\n\n        &nbsp;\n\n**IInternetSession**接口\n\n它包括9个方法，根据需要我们只用到了下面两个方法：\n\n        <div>\n        <table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\">\n            <colgroup><col style=\"width:140px\"><col style=\"width:444px\"></colgroup>\n            <tbody valign=\"top\">\n                <tr>\n                    <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nRegisterNameSpace\n\n                    </td>\n                    <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nRegisters a temporary pluggable namespace handler on the current process.\n\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nUnregisterNameSpace&nbsp;\n\n                    </td>\n                    <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nUnregisters a temporary pluggable namespace handler.&nbsp;\n\n                    </td>\n                </tr>\n            </table>\n            </div>\n\n实现临时可插入协议的注册和取消。\n\n            &nbsp;\n\n**IInternetProtocolInfo**接口**\n            **\n\n它包括4个方法。\n\n            <div>\n            <table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\">\n                <colgroup><col style=\"width:79px\"><col style=\"width:327px\"></colgroup>\n                <tbody valign=\"top\">\n                    <tr>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nCombineUrl&nbsp;\n\n                        </td>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nCombines a base URL and relative URL into a full URL. &nbsp;\n\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nCompareUrl&nbsp;\n\n                        </td>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nCompares two URLs and determines if they are equal. \n\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nParseUrl&nbsp;\n\n                        </td>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nParses a URL. &nbsp;\n\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nQueryInfo&nbsp;\n\n                        </td>\n                        <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \">\n\nGets information related to the specified URL. &nbsp;\n\n                        </td>\n                    </tr>\n                </table>\n                </div>\n\n主要提供了对于Url的处理。\n\n                &nbsp;\n\n此外，在构造IInternetSession的时候还用到了一个外部方法：\n\n<span style=\"font-family:新宋体; font-size:10pt\">[<span style=\"color:#2b91af\">DllImport</span>(<span style=\"color:#a31515\">\"urlmon.dll\"</span>)]\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:blue\">private</span>\n                <span style=\"color:blue\">static</span>\n                <span style=\"color:blue\">extern</span>\n                <span style=\"color:blue\">void</span> CoInternetGetSession(<span style=\"color:blue\">int</span> sessionMode,\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">out</span>\n                <span style=\"color:#2b91af\">IInternetSession</span> session, <span style=\"color:blue\">int</span> reserved);\n                </span>\n\n                &nbsp;\n\n预备的知识介绍完，下面就是具体实现了。\n\n一般方法是在一个类中实现**IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo**三个接口，然后通过IInternetSession接口的<span style=\"font-family:新宋体; font-size:10pt\">RegisterNameSpace方法</span>来注册这个自定义协议，用完这后再调用UnregisterNameSpace方法来注销这个自定义协议。\n\n关于IE和**IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo**三个接口的调用流程可以参考msdn上的介绍,中文版的翻译可以参考：\n\n[http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html](http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html)\n\n                &nbsp;\n\n首先通过CoInternetGetSession方法得到一个IInternetSession对象，然后注册自定义的协议：\n\n<span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:#2b91af\">IInternetSession</span> session;\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">CoInternetGetSession(0, <span style=\"color:blue\">out</span> session, 0);\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:#2b91af\">Guid</span> guid = <span style=\"color:blue\">new</span>\n                <span style=\"color:#2b91af\">Guid</span>(<span style=\"color:#a31515\">\"79EAC9E4-BAF9-11CE-8C82-00AA004BA90B\"</span>);\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">session.RegisterNameSpace(<span style=\"color:blue\">new</span>\n                <span style=\"color:#2b91af\">ClassFactory</span>(), <span style=\"color:blue\">ref</span> guid, ProcotolName, 0, <span style=\"color:blue\">null</span>, 0);\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">在注册的时候要传入一个实现了IClassFactory接口的对象，下面是对次接口的实现：\n                </span>\n\n<span style=\"color:green; font-family:新宋体; font-size:10pt\">// Interface IClassFactory is here to provide a C# definition of the\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:green\">// COM IClassFactory interface.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">    [\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:#2b91af\">ComImport</span>, <span style=\"color:green\">// This interface originated from COM.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:#2b91af\">ComVisible</span>(<span style=\"color:blue\">true</span>), <span style=\"color:green\">// It is not hard to imagine that this interface must not be exposed to COM.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:#2b91af\">InterfaceType</span>(<span style=\"color:#2b91af\">ComInterfaceType</span>.InterfaceIsIUnknown), <span style=\"color:green\">// Indicate that this interface is not IDispatch-based.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:#2b91af\">Guid</span>(<span style=\"color:#a31515\">\"00000001-0000-0000-C000-000000000046\"</span>)  <span style=\"color:green\">// This GUID is the actual GUID of IClassFactory.\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">    ]\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">public</span>\n                <span style=\"color:blue\">interface</span>\n                <span style=\"color:#2b91af\">IClassFactory\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">    {\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">void</span> CreateInstance(<span style=\"color:#2b91af\">IntPtr</span> pUnkOuter, <span style=\"color:blue\">ref</span>\n                <span style=\"color:#2b91af\">Guid</span> riid, <span style=\"color:blue\">out</span>\n                <span style=\"color:#2b91af\">IntPtr</span> ppvObject);\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">}\n                </span>\n\n                &nbsp;\n\n<span style=\"font-family:新宋体; font-size:10pt\">[<span style=\"color:#2b91af\">ComVisible</span>(<span style=\"color:blue\">true</span>)]\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">public</span>\n                <span style=\"color:blue\">class</span>\n                <span style=\"color:#2b91af\">ClassFactory</span> : <span style=\"color:#2b91af\">IClassFactory\n                </span></span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">    {\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:blue\">        #region</span> IClassFactory Implementations\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">\n                <span style=\"color:blue\">public</span>\n                <span style=\"color:blue\">void</span> CreateInstance(<span style=\"color:#2b91af\">IntPtr</span> pUnkOuter, <span style=\"color:blue\">ref</span>\n                <span style=\"color:#2b91af\">Guid</span> riid, <span style=\"color:blue\">out</span>\n                <span style=\"color:#2b91af\">IntPtr</span> ppvObject)\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">        {\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">            ppvObject = <span style=\"color:#2b91af\">Marshal</span>.GetComInterfaceForObject(<span style=\"color:blue\">new</span>\n                <span style=\"color:#2b91af\">MyImageProtocol</span>(), <span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">IInternetProtocolInfo</span>));\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">        }\n                </span>\n\n<span style=\"color:blue; font-family:新宋体; font-size:10pt\">        #endregion\n                </span>\n\n<span style=\"font-family:新宋体; font-size:10pt\">}\n                </span>\n\n                &nbsp;\n\n一下至于**IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo**三个接口实现，大家可以参考上面提到的[http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html](http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html)这篇文章。不过要注意的就是这个实现的第二个协议似乎有bug，在实验一次后，可能将IE搞崩溃了，所以实验时要谨慎，不行就用regasm /u命令将dll注销了。\n                ","slug":"浏览器扩展系列————异步可插入协议（pluggable-protocol）的实现","published":0,"updated":"2019-02-16T13:03:17.000Z","_id":"cjsbx7ya70010y6zswkn71dn6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>&nbsp;&nbsp; &nbsp; &nbsp;IE中有很多我们比较熟悉的协议，如http,https,mailto,ftp等。当然你也可以实现自己定义的协议，稍微谈一下这里所说的协议，从我的理解来说这里的协议只有当你的网页引用某个资源时才会调用，而不是随便在某个属性的值前面加上某个协议的名称就可以了。常见的协议调用如img的src属性中，很多元素style中的background-image属性中，还有a标签的href属性中。</p>\n<p>&nbsp;&nbsp; &nbsp; &nbsp; 言归正传，前面说到的实现自定义协议就用到了一种IE下异步可插入协议的技术。</p>\n<p>&nbsp;&nbsp; &nbsp; &nbsp; 从分类上来说，这种异步可插入协议的技术还分为两种：</p>\n<ul>\n<li>永久的异步可插入协议，就像http，https，mailto这种不论在ie中或是其它用到浏览器控件中使用。</li>\n<li>临时的异步可插入协议，只能用在某个进程内，用完可以擦除。</li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;&nbsp; &nbsp; 更详细介绍异步可插入协议的资源有<a href=\"http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html\" target=\"_blank\" rel=\"noopener\">http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html</a>。</p>\n<p>&nbsp;&nbsp; &nbsp; 因为网上介绍永久的异步可插入协议的资源还很多，如codeproject上的：</p>\n<blockquote>\n<p><a href=\"http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html\" target=\"_blank\" rel=\"noopener\">http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html</a><br><a href=\"http://www.codeproject.com/KB/aspnet/AspxProtocol.aspx\" target=\"_blank\" rel=\"noopener\">http://www.codeproject.com/KB/aspnet/AspxProtocol.aspx</a></p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;这篇就主要谈谈如何实现临时的异步可插入协议的方法。</p>\n<p>&nbsp;</p>\n<p>下面谈下具体的实现。</p>\n<p>在本实现中主要用到了下面这几个接口：</p>\n<ul>\n<li><span style=\"font-size:12pt\"><strong>IInternetProtocol\n</strong></span></li>\n<li><span style=\"font-size:12pt\"><strong>IInternetProtocolRoot\n</strong></span></li>\n<li><span style=\"font-size:12pt\"><strong>IInternetSession\n</strong></span></li>\n<li><div><span style=\"font-size:12pt\"><strong>IInternetProtocolInfo\n</strong></span></div>\n\n<p>&nbsp;</p>\n</li>\n</ul>\n<p><strong>IInternetProtocol</strong>接口</p>\n<p>它有四个方法：</p>\n<div><br><table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\"><br>    <colgroup><col style=\"width:101px\"><col style=\"width:483px\"></colgroup><br>    <tbody valign=\"top\"><br>        <tr><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">LockRequest</span>&nbsp;<br><br>            </td><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Locks the requested resource so that the IInternetProtocolRoot::Terminate method can be called, and the remaining data can be read. </span><br><br>            </td><br>        </tr><br>        <tr><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Read</span>&nbsp;<br><br>            </td><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Reads data that the pluggable protocol handler gets. </span>&nbsp;<br><br>            </td><br>        </tr><br>        <tr><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Seek</span>&nbsp;<br><br>            </td><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Moves the current seek offset.</span>&nbsp;<br><br>            </td><br>        </tr><br>        <tr><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">UnlockRequest</span>&nbsp;<br><br>            </td><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Frees any resources associated with a lock. </span><br><br>            </td><br>        </tr><br>    </tbody></table><br>    </div>\n\n<p>主要用于下载资源，将处理后的资源传递给IE进行显示。</p>\n<pre><code>&amp;nbsp;\n</code></pre><p><strong>IInternetProtocolRoot</strong>接口</p>\n<pre><code>&lt;div&gt;\n&lt;table style=&quot;border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; &quot; border=&quot;0&quot;&gt;\n    &lt;colgroup&gt;&lt;col style=&quot;width:74px&quot;&gt;&lt;col style=&quot;width:510px&quot;&gt;&lt;/colgroup&gt;\n    &lt;tbody valign=&quot;top&quot;&gt;\n        &lt;tr&gt;\n            &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Abort</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Cancels an operation that is in progress. </span>&nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Continue</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Enables the pluggable protocol handler to continue processing data on the apartment thread. </span>&nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Resume</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Not currently implemented. </span>&nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Start</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Starts the operation. </span></p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Suspend</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Not implemented.</span>&nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Terminate</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Releases the resources used by the pluggable protocol handler. </span>&nbsp;</p>\n<pre><code>        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n</code></pre><p>主要用于解析资源，准备待下载的资源。</p>\n<pre><code>&amp;nbsp;\n</code></pre><p><strong>IInternetSession</strong>接口</p>\n<p>它包括9个方法，根据需要我们只用到了下面两个方法：</p>\n<pre><code>&lt;div&gt;\n&lt;table style=&quot;border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; &quot; border=&quot;0&quot;&gt;\n    &lt;colgroup&gt;&lt;col style=&quot;width:140px&quot;&gt;&lt;col style=&quot;width:444px&quot;&gt;&lt;/colgroup&gt;\n    &lt;tbody valign=&quot;top&quot;&gt;\n        &lt;tr&gt;\n            &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>RegisterNameSpace</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Registers a temporary pluggable namespace handler on the current process.</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>UnregisterNameSpace&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Unregisters a temporary pluggable namespace handler.&nbsp;</p>\n<pre><code>        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n</code></pre><p>实现临时可插入协议的注册和取消。</p>\n<pre><code>&amp;nbsp;\n</code></pre><p><strong>IInternetProtocolInfo</strong>接口<strong>\n            </strong></p>\n<p>它包括4个方法。</p>\n<pre><code>&lt;div&gt;\n&lt;table style=&quot;border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; &quot; border=&quot;0&quot;&gt;\n    &lt;colgroup&gt;&lt;col style=&quot;width:79px&quot;&gt;&lt;col style=&quot;width:327px&quot;&gt;&lt;/colgroup&gt;\n    &lt;tbody valign=&quot;top&quot;&gt;\n        &lt;tr&gt;\n            &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>CombineUrl&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Combines a base URL and relative URL into a full URL. &nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>CompareUrl&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Compares two URLs and determines if they are equal. </p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>ParseUrl&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Parses a URL. &nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>QueryInfo&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Gets information related to the specified URL. &nbsp;</p>\n<pre><code>        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n</code></pre><p>主要提供了对于Url的处理。</p>\n<pre><code>&amp;nbsp;\n</code></pre><p>此外，在构造IInternetSession的时候还用到了一个外部方法：</p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">[<span style=\"color:#2b91af\">DllImport</span>(<span style=\"color:#a31515\">“urlmon.dll”</span>)]<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:blue\">private</span><br>                <span style=\"color:blue\">static</span><br>                <span style=\"color:blue\">extern</span><br>                <span style=\"color:blue\">void</span> CoInternetGetSession(<span style=\"color:blue\">int</span> sessionMode,<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">out</span><br>                <span style=\"color:#2b91af\">IInternetSession</span> session, <span style=\"color:blue\">int</span> reserved);<br>                </span></p>\n<pre><code>&amp;nbsp;\n</code></pre><p>预备的知识介绍完，下面就是具体实现了。</p>\n<p>一般方法是在一个类中实现<strong>IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo</strong>三个接口，然后通过IInternetSession接口的<span style=\"font-family:新宋体; font-size:10pt\">RegisterNameSpace方法</span>来注册这个自定义协议，用完这后再调用UnregisterNameSpace方法来注销这个自定义协议。</p>\n<p>关于IE和<strong>IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo</strong>三个接口的调用流程可以参考msdn上的介绍,中文版的翻译可以参考：</p>\n<p><a href=\"http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html</a></p>\n<pre><code>&amp;nbsp;\n</code></pre><p>首先通过CoInternetGetSession方法得到一个IInternetSession对象，然后注册自定义的协议：</p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:#2b91af\">IInternetSession</span> session;<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">CoInternetGetSession(0, <span style=\"color:blue\">out</span> session, 0);<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:#2b91af\">Guid</span> guid = <span style=\"color:blue\">new</span><br>                <span style=\"color:#2b91af\">Guid</span>(<span style=\"color:#a31515\">“79EAC9E4-BAF9-11CE-8C82-00AA004BA90B”</span>);<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">session.RegisterNameSpace(<span style=\"color:blue\">new</span><br>                <span style=\"color:#2b91af\">ClassFactory</span>(), <span style=\"color:blue\">ref</span> guid, ProcotolName, 0, <span style=\"color:blue\">null</span>, 0);<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">在注册的时候要传入一个实现了IClassFactory接口的对象，下面是对次接口的实现：<br>                </span></p>\n<p><span style=\"color:green; font-family:新宋体; font-size:10pt\">// Interface IClassFactory is here to provide a C# definition of the<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:green\">// COM IClassFactory interface.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">    [<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:#2b91af\">ComImport</span>, <span style=\"color:green\">// This interface originated from COM.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:#2b91af\">ComVisible</span>(<span style=\"color:blue\">true</span>), <span style=\"color:green\">// It is not hard to imagine that this interface must not be exposed to COM.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:#2b91af\">InterfaceType</span>(<span style=\"color:#2b91af\">ComInterfaceType</span>.InterfaceIsIUnknown), <span style=\"color:green\">// Indicate that this interface is not IDispatch-based.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:#2b91af\">Guid</span>(<span style=\"color:#a31515\">“00000001-0000-0000-C000-000000000046”</span>)  <span style=\"color:green\">// This GUID is the actual GUID of IClassFactory.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">    ]<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">public</span><br>                <span style=\"color:blue\">interface</span><br>                <span style=\"color:#2b91af\">IClassFactory<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">    {<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">void</span> CreateInstance(<span style=\"color:#2b91af\">IntPtr</span> pUnkOuter, <span style=\"color:blue\">ref</span><br>                <span style=\"color:#2b91af\">Guid</span> riid, <span style=\"color:blue\">out</span><br>                <span style=\"color:#2b91af\">IntPtr</span> ppvObject);<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">}<br>                </span></p>\n<pre><code>&amp;nbsp;\n</code></pre><p><span style=\"font-family:新宋体; font-size:10pt\">[<span style=\"color:#2b91af\">ComVisible</span>(<span style=\"color:blue\">true</span>)]<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">public</span><br>                <span style=\"color:blue\">class</span><br>                <span style=\"color:#2b91af\">ClassFactory</span> : <span style=\"color:#2b91af\">IClassFactory<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">    {<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:blue\">        #region</span> IClassFactory Implementations<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">public</span><br>                <span style=\"color:blue\">void</span> CreateInstance(<span style=\"color:#2b91af\">IntPtr</span> pUnkOuter, <span style=\"color:blue\">ref</span><br>                <span style=\"color:#2b91af\">Guid</span> riid, <span style=\"color:blue\">out</span><br>                <span style=\"color:#2b91af\">IntPtr</span> ppvObject)<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">        {<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">            ppvObject = <span style=\"color:#2b91af\">Marshal</span>.GetComInterfaceForObject(<span style=\"color:blue\">new</span><br>                <span style=\"color:#2b91af\">MyImageProtocol</span>(), <span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">IInternetProtocolInfo</span>));<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">        }<br>                </span></p>\n<p><span style=\"color:blue; font-family:新宋体; font-size:10pt\">        #endregion<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">}<br>                </span></p>\n<pre><code>&amp;nbsp;\n</code></pre><p>一下至于<strong>IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo</strong>三个接口实现，大家可以参考上面提到的<a href=\"http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html</a>这篇文章。不过要注意的就是这个实现的第二个协议似乎有bug，在实验一次后，可能将IE搞崩溃了，所以实验时要谨慎，不行就用regasm /u命令将dll注销了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&nbsp;&nbsp; &nbsp; &nbsp;IE中有很多我们比较熟悉的协议，如http,https,mailto,ftp等。当然你也可以实现自己定义的协议，稍微谈一下这里所说的协议，从我的理解来说这里的协议只有当你的网页引用某个资源时才会调用，而不是随便在某个属性的值前面加上某个协议的名称就可以了。常见的协议调用如img的src属性中，很多元素style中的background-image属性中，还有a标签的href属性中。</p>\n<p>&nbsp;&nbsp; &nbsp; &nbsp; 言归正传，前面说到的实现自定义协议就用到了一种IE下异步可插入协议的技术。</p>\n<p>&nbsp;&nbsp; &nbsp; &nbsp; 从分类上来说，这种异步可插入协议的技术还分为两种：</p>\n<ul>\n<li>永久的异步可插入协议，就像http，https，mailto这种不论在ie中或是其它用到浏览器控件中使用。</li>\n<li>临时的异步可插入协议，只能用在某个进程内，用完可以擦除。</li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;&nbsp; &nbsp; 更详细介绍异步可插入协议的资源有<a href=\"http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html\" target=\"_blank\" rel=\"noopener\">http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html</a>。</p>\n<p>&nbsp;&nbsp; &nbsp; 因为网上介绍永久的异步可插入协议的资源还很多，如codeproject上的：</p>\n<blockquote>\n<p><a href=\"http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html\" target=\"_blank\" rel=\"noopener\">http://www.cppblog.com/bigsml/archive/2008/03/23/45145.html</a><br><a href=\"http://www.codeproject.com/KB/aspnet/AspxProtocol.aspx\" target=\"_blank\" rel=\"noopener\">http://www.codeproject.com/KB/aspnet/AspxProtocol.aspx</a></p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;这篇就主要谈谈如何实现临时的异步可插入协议的方法。</p>\n<p>&nbsp;</p>\n<p>下面谈下具体的实现。</p>\n<p>在本实现中主要用到了下面这几个接口：</p>\n<ul>\n<li><span style=\"font-size:12pt\"><strong>IInternetProtocol\n</strong></span></li>\n<li><span style=\"font-size:12pt\"><strong>IInternetProtocolRoot\n</strong></span></li>\n<li><span style=\"font-size:12pt\"><strong>IInternetSession\n</strong></span></li>\n<li><div><span style=\"font-size:12pt\"><strong>IInternetProtocolInfo\n</strong></span></div>\n\n<p>&nbsp;</p>\n</li>\n</ul>\n<p><strong>IInternetProtocol</strong>接口</p>\n<p>它有四个方法：</p>\n<div><br><table style=\"border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; \" border=\"0\"><br>    <colgroup><col style=\"width:101px\"><col style=\"width:483px\"></colgroup><br>    <tbody valign=\"top\"><br>        <tr><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">LockRequest</span>&nbsp;<br><br>            </td><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Locks the requested resource so that the IInternetProtocolRoot::Terminate method can be called, and the remaining data can be read. </span><br><br>            </td><br>        </tr><br>        <tr><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Read</span>&nbsp;<br><br>            </td><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Reads data that the pluggable protocol handler gets. </span>&nbsp;<br><br>            </td><br>        </tr><br>        <tr><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Seek</span>&nbsp;<br><br>            </td><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Moves the current seek offset.</span>&nbsp;<br><br>            </td><br>        </tr><br>        <tr><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">UnlockRequest</span>&nbsp;<br><br>            </td><br>            <td style=\"padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; \"><br><br><span style=\"font-family:Cambria\">Frees any resources associated with a lock. </span><br><br>            </td><br>        </tr><br>    </tbody></table><br>    </div>\n\n<p>主要用于下载资源，将处理后的资源传递给IE进行显示。</p>\n<pre><code>&amp;nbsp;\n</code></pre><p><strong>IInternetProtocolRoot</strong>接口</p>\n<pre><code>&lt;div&gt;\n&lt;table style=&quot;border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; &quot; border=&quot;0&quot;&gt;\n    &lt;colgroup&gt;&lt;col style=&quot;width:74px&quot;&gt;&lt;col style=&quot;width:510px&quot;&gt;&lt;/colgroup&gt;\n    &lt;tbody valign=&quot;top&quot;&gt;\n        &lt;tr&gt;\n            &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Abort</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Cancels an operation that is in progress. </span>&nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Continue</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Enables the pluggable protocol handler to continue processing data on the apartment thread. </span>&nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Resume</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Not currently implemented. </span>&nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Start</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Starts the operation. </span></p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Suspend</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Not implemented.</span>&nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Terminate</span>&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p><span style=\"font-size:12pt\">Releases the resources used by the pluggable protocol handler. </span>&nbsp;</p>\n<pre><code>        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n</code></pre><p>主要用于解析资源，准备待下载的资源。</p>\n<pre><code>&amp;nbsp;\n</code></pre><p><strong>IInternetSession</strong>接口</p>\n<p>它包括9个方法，根据需要我们只用到了下面两个方法：</p>\n<pre><code>&lt;div&gt;\n&lt;table style=&quot;border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; &quot; border=&quot;0&quot;&gt;\n    &lt;colgroup&gt;&lt;col style=&quot;width:140px&quot;&gt;&lt;col style=&quot;width:444px&quot;&gt;&lt;/colgroup&gt;\n    &lt;tbody valign=&quot;top&quot;&gt;\n        &lt;tr&gt;\n            &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>RegisterNameSpace</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Registers a temporary pluggable namespace handler on the current process.</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>UnregisterNameSpace&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Unregisters a temporary pluggable namespace handler.&nbsp;</p>\n<pre><code>        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n</code></pre><p>实现临时可插入协议的注册和取消。</p>\n<pre><code>&amp;nbsp;\n</code></pre><p><strong>IInternetProtocolInfo</strong>接口<strong>\n            </strong></p>\n<p>它包括4个方法。</p>\n<pre><code>&lt;div&gt;\n&lt;table style=&quot;border-collapse: collapse; background-image: initial; background-repeat: initial; background-attachment: initial; background-color: #eeeeee; &quot; border=&quot;0&quot;&gt;\n    &lt;colgroup&gt;&lt;col style=&quot;width:79px&quot;&gt;&lt;col style=&quot;width:327px&quot;&gt;&lt;/colgroup&gt;\n    &lt;tbody valign=&quot;top&quot;&gt;\n        &lt;tr&gt;\n            &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>CombineUrl&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Combines a base URL and relative URL into a full URL. &nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>CompareUrl&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Compares two URLs and determines if they are equal. </p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>ParseUrl&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Parses a URL. &nbsp;</p>\n<pre><code>    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n    &lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>QueryInfo&nbsp;</p>\n<pre><code>&lt;/td&gt;\n&lt;td style=&quot;padding-top: 2px; padding-left: 2px; padding-bottom: 2px; padding-right: 2px; &quot;&gt;\n</code></pre><p>Gets information related to the specified URL. &nbsp;</p>\n<pre><code>        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n</code></pre><p>主要提供了对于Url的处理。</p>\n<pre><code>&amp;nbsp;\n</code></pre><p>此外，在构造IInternetSession的时候还用到了一个外部方法：</p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">[<span style=\"color:#2b91af\">DllImport</span>(<span style=\"color:#a31515\">“urlmon.dll”</span>)]<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:blue\">private</span><br>                <span style=\"color:blue\">static</span><br>                <span style=\"color:blue\">extern</span><br>                <span style=\"color:blue\">void</span> CoInternetGetSession(<span style=\"color:blue\">int</span> sessionMode,<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">out</span><br>                <span style=\"color:#2b91af\">IInternetSession</span> session, <span style=\"color:blue\">int</span> reserved);<br>                </span></p>\n<pre><code>&amp;nbsp;\n</code></pre><p>预备的知识介绍完，下面就是具体实现了。</p>\n<p>一般方法是在一个类中实现<strong>IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo</strong>三个接口，然后通过IInternetSession接口的<span style=\"font-family:新宋体; font-size:10pt\">RegisterNameSpace方法</span>来注册这个自定义协议，用完这后再调用UnregisterNameSpace方法来注销这个自定义协议。</p>\n<p>关于IE和<strong>IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo</strong>三个接口的调用流程可以参考msdn上的介绍,中文版的翻译可以参考：</p>\n<p><a href=\"http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html</a></p>\n<pre><code>&amp;nbsp;\n</code></pre><p>首先通过CoInternetGetSession方法得到一个IInternetSession对象，然后注册自定义的协议：</p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:#2b91af\">IInternetSession</span> session;<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">CoInternetGetSession(0, <span style=\"color:blue\">out</span> session, 0);<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:#2b91af\">Guid</span> guid = <span style=\"color:blue\">new</span><br>                <span style=\"color:#2b91af\">Guid</span>(<span style=\"color:#a31515\">“79EAC9E4-BAF9-11CE-8C82-00AA004BA90B”</span>);<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">session.RegisterNameSpace(<span style=\"color:blue\">new</span><br>                <span style=\"color:#2b91af\">ClassFactory</span>(), <span style=\"color:blue\">ref</span> guid, ProcotolName, 0, <span style=\"color:blue\">null</span>, 0);<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">在注册的时候要传入一个实现了IClassFactory接口的对象，下面是对次接口的实现：<br>                </span></p>\n<p><span style=\"color:green; font-family:新宋体; font-size:10pt\">// Interface IClassFactory is here to provide a C# definition of the<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:green\">// COM IClassFactory interface.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">    [<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:#2b91af\">ComImport</span>, <span style=\"color:green\">// This interface originated from COM.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:#2b91af\">ComVisible</span>(<span style=\"color:blue\">true</span>), <span style=\"color:green\">// It is not hard to imagine that this interface must not be exposed to COM.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:#2b91af\">InterfaceType</span>(<span style=\"color:#2b91af\">ComInterfaceType</span>.InterfaceIsIUnknown), <span style=\"color:green\">// Indicate that this interface is not IDispatch-based.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:#2b91af\">Guid</span>(<span style=\"color:#a31515\">“00000001-0000-0000-C000-000000000046”</span>)  <span style=\"color:green\">// This GUID is the actual GUID of IClassFactory.<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">    ]<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">public</span><br>                <span style=\"color:blue\">interface</span><br>                <span style=\"color:#2b91af\">IClassFactory<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">    {<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">void</span> CreateInstance(<span style=\"color:#2b91af\">IntPtr</span> pUnkOuter, <span style=\"color:blue\">ref</span><br>                <span style=\"color:#2b91af\">Guid</span> riid, <span style=\"color:blue\">out</span><br>                <span style=\"color:#2b91af\">IntPtr</span> ppvObject);<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">}<br>                </span></p>\n<pre><code>&amp;nbsp;\n</code></pre><p><span style=\"font-family:新宋体; font-size:10pt\">[<span style=\"color:#2b91af\">ComVisible</span>(<span style=\"color:blue\">true</span>)]<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">public</span><br>                <span style=\"color:blue\">class</span><br>                <span style=\"color:#2b91af\">ClassFactory</span> : <span style=\"color:#2b91af\">IClassFactory<br>                </span></span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">    {<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><span style=\"color:blue\">        #region</span> IClassFactory Implementations<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\"><br>                <span style=\"color:blue\">public</span><br>                <span style=\"color:blue\">void</span> CreateInstance(<span style=\"color:#2b91af\">IntPtr</span> pUnkOuter, <span style=\"color:blue\">ref</span><br>                <span style=\"color:#2b91af\">Guid</span> riid, <span style=\"color:blue\">out</span><br>                <span style=\"color:#2b91af\">IntPtr</span> ppvObject)<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">        {<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">            ppvObject = <span style=\"color:#2b91af\">Marshal</span>.GetComInterfaceForObject(<span style=\"color:blue\">new</span><br>                <span style=\"color:#2b91af\">MyImageProtocol</span>(), <span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">IInternetProtocolInfo</span>));<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">        }<br>                </span></p>\n<p><span style=\"color:blue; font-family:新宋体; font-size:10pt\">        #endregion<br>                </span></p>\n<p><span style=\"font-family:新宋体; font-size:10pt\">}<br>                </span></p>\n<pre><code>&amp;nbsp;\n</code></pre><p>一下至于<strong>IInternetProtocol，IInternetProtocolRoot，IInternetProtocolInfo</strong>三个接口实现，大家可以参考上面提到的<a href=\"http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/volnet/archive/2008/03/28/About_Asynchronous_Pluggable_Protocols.html</a>这篇文章。不过要注意的就是这个实现的第二个协议似乎有bug，在实验一次后，可能将IE搞崩溃了，所以实验时要谨慎，不行就用regasm /u命令将dll注销了。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":0,"date":"2019-02-15T07:46:10.000Z","updated":"2019-02-15T07:46:10.000Z","_id":"cjsbx7yc40016y6zs3g17kisd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"QT中的View Model模型系列一","date":"2010-01-16T04:49:00.000Z","_content":"\n<span style=\"font-size: 12pt; \">本讲主要介绍一下QT中ViewModel的基本结构，以及简单的使用方法。对于View Model的概念这里就不累述了，简单的了解可以参考：</span>\n\n[<span style=\"font-size: 12pt; \">http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller</span>](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)\n\n<span style=\"font-size: 12pt; \">下面进入正文：</span>\n\n<span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Qt</span><span style=\"font-size: 12pt; \">中的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">主要有三种</span><span lang=\"EN-US\" style=\"font-family: Simsun, serif; color: black; font-size: 12pt; \">QListView</span><span style=\"font-size: 12pt; \">，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTreeView,\nQTabelView</span>\n\n<span style=\"font-size: 12pt; \">而对应的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">是：</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QStringListModel, </span><span lang=\"EN-US\" style=\"font-family: Simsun, serif; color: black; font-size: 12pt; \">QAbstractItemModel</span><span lang=\"EN-US\" style=\"font-size:10.0pt\"> </span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">,\nQStandardItemModel</span><span style=\"font-size: 12pt; \">。</span>\n\n<span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;<o:p></o:p></span>\n\n<span style=\"font-size: 12pt; \">基本的原理就是构造出</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">，和</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">然后通过</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">setModel</span><span style=\"font-size: 12pt; \">方法，将两者结合起来。<span lang=\"EN-US\"><o:p></o:p></span></span>\n\n<span style=\"font-size: 12pt; \">下面介绍每种</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View-Model</span><span style=\"font-size: 12pt; \">的使用：<span lang=\"EN-US\"><o:p></o:p></span></span>\n\n<span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;<o:p></o:p></span>\n\n_<span lang=\"EN-US\" style=\"font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;mso-bidi-font-family:\nCalibri\"><span style=\"mso-spacerun:yes\">&nbsp;</span></span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">**<u>QListView</u>**</span>_**_<u><span style=\"font-size: 12pt; \">与</span></u>_****_<u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QStringListModel</span></u>_**_<span lang=\"EN-US\" style=\"font-size:11.0pt\"><o:p></o:p></span>_\n\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><span class=\"Apple-style-span\" style=\"font-size: 16px;\"></span></font>\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('132f2318-0162-4e0f-8e29-23d64fd9c17a')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_132f2318-0162-4e0f-8e29-23d64fd9c17a\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringList</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QAbstractItemModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringListModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QListView</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQStringList&nbsp;numbers;\nnumbers&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bee</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\nQAbstractItemModel&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">model&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStringListModel(numbers);\n&nbsp;\nQListView&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">view&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListView;\nview</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">QListView&nbsp;&amp;&nbsp;Model</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nview</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);\n&nbsp;\nview</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}</span></div></div></div>\n\n&nbsp;\n</font>\n\n&nbsp;\n\n<span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;<o:p></o:p></span>\n\n**_<u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTableView </span></u>_****_<u><span style=\"font-size: 12pt; \">与</span></u>_****_<u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \"> QStandardItemModel</span></u>_****_<u><span lang=\"EN-US\" style=\"font-size:11.0pt\"><o:p></o:p></span></u>_**\n\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><span class=\"Apple-style-span\" style=\"font-size: 16px;\"></span></font>\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c7953d53-fd20-45b0-8524-21cb0aff2cde')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_c7953d53-fd20-45b0-8524-21cb0aff2cde\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStandardItemModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStandardItem</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTableView</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQStandardItemModel&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">model&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItemModel;\nmodel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">January</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nmodel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">February</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nmodel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">10,000</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nmodel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20,000</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n&nbsp;\nQTableView&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">view1&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableView;\nview1</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);\n&nbsp;\nQTableView&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">view2&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableView;\nview2</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);\n&nbsp;\nview1</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\nview2</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}</span></div></div></div>\n\n&nbsp;\n</font>\n\n&nbsp;\n\n<span class=\"Apple-style-span\" style=\"font-size: 13px; \">&nbsp;</span>\n\n<span style=\"font-size: 12pt; \">对于</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTreeView</span><span style=\"font-size: 12pt; \">一般来说需要重载</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QAbstractItemModel</span><span style=\"font-size: 12pt; \">来实现自己的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model，将在下一讲中介绍。</span>\n\n&nbsp;\n\n<span style=\"font-size: 12pt; \">对于简单的应用，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Qt</span><span style=\"font-size: 12pt; \">还提供了</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QListWidget, QTreeWidget, QTabelWidget </span><span style=\"font-size: 12pt; \">三个</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">widget</span><span style=\"font-size: 12pt; \">，分别继承自上面的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">3</span><span style=\"font-size: 12pt; \">个</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">。它们将</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">整合了，可以方便的使用。<span lang=\"EN-US\"><o:p></o:p></span></span>\n\n<span class=\"Apple-style-span\" style=\"font-size: 12pt; \">示例程序：</span>&nbsp;\n\n**_<u>&nbsp;QListWidget</u>_**\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('6c15dc67-24bc-4277-a5f2-11e6fcaa2873')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_6c15dc67-24bc-4277-a5f2-11e6fcaa2873\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QHBoxLayout</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QLabel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QListWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQWidget&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">window&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QWidget;\nwindow</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">QListWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n&nbsp;\nQLabel&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">label&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QLabel;\nlabel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setFixedWidth&nbsp;(</span><span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);\n&nbsp;\nQListWidget&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">listWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidget;\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bee_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bee</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">cat_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">cat</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n&nbsp;\nQObject::connect(listWidget,&nbsp;SIGNAL(currentTextChanged&nbsp;(</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QString&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">)),\nlabel,&nbsp;SLOT(setText(</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QString&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">)));\n&nbsp;\nQHBoxLayout&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">layout&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QHBoxLayout;\nlayout</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addWidget(label);\nlayout</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addWidget(listWidget);\n&nbsp;\nwindow</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setLayout(layout);&nbsp;\nwindow</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}\n</span></div></div></div>\n\n&nbsp;\n\n&nbsp;\n\n**_<u>QTreeWidget</u>_**\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9619e79e-be50-41c8-b96b-3f9365b98909')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_9619e79e-be50-41c8-b96b-3f9365b98909\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTreeWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTreeWidgetItem</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringList</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QFile</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QFileInfo</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QDir</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\">&nbsp;listFile(QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">,&nbsp;QFileInfo&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">);\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQTreeWidget&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">treeWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidget;\ntreeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">QTreeWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ntreeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">resize(</span><span style=\"color: #800080;\">400</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">250</span><span style=\"color: #000000;\">);\n&nbsp;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;設定欄位名稱&nbsp;</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">QStringList&nbsp;columnTitle;\ncolumnTitle.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ncolumnTitle.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Size</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ntreeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setHeaderLabels(columnTitle);\n&nbsp;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢的目錄&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">QFileInfo&nbsp;fileInfo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">D:\\\\Temp</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nQStringList&nbsp;fileColumn;\nfileColumn.append(fileInfo.fileName());\n&nbsp;\nQTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">dir&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);\ndir</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\ndir</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);&nbsp;</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;設定可核取的方塊&nbsp;</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addTopLevelItem(dir);\n&nbsp;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢目錄&nbsp;</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">listFile(dir,&nbsp;fileInfo);\n&nbsp;\ntreeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}\n&nbsp;\n</span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\">&nbsp;listFile(QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">parentWidgetItem,&nbsp;QFileInfo&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">parent)&nbsp;{\nQDir&nbsp;dir;\ndir.setPath(parent.filePath());\ndir.setFilter(QDir::Files&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::Dirs&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::NoSymLinks);\ndir.setSorting(QDir::DirsFirst&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::Name);&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;\n</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QFileInfoList&nbsp;fileList&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;dir.entryInfoList();\n&nbsp;\n</span><span style=\"color: #0000FF;\">for</span><span style=\"color: #000000;\">&nbsp;(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;i&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;&nbsp;i&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">&nbsp;fileList.size();&nbsp;i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">)&nbsp;{\nQFileInfo&nbsp;fileInfo&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;fileList.at(i);\nQStringList&nbsp;fileColumn;\nfileColumn.append(fileInfo.fileName());\n</span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">&nbsp;(fileInfo.fileName()&nbsp;</span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">||</span><span style=\"color: #000000;\">&nbsp;fileInfo.fileName()&nbsp;</span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">..</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;);&nbsp;</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;nothing</span><span style=\"color: #008000;\">\n</span><span style=\"color: #0000FF;\">else</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(fileInfo.isDir())&nbsp;{\nQTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">child&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);\nchild</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nchild</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);\nparentWidgetItem</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addChild(child);\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢子目錄</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">listFile(child,&nbsp;fileInfo);\n}\n</span><span style=\"color: #0000FF;\">else</span><span style=\"color: #000000;\">&nbsp;{\nfileColumn.append(QString::number(fileInfo.size()));\nQTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">child&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);\nchild</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nchild</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nparentWidgetItem</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addChild(child);\n}\n}&nbsp;&nbsp;&nbsp;&nbsp;\n}\n</span></div></div></div>\n\n&nbsp;\n\n&nbsp;\n\n**_<u>QTableWidget&nbsp;</u>_**\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5a602ea6-0fc3-4f76-a521-b19aba50a988')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_5a602ea6-0fc3-4f76-a521-b19aba50a988\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTableWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QHBoxLayout</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQTableWidget&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">tableWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidget;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">QTableWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">resize(</span><span style=\"color: #800080;\">350</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">200</span><span style=\"color: #000000;\">);\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setRowCount(</span><span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">);\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setColumnCount(</span><span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\n&nbsp;\nQStringList&nbsp;header;\nheader.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Month</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nheader.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Description</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setHorizontalHeaderLabels(header);\n&nbsp;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">January</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">February</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">March</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n&nbsp;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;\n</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar's&nbsp;month</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;\n</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor's&nbsp;month</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;\n</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush's&nbsp;month</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}\n</span></div></div></div>\n\n&nbsp;\n\n&nbsp;","source":"_drafts/QT中的View-Model模型系列一.md","raw":"---\ntitle: QT中的View Model模型系列一\ntags: []\ndate: 2010-01-16 12:49:00\n---\n\n<span style=\"font-size: 12pt; \">本讲主要介绍一下QT中ViewModel的基本结构，以及简单的使用方法。对于View Model的概念这里就不累述了，简单的了解可以参考：</span>\n\n[<span style=\"font-size: 12pt; \">http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller</span>](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)\n\n<span style=\"font-size: 12pt; \">下面进入正文：</span>\n\n<span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Qt</span><span style=\"font-size: 12pt; \">中的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">主要有三种</span><span lang=\"EN-US\" style=\"font-family: Simsun, serif; color: black; font-size: 12pt; \">QListView</span><span style=\"font-size: 12pt; \">，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTreeView,\nQTabelView</span>\n\n<span style=\"font-size: 12pt; \">而对应的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">是：</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QStringListModel, </span><span lang=\"EN-US\" style=\"font-family: Simsun, serif; color: black; font-size: 12pt; \">QAbstractItemModel</span><span lang=\"EN-US\" style=\"font-size:10.0pt\"> </span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">,\nQStandardItemModel</span><span style=\"font-size: 12pt; \">。</span>\n\n<span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;<o:p></o:p></span>\n\n<span style=\"font-size: 12pt; \">基本的原理就是构造出</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">，和</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">然后通过</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">setModel</span><span style=\"font-size: 12pt; \">方法，将两者结合起来。<span lang=\"EN-US\"><o:p></o:p></span></span>\n\n<span style=\"font-size: 12pt; \">下面介绍每种</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View-Model</span><span style=\"font-size: 12pt; \">的使用：<span lang=\"EN-US\"><o:p></o:p></span></span>\n\n<span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;<o:p></o:p></span>\n\n_<span lang=\"EN-US\" style=\"font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;mso-bidi-font-family:\nCalibri\"><span style=\"mso-spacerun:yes\">&nbsp;</span></span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">**<u>QListView</u>**</span>_**_<u><span style=\"font-size: 12pt; \">与</span></u>_****_<u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QStringListModel</span></u>_**_<span lang=\"EN-US\" style=\"font-size:11.0pt\"><o:p></o:p></span>_\n\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><span class=\"Apple-style-span\" style=\"font-size: 16px;\"></span></font>\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('132f2318-0162-4e0f-8e29-23d64fd9c17a')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_132f2318-0162-4e0f-8e29-23d64fd9c17a\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringList</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QAbstractItemModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringListModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QListView</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQStringList&nbsp;numbers;\nnumbers&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bee</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\nQAbstractItemModel&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">model&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStringListModel(numbers);\n&nbsp;\nQListView&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">view&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListView;\nview</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">QListView&nbsp;&amp;&nbsp;Model</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nview</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);\n&nbsp;\nview</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}</span></div></div></div>\n\n&nbsp;\n</font>\n\n&nbsp;\n\n<span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;<o:p></o:p></span>\n\n**_<u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTableView </span></u>_****_<u><span style=\"font-size: 12pt; \">与</span></u>_****_<u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \"> QStandardItemModel</span></u>_****_<u><span lang=\"EN-US\" style=\"font-size:11.0pt\"><o:p></o:p></span></u>_**\n\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><span class=\"Apple-style-span\" style=\"font-size: 16px;\"></span></font>\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c7953d53-fd20-45b0-8524-21cb0aff2cde')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_c7953d53-fd20-45b0-8524-21cb0aff2cde\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStandardItemModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStandardItem</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTableView</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQStandardItemModel&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">model&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItemModel;\nmodel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">January</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nmodel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">February</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nmodel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">10,000</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nmodel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">20,000</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n&nbsp;\nQTableView&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">view1&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableView;\nview1</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);\n&nbsp;\nQTableView&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">view2&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableView;\nview2</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);\n&nbsp;\nview1</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\nview2</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}</span></div></div></div>\n\n&nbsp;\n</font>\n\n&nbsp;\n\n<span class=\"Apple-style-span\" style=\"font-size: 13px; \">&nbsp;</span>\n\n<span style=\"font-size: 12pt; \">对于</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTreeView</span><span style=\"font-size: 12pt; \">一般来说需要重载</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QAbstractItemModel</span><span style=\"font-size: 12pt; \">来实现自己的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model，将在下一讲中介绍。</span>\n\n&nbsp;\n\n<span style=\"font-size: 12pt; \">对于简单的应用，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Qt</span><span style=\"font-size: 12pt; \">还提供了</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QListWidget, QTreeWidget, QTabelWidget </span><span style=\"font-size: 12pt; \">三个</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">widget</span><span style=\"font-size: 12pt; \">，分别继承自上面的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">3</span><span style=\"font-size: 12pt; \">个</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">。它们将</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">整合了，可以方便的使用。<span lang=\"EN-US\"><o:p></o:p></span></span>\n\n<span class=\"Apple-style-span\" style=\"font-size: 12pt; \">示例程序：</span>&nbsp;\n\n**_<u>&nbsp;QListWidget</u>_**\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('6c15dc67-24bc-4277-a5f2-11e6fcaa2873')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_6c15dc67-24bc-4277-a5f2-11e6fcaa2873\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QHBoxLayout</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QLabel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QListWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQWidget&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">window&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QWidget;\nwindow</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">QListWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n&nbsp;\nQLabel&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">label&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QLabel;\nlabel</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setFixedWidth&nbsp;(</span><span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);\n&nbsp;\nQListWidget&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">listWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidget;\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bee_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bee</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nlistWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(\nQIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">cat_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">cat</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n&nbsp;\nQObject::connect(listWidget,&nbsp;SIGNAL(currentTextChanged&nbsp;(</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QString&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">)),\nlabel,&nbsp;SLOT(setText(</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QString&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">)));\n&nbsp;\nQHBoxLayout&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">layout&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QHBoxLayout;\nlayout</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addWidget(label);\nlayout</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addWidget(listWidget);\n&nbsp;\nwindow</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setLayout(layout);&nbsp;\nwindow</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}\n</span></div></div></div>\n\n&nbsp;\n\n&nbsp;\n\n**_<u>QTreeWidget</u>_**\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9619e79e-be50-41c8-b96b-3f9365b98909')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_9619e79e-be50-41c8-b96b-3f9365b98909\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTreeWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTreeWidgetItem</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringList</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QFile</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QFileInfo</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QDir</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\">&nbsp;listFile(QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">,&nbsp;QFileInfo&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">);\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQTreeWidget&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">treeWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidget;\ntreeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">QTreeWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ntreeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">resize(</span><span style=\"color: #800080;\">400</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">250</span><span style=\"color: #000000;\">);\n&nbsp;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;設定欄位名稱&nbsp;</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">QStringList&nbsp;columnTitle;\ncolumnTitle.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ncolumnTitle.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Size</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ntreeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setHeaderLabels(columnTitle);\n&nbsp;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢的目錄&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">QFileInfo&nbsp;fileInfo(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">D:\\\\Temp</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nQStringList&nbsp;fileColumn;\nfileColumn.append(fileInfo.fileName());\n&nbsp;\nQTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">dir&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);\ndir</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\ndir</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);&nbsp;</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;設定可核取的方塊&nbsp;</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addTopLevelItem(dir);\n&nbsp;\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢目錄&nbsp;</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">listFile(dir,&nbsp;fileInfo);\n&nbsp;\ntreeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}\n&nbsp;\n</span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\">&nbsp;listFile(QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">parentWidgetItem,&nbsp;QFileInfo&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">parent)&nbsp;{\nQDir&nbsp;dir;\ndir.setPath(parent.filePath());\ndir.setFilter(QDir::Files&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::Dirs&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::NoSymLinks);\ndir.setSorting(QDir::DirsFirst&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::Name);&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;\n</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QFileInfoList&nbsp;fileList&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;dir.entryInfoList();\n&nbsp;\n</span><span style=\"color: #0000FF;\">for</span><span style=\"color: #000000;\">&nbsp;(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;i&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;&nbsp;i&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">&nbsp;fileList.size();&nbsp;i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">)&nbsp;{\nQFileInfo&nbsp;fileInfo&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;fileList.at(i);\nQStringList&nbsp;fileColumn;\nfileColumn.append(fileInfo.fileName());\n</span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">&nbsp;(fileInfo.fileName()&nbsp;</span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">||</span><span style=\"color: #000000;\">&nbsp;fileInfo.fileName()&nbsp;</span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">..</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&nbsp;);&nbsp;</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;nothing</span><span style=\"color: #008000;\">\n</span><span style=\"color: #0000FF;\">else</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(fileInfo.isDir())&nbsp;{\nQTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">child&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);\nchild</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nchild</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);\nparentWidgetItem</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addChild(child);\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢子目錄</span><span style=\"color: #008000;\">\n</span><span style=\"color: #000000;\">listFile(child,&nbsp;fileInfo);\n}\n</span><span style=\"color: #0000FF;\">else</span><span style=\"color: #000000;\">&nbsp;{\nfileColumn.append(QString::number(fileInfo.size()));\nQTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">child&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);\nchild</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\nchild</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nparentWidgetItem</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addChild(child);\n}\n}&nbsp;&nbsp;&nbsp;&nbsp;\n}\n</span></div></div></div>\n\n&nbsp;\n\n&nbsp;\n\n**_<u>QTableWidget&nbsp;</u>_**\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5a602ea6-0fc3-4f76-a521-b19aba50a988')\">![](http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif)![](http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif)<span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_5a602ea6-0fc3-4f76-a521-b19aba50a988\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTableWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QHBoxLayout</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\n&nbsp;\n</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">argv[])&nbsp;{\nQApplication&nbsp;app(argc,&nbsp;argv);\n&nbsp;\nQTableWidget&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">tableWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidget;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">QTableWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">resize(</span><span style=\"color: #800080;\">350</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">200</span><span style=\"color: #000000;\">);\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setRowCount(</span><span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">);\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setColumnCount(</span><span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);\n&nbsp;\nQStringList&nbsp;header;\nheader.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Month</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\nheader.append(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Description</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setHorizontalHeaderLabels(header);\n&nbsp;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">January</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">February</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">March</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\n&nbsp;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;\n</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">caterpillar's&nbsp;month</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;\n</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">momor's&nbsp;month</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;\n</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush_head.jpg</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">bush's&nbsp;month</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;\ntableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();\n&nbsp;\n</span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();\n}\n</span></div></div></div>\n\n&nbsp;\n\n&nbsp;","slug":"QT中的View-Model模型系列一","published":0,"updated":"2019-02-16T13:03:17.000Z","_id":"cjsbx7ycd001by6zs2ytydcw6","comments":1,"layout":"post","photos":[],"link":"","content":"<p><span style=\"font-size: 12pt; \">本讲主要介绍一下QT中ViewModel的基本结构，以及简单的使用方法。对于View Model的概念这里就不累述了，简单的了解可以参考：</span></p>\n<p><a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener\"><span style=\"font-size: 12pt; \">http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller</span></a></p>\n<p><span style=\"font-size: 12pt; \">下面进入正文：</span></p>\n<p><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Qt</span><span style=\"font-size: 12pt; \">中的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">主要有三种</span><span lang=\"EN-US\" style=\"font-family: Simsun, serif; color: black; font-size: 12pt; \">QListView</span><span style=\"font-size: 12pt; \">，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTreeView,<br>QTabelView</span></p>\n<p><span style=\"font-size: 12pt; \">而对应的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">是：</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QStringListModel, </span><span lang=\"EN-US\" style=\"font-family: Simsun, serif; color: black; font-size: 12pt; \">QAbstractItemModel</span><span lang=\"EN-US\" style=\"font-size:10.0pt\"> </span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">,<br>QStandardItemModel</span><span style=\"font-size: 12pt; \">。</span></p>\n<p><span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;&lt;o:p&gt;&lt;/o:p&gt;</span></p>\n<p><span style=\"font-size: 12pt; \">基本的原理就是构造出</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">，和</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">然后通过</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">setModel</span><span style=\"font-size: 12pt; \">方法，将两者结合起来。<span lang=\"EN-US\">&lt;o:p&gt;&lt;/o:p&gt;</span></span></p>\n<p><span style=\"font-size: 12pt; \">下面介绍每种</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View-Model</span><span style=\"font-size: 12pt; \">的使用：<span lang=\"EN-US\">&lt;o:p&gt;&lt;/o:p&gt;</span></span></p>\n<p><span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;&lt;o:p&gt;&lt;/o:p&gt;</span></p>\n<p><em><span lang=\"EN-US\" style=\"font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;mso-bidi-font-family:\nCalibri\"><span style=\"mso-spacerun:yes\">&nbsp;</span></span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \"><strong><u>QListView</u></strong></span></em><strong><em><u><span style=\"font-size: 12pt; \">与</span></u></em>**</strong><em><u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QStringListModel</span></u></em>**<em><span lang=\"EN-US\" style=\"font-size:11.0pt\">&lt;o:p&gt;&lt;/o:p&gt;</span></em></p>\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><span class=\"Apple-style-span\" style=\"font-size: 16px;\"></span></font><br><font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('132f2318-0162-4e0f-8e29-23d64fd9c17a')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_132f2318-0162-4e0f-8e29-23d64fd9c17a\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringList</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QAbstractItemModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringListModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QListView</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QStringList&nbsp;numbers;<br>numbers&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bee</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">;<br>QAbstractItemModel&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">model&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStringListModel(numbers);<br>&nbsp;<br>QListView&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">view&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListView;<br>view</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">QListView&nbsp;&amp;&nbsp;Model</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>view</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);<br>&nbsp;<br>view</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}</span></div></div></div><br><br>&nbsp;<br></font>\n\n<p>&nbsp;</p>\n<p><span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;&lt;o:p&gt;&lt;/o:p&gt;</span></p>\n<p><strong><em><u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTableView </span></u></em>**</strong><em><u><span style=\"font-size: 12pt; \">与</span></u></em><strong><strong><em><u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \"> QStandardItemModel</span></u></em></strong></strong><em><u><span lang=\"EN-US\" style=\"font-size:11.0pt\">&lt;o:p&gt;&lt;/o:p&gt;</span></u></em>**</p>\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><span class=\"Apple-style-span\" style=\"font-size: 16px;\"></span></font><br><font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c7953d53-fd20-45b0-8524-21cb0aff2cde')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_c7953d53-fd20-45b0-8524-21cb0aff2cde\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStandardItemModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStandardItem</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTableView</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QStandardItemModel&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">model&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItemModel;<br>model</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">January</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>model</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">February</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>model</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">10,000</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>model</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">20,000</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>&nbsp;<br>QTableView&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">view1&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableView;<br>view1</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);<br>&nbsp;<br>QTableView&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">view2&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableView;<br>view2</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);<br>&nbsp;<br>view1</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>view2</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}</span></div></div></div><br><br>&nbsp;<br></font>\n\n<p>&nbsp;</p>\n<p><span class=\"Apple-style-span\" style=\"font-size: 13px; \">&nbsp;</span></p>\n<p><span style=\"font-size: 12pt; \">对于</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTreeView</span><span style=\"font-size: 12pt; \">一般来说需要重载</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QAbstractItemModel</span><span style=\"font-size: 12pt; \">来实现自己的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model，将在下一讲中介绍。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 12pt; \">对于简单的应用，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Qt</span><span style=\"font-size: 12pt; \">还提供了</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QListWidget, QTreeWidget, QTabelWidget </span><span style=\"font-size: 12pt; \">三个</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">widget</span><span style=\"font-size: 12pt; \">，分别继承自上面的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">3</span><span style=\"font-size: 12pt; \">个</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">。它们将</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">整合了，可以方便的使用。<span lang=\"EN-US\">&lt;o:p&gt;&lt;/o:p&gt;</span></span></p>\n<p><span class=\"Apple-style-span\" style=\"font-size: 12pt; \">示例程序：</span>&nbsp;</p>\n<p><strong><em><u>&nbsp;QListWidget</u></em></strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('6c15dc67-24bc-4277-a5f2-11e6fcaa2873')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_6c15dc67-24bc-4277-a5f2-11e6fcaa2873\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QHBoxLayout</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QLabel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QListWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QWidget&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">window&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QWidget;<br>window</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">QListWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>&nbsp;<br>QLabel&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">label&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QLabel;<br>label</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setFixedWidth&nbsp;(</span><span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);<br>&nbsp;<br>QListWidget&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">listWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidget;<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bee_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bee</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">cat_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">cat</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>&nbsp;<br>QObject::connect(listWidget,&nbsp;SIGNAL(currentTextChanged&nbsp;(</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QString&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">)),<br>label,&nbsp;SLOT(setText(</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QString&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">)));<br>&nbsp;<br>QHBoxLayout&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">layout&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QHBoxLayout;<br>layout</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addWidget(label);<br>layout</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addWidget(listWidget);<br>&nbsp;<br>window</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setLayout(layout);&nbsp;<br>window</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}<br></span></div></div></div>\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong><em><u>QTreeWidget</u></em></strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9619e79e-be50-41c8-b96b-3f9365b98909')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_9619e79e-be50-41c8-b96b-3f9365b98909\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTreeWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTreeWidgetItem</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringList</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QFile</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QFileInfo</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QDir</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\">&nbsp;listFile(QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">,&nbsp;QFileInfo&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">);<br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QTreeWidget&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">treeWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidget;<br>treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">QTreeWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">resize(</span><span style=\"color: #800080;\">400</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">250</span><span style=\"color: #000000;\">);<br>&nbsp;<br></span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;設定欄位名稱&nbsp;</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">QStringList&nbsp;columnTitle;<br>columnTitle.append(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>columnTitle.append(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">Size</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setHeaderLabels(columnTitle);<br>&nbsp;<br></span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢的目錄&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">QFileInfo&nbsp;fileInfo(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">D:\\Temp</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>QStringList&nbsp;fileColumn;<br>fileColumn.append(fileInfo.fileName());<br>&nbsp;<br>QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">dir&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);<br>dir</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>dir</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);&nbsp;</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;設定可核取的方塊&nbsp;</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addTopLevelItem(dir);<br>&nbsp;<br></span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢目錄&nbsp;</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">listFile(dir,&nbsp;fileInfo);<br>&nbsp;<br>treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}<br>&nbsp;<br></span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\">&nbsp;listFile(QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">parentWidgetItem,&nbsp;QFileInfo&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">parent)&nbsp;{<br>QDir&nbsp;dir;<br>dir.setPath(parent.filePath());<br>dir.setFilter(QDir::Files&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::Dirs&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::NoSymLinks);<br>dir.setSorting(QDir::DirsFirst&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::Name);&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;<br></span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QFileInfoList&nbsp;fileList&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;dir.entryInfoList();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">for</span><span style=\"color: #000000;\">&nbsp;(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;i&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;&nbsp;i&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">&nbsp;fileList.size();&nbsp;i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">)&nbsp;{<br>QFileInfo&nbsp;fileInfo&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;fileList.at(i);<br>QStringList&nbsp;fileColumn;<br>fileColumn.append(fileInfo.fileName());<br></span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">&nbsp;(fileInfo.fileName()&nbsp;</span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">||</span><span style=\"color: #000000;\">&nbsp;fileInfo.fileName()&nbsp;</span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">..</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;);&nbsp;</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;nothing</span><span style=\"color: #008000;\"><br></span><span style=\"color: #0000FF;\">else</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(fileInfo.isDir())&nbsp;{<br>QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">child&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);<br>child</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>child</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);<br>parentWidgetItem</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addChild(child);<br></span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢子目錄</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">listFile(child,&nbsp;fileInfo);<br>}<br></span><span style=\"color: #0000FF;\">else</span><span style=\"color: #000000;\">&nbsp;{<br>fileColumn.append(QString::number(fileInfo.size()));<br>QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">child&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);<br>child</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>child</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>parentWidgetItem</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addChild(child);<br>}<br>}&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br></span></div></div></div>\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong><em><u>QTableWidget&nbsp;</u></em></strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5a602ea6-0fc3-4f76-a521-b19aba50a988')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_5a602ea6-0fc3-4f76-a521-b19aba50a988\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTableWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QHBoxLayout</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QTableWidget&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">tableWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidget;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">QTableWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">resize(</span><span style=\"color: #800080;\">350</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">200</span><span style=\"color: #000000;\">);<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setRowCount(</span><span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">);<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setColumnCount(</span><span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);<br>&nbsp;<br>QStringList&nbsp;header;<br>header.append(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">Month</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>header.append(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">Description</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setHorizontalHeaderLabels(header);<br>&nbsp;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">January</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">February</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">March</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>&nbsp;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;<br></span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar’s&nbsp;month</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;<br></span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor’s&nbsp;month</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;<br></span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush’s&nbsp;month</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}<br></span></div></div></div>\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p><span style=\"font-size: 12pt; \">本讲主要介绍一下QT中ViewModel的基本结构，以及简单的使用方法。对于View Model的概念这里就不累述了，简单的了解可以参考：</span></p>\n<p><a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" target=\"_blank\" rel=\"noopener\"><span style=\"font-size: 12pt; \">http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller</span></a></p>\n<p><span style=\"font-size: 12pt; \">下面进入正文：</span></p>\n<p><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Qt</span><span style=\"font-size: 12pt; \">中的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">主要有三种</span><span lang=\"EN-US\" style=\"font-family: Simsun, serif; color: black; font-size: 12pt; \">QListView</span><span style=\"font-size: 12pt; \">，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTreeView,<br>QTabelView</span></p>\n<p><span style=\"font-size: 12pt; \">而对应的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">是：</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QStringListModel, </span><span lang=\"EN-US\" style=\"font-family: Simsun, serif; color: black; font-size: 12pt; \">QAbstractItemModel</span><span lang=\"EN-US\" style=\"font-size:10.0pt\"> </span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">,<br>QStandardItemModel</span><span style=\"font-size: 12pt; \">。</span></p>\n<p><span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;&lt;o:p&gt;&lt;/o:p&gt;</span></p>\n<p><span style=\"font-size: 12pt; \">基本的原理就是构造出</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">，和</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">然后通过</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">setModel</span><span style=\"font-size: 12pt; \">方法，将两者结合起来。<span lang=\"EN-US\">&lt;o:p&gt;&lt;/o:p&gt;</span></span></p>\n<p><span style=\"font-size: 12pt; \">下面介绍每种</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View-Model</span><span style=\"font-size: 12pt; \">的使用：<span lang=\"EN-US\">&lt;o:p&gt;&lt;/o:p&gt;</span></span></p>\n<p><span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;&lt;o:p&gt;&lt;/o:p&gt;</span></p>\n<p><em><span lang=\"EN-US\" style=\"font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;mso-bidi-font-family:\nCalibri\"><span style=\"mso-spacerun:yes\">&nbsp;</span></span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \"><strong><u>QListView</u></strong></span></em><strong><em><u><span style=\"font-size: 12pt; \">与</span></u></em>**</strong><em><u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QStringListModel</span></u></em>**<em><span lang=\"EN-US\" style=\"font-size:11.0pt\">&lt;o:p&gt;&lt;/o:p&gt;</span></em></p>\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><span class=\"Apple-style-span\" style=\"font-size: 16px;\"></span></font><br><font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('132f2318-0162-4e0f-8e29-23d64fd9c17a')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_132f2318-0162-4e0f-8e29-23d64fd9c17a\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringList</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QAbstractItemModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringListModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QListView</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QStringList&nbsp;numbers;<br>numbers&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bee</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">;<br>QAbstractItemModel&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">model&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStringListModel(numbers);<br>&nbsp;<br>QListView&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">view&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListView;<br>view</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">QListView&nbsp;&amp;&nbsp;Model</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>view</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);<br>&nbsp;<br>view</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}</span></div></div></div><br><br>&nbsp;<br></font>\n\n<p>&nbsp;</p>\n<p><span lang=\"EN-US\" style=\"font-size:10.0pt\">&nbsp;&lt;o:p&gt;&lt;/o:p&gt;</span></p>\n<p><strong><em><u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTableView </span></u></em>**</strong><em><u><span style=\"font-size: 12pt; \">与</span></u></em><strong><strong><em><u><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \"> QStandardItemModel</span></u></em></strong></strong><em><u><span lang=\"EN-US\" style=\"font-size:11.0pt\">&lt;o:p&gt;&lt;/o:p&gt;</span></u></em>**</p>\n<font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><span class=\"Apple-style-span\" style=\"font-size: 16px;\"></span></font><br><font class=\"Apple-style-span\" color=\"#333333\" face=\"'Courier New'\" size=\"4\"><div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c7953d53-fd20-45b0-8524-21cb0aff2cde')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_c7953d53-fd20-45b0-8524-21cb0aff2cde\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStandardItemModel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStandardItem</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTableView</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QStandardItemModel&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">model&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItemModel;<br>model</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">January</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>model</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">February</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>model</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">10,000</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>model</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QStandardItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">20,000</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>&nbsp;<br>QTableView&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">view1&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableView;<br>view1</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);<br>&nbsp;<br>QTableView&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">view2&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableView;<br>view2</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setModel(model);<br>&nbsp;<br>view1</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>view2</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}</span></div></div></div><br><br>&nbsp;<br></font>\n\n<p>&nbsp;</p>\n<p><span class=\"Apple-style-span\" style=\"font-size: 13px; \">&nbsp;</span></p>\n<p><span style=\"font-size: 12pt; \">对于</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QTreeView</span><span style=\"font-size: 12pt; \">一般来说需要重载</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QAbstractItemModel</span><span style=\"font-size: 12pt; \">来实现自己的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model，将在下一讲中介绍。</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 12pt; \">对于简单的应用，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Qt</span><span style=\"font-size: 12pt; \">还提供了</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">QListWidget, QTreeWidget, QTabelWidget </span><span style=\"font-size: 12pt; \">三个</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">widget</span><span style=\"font-size: 12pt; \">，分别继承自上面的</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">3</span><span style=\"font-size: 12pt; \">个</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">。它们将</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">View</span><span style=\"font-size: 12pt; \">，</span><span lang=\"EN-US\" style=\"font-family: Calibri, sans-serif; font-size: 12pt; \">Model</span><span style=\"font-size: 12pt; \">整合了，可以方便的使用。<span lang=\"EN-US\">&lt;o:p&gt;&lt;/o:p&gt;</span></span></p>\n<p><span class=\"Apple-style-span\" style=\"font-size: 12pt; \">示例程序：</span>&nbsp;</p>\n<p><strong><em><u>&nbsp;QListWidget</u></em></strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('6c15dc67-24bc-4277-a5f2-11e6fcaa2873')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_6c15dc67-24bc-4277-a5f2-11e6fcaa2873\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QHBoxLayout</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QLabel</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QListWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QWidget&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">window&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QWidget;<br>window</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">QListWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>&nbsp;<br>QLabel&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">label&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QLabel;<br>label</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setFixedWidth&nbsp;(</span><span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);<br>&nbsp;<br>QListWidget&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">listWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidget;<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bee_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bee</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>listWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">insertItem(</span><span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QListWidgetItem(<br>QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">cat_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">cat</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>&nbsp;<br>QObject::connect(listWidget,&nbsp;SIGNAL(currentTextChanged&nbsp;(</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QString&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">)),<br>label,&nbsp;SLOT(setText(</span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QString&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">)));<br>&nbsp;<br>QHBoxLayout&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">layout&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QHBoxLayout;<br>layout</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addWidget(label);<br>layout</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addWidget(listWidget);<br>&nbsp;<br>window</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setLayout(layout);&nbsp;<br>window</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}<br></span></div></div></div>\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong><em><u>QTreeWidget</u></em></strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9619e79e-be50-41c8-b96b-3f9365b98909')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_9619e79e-be50-41c8-b96b-3f9365b98909\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTreeWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTreeWidgetItem</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QStringList</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QFile</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QFileInfo</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QDir</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\">&nbsp;listFile(QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">,&nbsp;QFileInfo&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">);<br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QTreeWidget&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">treeWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidget;<br>treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">QTreeWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">resize(</span><span style=\"color: #800080;\">400</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">250</span><span style=\"color: #000000;\">);<br>&nbsp;<br></span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;設定欄位名稱&nbsp;</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">QStringList&nbsp;columnTitle;<br>columnTitle.append(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>columnTitle.append(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">Size</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setHeaderLabels(columnTitle);<br>&nbsp;<br></span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢的目錄&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">QFileInfo&nbsp;fileInfo(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">D:\\Temp</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>QStringList&nbsp;fileColumn;<br>fileColumn.append(fileInfo.fileName());<br>&nbsp;<br>QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">dir&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);<br>dir</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>dir</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);&nbsp;</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;設定可核取的方塊&nbsp;</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addTopLevelItem(dir);<br>&nbsp;<br></span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢目錄&nbsp;</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">listFile(dir,&nbsp;fileInfo);<br>&nbsp;<br>treeWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}<br>&nbsp;<br></span><span style=\"color: #0000FF;\">void</span><span style=\"color: #000000;\">&nbsp;listFile(QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">parentWidgetItem,&nbsp;QFileInfo&nbsp;</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">parent)&nbsp;{<br>QDir&nbsp;dir;<br>dir.setPath(parent.filePath());<br>dir.setFilter(QDir::Files&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::Dirs&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::NoSymLinks);<br>dir.setSorting(QDir::DirsFirst&nbsp;</span><span style=\"color: #000000;\">|</span><span style=\"color: #000000;\">&nbsp;QDir::Name);&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;<br></span><span style=\"color: #0000FF;\">const</span><span style=\"color: #000000;\">&nbsp;QFileInfoList&nbsp;fileList&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;dir.entryInfoList();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">for</span><span style=\"color: #000000;\">&nbsp;(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;i&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;&nbsp;i&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">&nbsp;fileList.size();&nbsp;i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">)&nbsp;{<br>QFileInfo&nbsp;fileInfo&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;fileList.at(i);<br>QStringList&nbsp;fileColumn;<br>fileColumn.append(fileInfo.fileName());<br></span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">&nbsp;(fileInfo.fileName()&nbsp;</span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">||</span><span style=\"color: #000000;\">&nbsp;fileInfo.fileName()&nbsp;</span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">..</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">&nbsp;);&nbsp;</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;nothing</span><span style=\"color: #008000;\"><br></span><span style=\"color: #0000FF;\">else</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">if</span><span style=\"color: #000000;\">(fileInfo.isDir())&nbsp;{<br>QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">child&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);<br>child</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>child</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);<br>parentWidgetItem</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addChild(child);<br></span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">&nbsp;查詢子目錄</span><span style=\"color: #008000;\"><br></span><span style=\"color: #000000;\">listFile(child,&nbsp;fileInfo);<br>}<br></span><span style=\"color: #0000FF;\">else</span><span style=\"color: #000000;\">&nbsp;{<br>fileColumn.append(QString::number(fileInfo.size()));<br>QTreeWidgetItem&nbsp;</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">child&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTreeWidgetItem(fileColumn);<br>child</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setIcon(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>child</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setCheckState(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;Qt::Checked);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>parentWidgetItem</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">addChild(child);<br>}<br>}&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br></span></div></div></div>\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><strong><em><u>QTableWidget&nbsp;</u></em></strong></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5a602ea6-0fc3-4f76-a521-b19aba50a988')\"><img src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt><img src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt><span class=\"cnblogs_code_collapse\">代码</span><div id=\"cnblogs_code_open_5a602ea6-0fc3-4f76-a521-b19aba50a988\" class=\"cnblogs_code_hide\"><div><!--\n\nCode highlighting produced by Actipro CodeHighlighter (freeware)\nhttp://www.CodeHighlighter.com/\n\n--><span style=\"color: #000000;\">#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QApplication</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QTableWidget</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>#include&nbsp;</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">QHBoxLayout</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"><br>&nbsp;<br></span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;main(</span><span style=\"color: #0000FF;\">int</span><span style=\"color: #000000;\">&nbsp;argc,&nbsp;</span><span style=\"color: #0000FF;\">char</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\"><em></em></span><span style=\"color: #000000;\">argv[])&nbsp;{<br>QApplication&nbsp;app(argc,&nbsp;argv);<br>&nbsp;<br>QTableWidget&nbsp;</span><span style=\"color: #000000;\"></span><span style=\"color: #000000;\">tableWidget&nbsp;</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidget;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setWindowTitle(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">QTableWidget&nbsp;&amp;&nbsp;Item</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">resize(</span><span style=\"color: #800080;\">350</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">200</span><span style=\"color: #000000;\">);<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setRowCount(</span><span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">);<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setColumnCount(</span><span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">);<br>&nbsp;<br>QStringList&nbsp;header;<br>header.append(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">Month</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>header.append(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">Description</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">);<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setHorizontalHeaderLabels(header);<br>&nbsp;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">January</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">February</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">March</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>&nbsp;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;<br></span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">caterpillar’s&nbsp;month</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;<br></span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">momor’s&nbsp;month</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">setItem(</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">,&nbsp;<br></span><span style=\"color: #0000FF;\">new</span><span style=\"color: #000000;\">&nbsp;QTableWidgetItem(QIcon(</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush_head.jpg</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">),&nbsp;</span><span style=\"color: #800000;\">“</span><span style=\"color: #800000;\">bush’s&nbsp;month</span><span style=\"color: #800000;\">“</span><span style=\"color: #000000;\">));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;<br>tableWidget</span><span style=\"color: #000000;\">-&gt;</span><span style=\"color: #000000;\">show();<br>&nbsp;<br></span><span style=\"color: #0000FF;\">return</span><span style=\"color: #000000;\">&nbsp;app.exec();<br>}<br></span></div></div></div>\n\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n"},{"title":"从农夫养牛问题推广到斐波那契数列","date":"2009-10-31T09:30:00.000Z","_content":"\n今天在CSDN上看到一条题目：\n\n_一个农夫养了一头牛，三年后，这头牛每年会生出1头牛，生出来的牛三年后，又可以每年生出一头牛……问农夫10年后有多少头牛?n年呢？_\n\n这里主要谈一下解决这种问题的思想。首先可以联系斐波那契数列，设f(n)为第n年的牛，则\n\nf(n) = f(n - 1) + f(n - 2)————>表达式1-1\n\n即第n年的牛为去年牛的个数f(n - 1)加上今年出生牛的个数,那么今年有多少头牛能生呢？（不考虑死亡的牛）则为前年牛的个数即f(n - 2)，因为前年的牛今年至少3岁，即为表达式1-1。\n\n推广一下，将牛生育年龄设为m，那么计算的表达式就变为\n\nf(n) = f(n - 1) + f(n - m + 1)————>表达式1-2\n\n即n-1年牛的个数加上n-m+1年的牛生出的小牛。\n\n那么下面讨论一个稍微复杂点的问题，如果增加一个条件，即牛会在第８年死去，那么第n年会有多少条牛呢？\n\n为了便于推导，这里先设几个函数:\n\n· f(n)即第n年牛的个数\n\n· h(n)即第n年出生的牛的个数\n\n· g(n)即第n年死亡的牛的个数\n\n那么这里可以首先想到一个表达式:\n\n(1) f(n) = f(n -1) + h(n) - g(n)\n\n即第n年牛的个数为第n-1年牛的个数+第n年出生的牛的个数-第n年死亡的牛的个数\n\n而第二个表达式即关于新增牛的个数h(n)的：\n\n(2) h(n) = f(n - 2) - g(n - 1)\n\n即第n年出生的牛的个数为第n-2年牛的个数减去在第n-1年死亡的牛的个数\n\n再看第三个表达式关于第n年死亡的牛的个数的：\n\n(3) g(n)=h(n - 7)\n\n即第n年死亡的牛的个数为第n - 7年出生的牛的个数，这是一个对称的关系。\n\n推导的步骤如下，将(2)代入(1)\n\n即f(n) = f(n - 1) + f(n - 2)- g(n - 1) - g(n)---->（4）\n\n再将(3)式代入(4)\n\n即f(n) = f(n - 1) + f(n - 2) - h(n - 8) - h(n - 7)----->(5)\n\n再将（2）式代入（5）的h(n - 7)\n\n即f(n) = f(n - 1) + f(n - 2) - (h(n - 8) + f(n - 9) - g(n - 8))\n\n到了这里不难看出(h(n - 8) + f(n - 9) - g(n - 8))即为f(n - 8)通过式(1)。\n\n则最终的表达式为\n\nf(n) = f(n - 1) + f(n - 2) - f(n - 8)\n\n即第n年牛的个数为第n-1年牛的个数+第n-2年牛的个数-第n-8年牛的个数\n\n当牛的生育年龄用a表示，死亡年龄用b表示时，则表示为：\n\nf(n) = f(n - 1) + f(n – a +　１) \\- f(n - b)\n\n验证程序如下：\n\n```csharp\nusing System;  \n  \n   \n  \nnamespace TopCoder  \n  \n{  \n  \n    class Program  \n  \n    {  \n  \n        staticvoid Main(string args)  \n  \n        {  \n  \n            FeedCow feedCow =new FeedCow();  \n  \n            for (int i =1; i <30; ++i)  \n  \n            {  \n  \n                int sum = feedCow.Feed(i, 5, 7);  \n  \n                Console.WriteLine(\"{0}:{1}\", i, sum);  \n  \n            }  \n  \n        }  \n  \n    }  \n  \n   \n  \n    ///<summary>  \n  \n    ///  \n  \n    ///</summary>  \n  \n    ///<param name=\"year\">要计算的年限</param>  \n  \n    ///<param name=\"age\">牛的生育年龄</param>  \n  \n    ///<param name=\"deadAge\">牛的死亡年龄</param>  \n  \n    ///<returns></returns>  \n  \n    public int Feed(int year, int age, int deadAge)  \n  \n    {  \n  \n        int sum =1;  \n  \n        int min = deadAge < year ? deadAge : year;  \n  \n        for (int i = age; i <= min; ++i)  \n  \n        {  \n  \n            sum += Feed(year - i +1, age, deadAge);  \n  \n        }  \n  \n        return sum;  \n  \n    }  \n```\n\nOver，欢迎大家拍砖~ ","source":"_posts/从农夫养牛问题推广到斐波那契数列.md","raw":"---\ntitle: 从农夫养牛问题推广到斐波那契数列\ntags: []\ndate: 2009-10-31 17:30:00\n---\n\n今天在CSDN上看到一条题目：\n\n_一个农夫养了一头牛，三年后，这头牛每年会生出1头牛，生出来的牛三年后，又可以每年生出一头牛……问农夫10年后有多少头牛?n年呢？_\n\n这里主要谈一下解决这种问题的思想。首先可以联系斐波那契数列，设f(n)为第n年的牛，则\n\nf(n) = f(n - 1) + f(n - 2)————>表达式1-1\n\n即第n年的牛为去年牛的个数f(n - 1)加上今年出生牛的个数,那么今年有多少头牛能生呢？（不考虑死亡的牛）则为前年牛的个数即f(n - 2)，因为前年的牛今年至少3岁，即为表达式1-1。\n\n推广一下，将牛生育年龄设为m，那么计算的表达式就变为\n\nf(n) = f(n - 1) + f(n - m + 1)————>表达式1-2\n\n即n-1年牛的个数加上n-m+1年的牛生出的小牛。\n\n那么下面讨论一个稍微复杂点的问题，如果增加一个条件，即牛会在第８年死去，那么第n年会有多少条牛呢？\n\n为了便于推导，这里先设几个函数:\n\n· f(n)即第n年牛的个数\n\n· h(n)即第n年出生的牛的个数\n\n· g(n)即第n年死亡的牛的个数\n\n那么这里可以首先想到一个表达式:\n\n(1) f(n) = f(n -1) + h(n) - g(n)\n\n即第n年牛的个数为第n-1年牛的个数+第n年出生的牛的个数-第n年死亡的牛的个数\n\n而第二个表达式即关于新增牛的个数h(n)的：\n\n(2) h(n) = f(n - 2) - g(n - 1)\n\n即第n年出生的牛的个数为第n-2年牛的个数减去在第n-1年死亡的牛的个数\n\n再看第三个表达式关于第n年死亡的牛的个数的：\n\n(3) g(n)=h(n - 7)\n\n即第n年死亡的牛的个数为第n - 7年出生的牛的个数，这是一个对称的关系。\n\n推导的步骤如下，将(2)代入(1)\n\n即f(n) = f(n - 1) + f(n - 2)- g(n - 1) - g(n)---->（4）\n\n再将(3)式代入(4)\n\n即f(n) = f(n - 1) + f(n - 2) - h(n - 8) - h(n - 7)----->(5)\n\n再将（2）式代入（5）的h(n - 7)\n\n即f(n) = f(n - 1) + f(n - 2) - (h(n - 8) + f(n - 9) - g(n - 8))\n\n到了这里不难看出(h(n - 8) + f(n - 9) - g(n - 8))即为f(n - 8)通过式(1)。\n\n则最终的表达式为\n\nf(n) = f(n - 1) + f(n - 2) - f(n - 8)\n\n即第n年牛的个数为第n-1年牛的个数+第n-2年牛的个数-第n-8年牛的个数\n\n当牛的生育年龄用a表示，死亡年龄用b表示时，则表示为：\n\nf(n) = f(n - 1) + f(n – a +　１) \\- f(n - b)\n\n验证程序如下：\n\n```csharp\nusing System;  \n  \n   \n  \nnamespace TopCoder  \n  \n{  \n  \n    class Program  \n  \n    {  \n  \n        staticvoid Main(string args)  \n  \n        {  \n  \n            FeedCow feedCow =new FeedCow();  \n  \n            for (int i =1; i <30; ++i)  \n  \n            {  \n  \n                int sum = feedCow.Feed(i, 5, 7);  \n  \n                Console.WriteLine(\"{0}:{1}\", i, sum);  \n  \n            }  \n  \n        }  \n  \n    }  \n  \n   \n  \n    ///<summary>  \n  \n    ///  \n  \n    ///</summary>  \n  \n    ///<param name=\"year\">要计算的年限</param>  \n  \n    ///<param name=\"age\">牛的生育年龄</param>  \n  \n    ///<param name=\"deadAge\">牛的死亡年龄</param>  \n  \n    ///<returns></returns>  \n  \n    public int Feed(int year, int age, int deadAge)  \n  \n    {  \n  \n        int sum =1;  \n  \n        int min = deadAge < year ? deadAge : year;  \n  \n        for (int i = age; i <= min; ++i)  \n  \n        {  \n  \n            sum += Feed(year - i +1, age, deadAge);  \n  \n        }  \n  \n        return sum;  \n  \n    }  \n```\n\nOver，欢迎大家拍砖~ ","slug":"从农夫养牛问题推广到斐波那契数列","published":1,"updated":"2019-02-19T15:25:14.000Z","_id":"cjsbxamaz001ky6zsypqvo6l0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今天在CSDN上看到一条题目：</p>\n<p><em>一个农夫养了一头牛，三年后，这头牛每年会生出1头牛，生出来的牛三年后，又可以每年生出一头牛……问农夫10年后有多少头牛?n年呢？</em></p>\n<p>这里主要谈一下解决这种问题的思想。首先可以联系斐波那契数列，设f(n)为第n年的牛，则</p>\n<p>f(n) = f(n - 1) + f(n - 2)————&gt;表达式1-1</p>\n<p>即第n年的牛为去年牛的个数f(n - 1)加上今年出生牛的个数,那么今年有多少头牛能生呢？（不考虑死亡的牛）则为前年牛的个数即f(n - 2)，因为前年的牛今年至少3岁，即为表达式1-1。</p>\n<p>推广一下，将牛生育年龄设为m，那么计算的表达式就变为</p>\n<p>f(n) = f(n - 1) + f(n - m + 1)————&gt;表达式1-2</p>\n<p>即n-1年牛的个数加上n-m+1年的牛生出的小牛。</p>\n<p>那么下面讨论一个稍微复杂点的问题，如果增加一个条件，即牛会在第８年死去，那么第n年会有多少条牛呢？</p>\n<p>为了便于推导，这里先设几个函数:</p>\n<p>· f(n)即第n年牛的个数</p>\n<p>· h(n)即第n年出生的牛的个数</p>\n<p>· g(n)即第n年死亡的牛的个数</p>\n<p>那么这里可以首先想到一个表达式:</p>\n<p>(1) f(n) = f(n -1) + h(n) - g(n)</p>\n<p>即第n年牛的个数为第n-1年牛的个数+第n年出生的牛的个数-第n年死亡的牛的个数</p>\n<p>而第二个表达式即关于新增牛的个数h(n)的：</p>\n<p>(2) h(n) = f(n - 2) - g(n - 1)</p>\n<p>即第n年出生的牛的个数为第n-2年牛的个数减去在第n-1年死亡的牛的个数</p>\n<p>再看第三个表达式关于第n年死亡的牛的个数的：</p>\n<p>(3) g(n)=h(n - 7)</p>\n<p>即第n年死亡的牛的个数为第n - 7年出生的牛的个数，这是一个对称的关系。</p>\n<p>推导的步骤如下，将(2)代入(1)</p>\n<p>即f(n) = f(n - 1) + f(n - 2)- g(n - 1) - g(n)—-&gt;（4）</p>\n<p>再将(3)式代入(4)</p>\n<p>即f(n) = f(n - 1) + f(n - 2) - h(n - 8) - h(n - 7)—–&gt;(5)</p>\n<p>再将（2）式代入（5）的h(n - 7)</p>\n<p>即f(n) = f(n - 1) + f(n - 2) - (h(n - 8) + f(n - 9) - g(n - 8))</p>\n<p>到了这里不难看出(h(n - 8) + f(n - 9) - g(n - 8))即为f(n - 8)通过式(1)。</p>\n<p>则最终的表达式为</p>\n<p>f(n) = f(n - 1) + f(n - 2) - f(n - 8)</p>\n<p>即第n年牛的个数为第n-1年牛的个数+第n-2年牛的个数-第n-8年牛的个数</p>\n<p>当牛的生育年龄用a表示，死亡年龄用b表示时，则表示为：</p>\n<p>f(n) = f(n - 1) + f(n – a +　１) - f(n - b)</p>\n<p>验证程序如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;  </span><br><span class=\"line\">  </span><br><span class=\"line\">   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">TopCoder</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"function\">staticvoid <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span> args</span>)  </span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            FeedCow feedCow =<span class=\"keyword\">new</span> FeedCow();  </span><br><span class=\"line\">  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i &lt;<span class=\"number\">30</span>; ++i)  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">                <span class=\"keyword\">int</span> sum = feedCow.Feed(i, <span class=\"number\">5</span>, <span class=\"number\">7</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"&#123;0&#125;:&#123;1&#125;\"</span>, i, sum);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">   </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;summary&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;/summary&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;param name=\"year\"&gt;</span>要计算的年限<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;param name=\"age\"&gt;</span>牛的生育年龄<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;param name=\"deadAge\"&gt;</span>牛的死亡年龄<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Feed</span>(<span class=\"params\"><span class=\"keyword\">int</span> year, <span class=\"keyword\">int</span> age, <span class=\"keyword\">int</span> deadAge</span>)  </span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum =<span class=\"number\">1</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = deadAge &lt; year ? deadAge : year;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = age; i &lt;= min; ++i)  </span><br><span class=\"line\">  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            sum += Feed(year - i +<span class=\"number\">1</span>, age, deadAge);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Over，欢迎大家拍砖~ </p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在CSDN上看到一条题目：</p>\n<p><em>一个农夫养了一头牛，三年后，这头牛每年会生出1头牛，生出来的牛三年后，又可以每年生出一头牛……问农夫10年后有多少头牛?n年呢？</em></p>\n<p>这里主要谈一下解决这种问题的思想。首先可以联系斐波那契数列，设f(n)为第n年的牛，则</p>\n<p>f(n) = f(n - 1) + f(n - 2)————&gt;表达式1-1</p>\n<p>即第n年的牛为去年牛的个数f(n - 1)加上今年出生牛的个数,那么今年有多少头牛能生呢？（不考虑死亡的牛）则为前年牛的个数即f(n - 2)，因为前年的牛今年至少3岁，即为表达式1-1。</p>\n<p>推广一下，将牛生育年龄设为m，那么计算的表达式就变为</p>\n<p>f(n) = f(n - 1) + f(n - m + 1)————&gt;表达式1-2</p>\n<p>即n-1年牛的个数加上n-m+1年的牛生出的小牛。</p>\n<p>那么下面讨论一个稍微复杂点的问题，如果增加一个条件，即牛会在第８年死去，那么第n年会有多少条牛呢？</p>\n<p>为了便于推导，这里先设几个函数:</p>\n<p>· f(n)即第n年牛的个数</p>\n<p>· h(n)即第n年出生的牛的个数</p>\n<p>· g(n)即第n年死亡的牛的个数</p>\n<p>那么这里可以首先想到一个表达式:</p>\n<p>(1) f(n) = f(n -1) + h(n) - g(n)</p>\n<p>即第n年牛的个数为第n-1年牛的个数+第n年出生的牛的个数-第n年死亡的牛的个数</p>\n<p>而第二个表达式即关于新增牛的个数h(n)的：</p>\n<p>(2) h(n) = f(n - 2) - g(n - 1)</p>\n<p>即第n年出生的牛的个数为第n-2年牛的个数减去在第n-1年死亡的牛的个数</p>\n<p>再看第三个表达式关于第n年死亡的牛的个数的：</p>\n<p>(3) g(n)=h(n - 7)</p>\n<p>即第n年死亡的牛的个数为第n - 7年出生的牛的个数，这是一个对称的关系。</p>\n<p>推导的步骤如下，将(2)代入(1)</p>\n<p>即f(n) = f(n - 1) + f(n - 2)- g(n - 1) - g(n)—-&gt;（4）</p>\n<p>再将(3)式代入(4)</p>\n<p>即f(n) = f(n - 1) + f(n - 2) - h(n - 8) - h(n - 7)—–&gt;(5)</p>\n<p>再将（2）式代入（5）的h(n - 7)</p>\n<p>即f(n) = f(n - 1) + f(n - 2) - (h(n - 8) + f(n - 9) - g(n - 8))</p>\n<p>到了这里不难看出(h(n - 8) + f(n - 9) - g(n - 8))即为f(n - 8)通过式(1)。</p>\n<p>则最终的表达式为</p>\n<p>f(n) = f(n - 1) + f(n - 2) - f(n - 8)</p>\n<p>即第n年牛的个数为第n-1年牛的个数+第n-2年牛的个数-第n-8年牛的个数</p>\n<p>当牛的生育年龄用a表示，死亡年龄用b表示时，则表示为：</p>\n<p>f(n) = f(n - 1) + f(n – a +　１) - f(n - b)</p>\n<p>验证程序如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;  </span><br><span class=\"line\">  </span><br><span class=\"line\">   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">TopCoder</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"function\">staticvoid <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span> args</span>)  </span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            FeedCow feedCow =<span class=\"keyword\">new</span> FeedCow();  </span><br><span class=\"line\">  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i &lt;<span class=\"number\">30</span>; ++i)  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">                <span class=\"keyword\">int</span> sum = feedCow.Feed(i, <span class=\"number\">5</span>, <span class=\"number\">7</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">\"&#123;0&#125;:&#123;1&#125;\"</span>, i, sum);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">   </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;summary&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;/summary&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;param name=\"year\"&gt;</span>要计算的年限<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;param name=\"age\"&gt;</span>牛的生育年龄<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;param name=\"deadAge\"&gt;</span>牛的死亡年龄<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Feed</span>(<span class=\"params\"><span class=\"keyword\">int</span> year, <span class=\"keyword\">int</span> age, <span class=\"keyword\">int</span> deadAge</span>)  </span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum =<span class=\"number\">1</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = deadAge &lt; year ? deadAge : year;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = age; i &lt;= min; ++i)  </span><br><span class=\"line\">  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            sum += Feed(year - i +<span class=\"number\">1</span>, age, deadAge);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Over，欢迎大家拍砖~ </p>\n"},{"title":"利用Hexo+Github搭建个人免费博客","date":"2019-02-15T06:41:24.000Z","_content":"# 前言\n本篇blog将记录个人静态博客的搭建方法,包括：\n\n* Github静态博客是什么，为什么选择Hexo？\n* Hexo搭建过程\n* Hexo使用方法\n\n<!--more-->\n\n# GitHub静态博客是什么，为什么选择Hexo？\nGitHub作为全球最大的程序员交友网站，是一个代码托管平台和开发者社区，开发者可以在Github上创建自己的开源项目并与其他开发者协作编码，同时它也提供了很多服务，其中Pages就是其中一个服务，它提供了免费的托管空间可以用来存放静态博客站点的数据，使用GitHub Pages技术搭建静态博客站点的好处有：\n\n* 多达1G的免费空间。\n* 每月100GB的流量。\n* 利用GitHub的数据存储备份功能，保证数据的安全。\n\n具体的介绍可以参考[GitHub Pages](https://help.github.com/articles/what-is-github-pages/).\n\n在[Hexo](https://help.github.com/articles/what-is-github-pages/)之前GitHub内置支持的静态网页生成引擎是Jekyll，参考[三脚猫](https://www.jianshu.com/p/b0cae7168352)相比较Jekyll而言，Hexo更容易入手，也更方便配置，顾本人更倾向于使用Hexo。另外Hexo也支持多线备份，可以同步到多个git仓库中，实现境内境外双线解析镜像，不过该功能还未体验。\n\n# Hexo搭建过程\n本人是mac系统，参考[全民博客时代的到来——20分钟简要教程](https://www.jianshu.com/p/e99ed60390a8),一步一步下来，将下列工具准备齐全：\n\n* git\n* npm\n* hexo\n\n在部署hexo过程中可能会遇到一些错误，根据npm提示或者google一些基本就可以解决了。\n\n关于Hexo源代码的保存问题，可以参考[保存Hexo博客源码到Github上](https://www.jianshu.com/p/3c827e38a852)，创建一个新的分支，将代码存入新的分支中，保留master给GitHub Pages引擎用作渲染用。\n在实际操作中，该文章中的一些git方法可以根据实际情况进行调整，这里需要掌握一些git的基本语法。\n\n# Hexo使用方法\n参考Hexo[帮助](https://hexo.io/zh-cn/docs/)\n\n## 文档结构\n安装完Hexo后的目录结构如下：\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   └── _posts\n|   └── _drafts (自建添加)\n└── themes\n└── public\n```\n\n### _config.yml\n用于记录网站的配置信息\n\n### package.json\nnode包的信息\n\n### scaffolds\n**模版** 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n\n### source\n存放用户markdown文件的地方，除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n\n可以建立一个_drafts文件夹，存放草稿文件。\n\n### public\n发布的文件，最终这些文件将上传到GitHub Page中进行同步。\n\n## 配置参数\n配置参数可以[参考](https://hexo.io/zh-cn/docs/configuration)\n关于绑定域名，设置搜索选项时，在后续完成的时候再介绍。\n\n## 命令\nHexo命令可以[参考](https://hexo.io/zh-cn/docs/commands)\n可以利用一些短命令，比如：\n\n```\nhexo g -d\n```\n实现安装和部署。\n\n更多的命令速查可以参考这个[cheatsheet](https://lvraikkonen.github.io/2017/06/05/Hexo-command-Cheatsheet/)\n\n另外一篇[cheatsheet](https://neo.works/pages/Hexo-Blogging-Cheatsheet/#frequently-used-emoji)中的Emoji也比较有用。","source":"_posts/tutoial-of-hexo.md","raw":"---\ntitle: 利用Hexo+Github搭建个人免费博客\ndate: 2019-02-15 14:41:24\ntags:\n---\n# 前言\n本篇blog将记录个人静态博客的搭建方法,包括：\n\n* Github静态博客是什么，为什么选择Hexo？\n* Hexo搭建过程\n* Hexo使用方法\n\n<!--more-->\n\n# GitHub静态博客是什么，为什么选择Hexo？\nGitHub作为全球最大的程序员交友网站，是一个代码托管平台和开发者社区，开发者可以在Github上创建自己的开源项目并与其他开发者协作编码，同时它也提供了很多服务，其中Pages就是其中一个服务，它提供了免费的托管空间可以用来存放静态博客站点的数据，使用GitHub Pages技术搭建静态博客站点的好处有：\n\n* 多达1G的免费空间。\n* 每月100GB的流量。\n* 利用GitHub的数据存储备份功能，保证数据的安全。\n\n具体的介绍可以参考[GitHub Pages](https://help.github.com/articles/what-is-github-pages/).\n\n在[Hexo](https://help.github.com/articles/what-is-github-pages/)之前GitHub内置支持的静态网页生成引擎是Jekyll，参考[三脚猫](https://www.jianshu.com/p/b0cae7168352)相比较Jekyll而言，Hexo更容易入手，也更方便配置，顾本人更倾向于使用Hexo。另外Hexo也支持多线备份，可以同步到多个git仓库中，实现境内境外双线解析镜像，不过该功能还未体验。\n\n# Hexo搭建过程\n本人是mac系统，参考[全民博客时代的到来——20分钟简要教程](https://www.jianshu.com/p/e99ed60390a8),一步一步下来，将下列工具准备齐全：\n\n* git\n* npm\n* hexo\n\n在部署hexo过程中可能会遇到一些错误，根据npm提示或者google一些基本就可以解决了。\n\n关于Hexo源代码的保存问题，可以参考[保存Hexo博客源码到Github上](https://www.jianshu.com/p/3c827e38a852)，创建一个新的分支，将代码存入新的分支中，保留master给GitHub Pages引擎用作渲染用。\n在实际操作中，该文章中的一些git方法可以根据实际情况进行调整，这里需要掌握一些git的基本语法。\n\n# Hexo使用方法\n参考Hexo[帮助](https://hexo.io/zh-cn/docs/)\n\n## 文档结构\n安装完Hexo后的目录结构如下：\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   └── _posts\n|   └── _drafts (自建添加)\n└── themes\n└── public\n```\n\n### _config.yml\n用于记录网站的配置信息\n\n### package.json\nnode包的信息\n\n### scaffolds\n**模版** 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n\n### source\n存放用户markdown文件的地方，除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n\n可以建立一个_drafts文件夹，存放草稿文件。\n\n### public\n发布的文件，最终这些文件将上传到GitHub Page中进行同步。\n\n## 配置参数\n配置参数可以[参考](https://hexo.io/zh-cn/docs/configuration)\n关于绑定域名，设置搜索选项时，在后续完成的时候再介绍。\n\n## 命令\nHexo命令可以[参考](https://hexo.io/zh-cn/docs/commands)\n可以利用一些短命令，比如：\n\n```\nhexo g -d\n```\n实现安装和部署。\n\n更多的命令速查可以参考这个[cheatsheet](https://lvraikkonen.github.io/2017/06/05/Hexo-command-Cheatsheet/)\n\n另外一篇[cheatsheet](https://neo.works/pages/Hexo-Blogging-Cheatsheet/#frequently-used-emoji)中的Emoji也比较有用。","slug":"tutoial-of-hexo","published":1,"updated":"2019-02-18T14:01:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsbxasc7001ly6zsq8xb5s4n","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇blog将记录个人静态博客的搭建方法,包括：</p>\n<ul>\n<li>Github静态博客是什么，为什么选择Hexo？</li>\n<li>Hexo搭建过程</li>\n<li>Hexo使用方法</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"GitHub静态博客是什么，为什么选择Hexo？\"><a href=\"#GitHub静态博客是什么，为什么选择Hexo？\" class=\"headerlink\" title=\"GitHub静态博客是什么，为什么选择Hexo？\"></a>GitHub静态博客是什么，为什么选择Hexo？</h1><p>GitHub作为全球最大的程序员交友网站，是一个代码托管平台和开发者社区，开发者可以在Github上创建自己的开源项目并与其他开发者协作编码，同时它也提供了很多服务，其中Pages就是其中一个服务，它提供了免费的托管空间可以用来存放静态博客站点的数据，使用GitHub Pages技术搭建静态博客站点的好处有：</p>\n<ul>\n<li>多达1G的免费空间。</li>\n<li>每月100GB的流量。</li>\n<li>利用GitHub的数据存储备份功能，保证数据的安全。</li>\n</ul>\n<p>具体的介绍可以参考<a href=\"https://help.github.com/articles/what-is-github-pages/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>.</p>\n<p>在<a href=\"https://help.github.com/articles/what-is-github-pages/\" target=\"_blank\" rel=\"noopener\">Hexo</a>之前GitHub内置支持的静态网页生成引擎是Jekyll，参考<a href=\"https://www.jianshu.com/p/b0cae7168352\" target=\"_blank\" rel=\"noopener\">三脚猫</a>相比较Jekyll而言，Hexo更容易入手，也更方便配置，顾本人更倾向于使用Hexo。另外Hexo也支持多线备份，可以同步到多个git仓库中，实现境内境外双线解析镜像，不过该功能还未体验。</p>\n<h1 id=\"Hexo搭建过程\"><a href=\"#Hexo搭建过程\" class=\"headerlink\" title=\"Hexo搭建过程\"></a>Hexo搭建过程</h1><p>本人是mac系统，参考<a href=\"https://www.jianshu.com/p/e99ed60390a8\" target=\"_blank\" rel=\"noopener\">全民博客时代的到来——20分钟简要教程</a>,一步一步下来，将下列工具准备齐全：</p>\n<ul>\n<li>git</li>\n<li>npm</li>\n<li>hexo</li>\n</ul>\n<p>在部署hexo过程中可能会遇到一些错误，根据npm提示或者google一些基本就可以解决了。</p>\n<p>关于Hexo源代码的保存问题，可以参考<a href=\"https://www.jianshu.com/p/3c827e38a852\" target=\"_blank\" rel=\"noopener\">保存Hexo博客源码到Github上</a>，创建一个新的分支，将代码存入新的分支中，保留master给GitHub Pages引擎用作渲染用。<br>在实际操作中，该文章中的一些git方法可以根据实际情况进行调整，这里需要掌握一些git的基本语法。</p>\n<h1 id=\"Hexo使用方法\"><a href=\"#Hexo使用方法\" class=\"headerlink\" title=\"Hexo使用方法\"></a>Hexo使用方法</h1><p>参考Hexo<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">帮助</a></p>\n<h2 id=\"文档结构\"><a href=\"#文档结构\" class=\"headerlink\" title=\"文档结构\"></a>文档结构</h2><p>安装完Hexo后的目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">|   └── _drafts (自建添加)</span><br><span class=\"line\">└── themes</span><br><span class=\"line\">└── public</span><br></pre></td></tr></table></figure>\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>用于记录网站的配置信息</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>node包的信息</p>\n<h3 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a>scaffolds</h3><p><strong>模版</strong> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>\n<h3 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h3><p>存放用户markdown文件的地方，除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>\n<p>可以建立一个_drafts文件夹，存放草稿文件。</p>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>发布的文件，最终这些文件将上传到GitHub Page中进行同步。</p>\n<h2 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h2><p>配置参数可以<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">参考</a><br>关于绑定域名，设置搜索选项时，在后续完成的时候再介绍。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p>Hexo命令可以<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">参考</a><br>可以利用一些短命令，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<p>实现安装和部署。</p>\n<p>更多的命令速查可以参考这个<a href=\"https://lvraikkonen.github.io/2017/06/05/Hexo-command-Cheatsheet/\" target=\"_blank\" rel=\"noopener\">cheatsheet</a></p>\n<p>另外一篇<a href=\"https://neo.works/pages/Hexo-Blogging-Cheatsheet/#frequently-used-emoji\" target=\"_blank\" rel=\"noopener\">cheatsheet</a>中的Emoji也比较有用。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇blog将记录个人静态博客的搭建方法,包括：</p>\n<ul>\n<li>Github静态博客是什么，为什么选择Hexo？</li>\n<li>Hexo搭建过程</li>\n<li>Hexo使用方法</li>\n</ul>","more":"<h1 id=\"GitHub静态博客是什么，为什么选择Hexo？\"><a href=\"#GitHub静态博客是什么，为什么选择Hexo？\" class=\"headerlink\" title=\"GitHub静态博客是什么，为什么选择Hexo？\"></a>GitHub静态博客是什么，为什么选择Hexo？</h1><p>GitHub作为全球最大的程序员交友网站，是一个代码托管平台和开发者社区，开发者可以在Github上创建自己的开源项目并与其他开发者协作编码，同时它也提供了很多服务，其中Pages就是其中一个服务，它提供了免费的托管空间可以用来存放静态博客站点的数据，使用GitHub Pages技术搭建静态博客站点的好处有：</p>\n<ul>\n<li>多达1G的免费空间。</li>\n<li>每月100GB的流量。</li>\n<li>利用GitHub的数据存储备份功能，保证数据的安全。</li>\n</ul>\n<p>具体的介绍可以参考<a href=\"https://help.github.com/articles/what-is-github-pages/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>.</p>\n<p>在<a href=\"https://help.github.com/articles/what-is-github-pages/\" target=\"_blank\" rel=\"noopener\">Hexo</a>之前GitHub内置支持的静态网页生成引擎是Jekyll，参考<a href=\"https://www.jianshu.com/p/b0cae7168352\" target=\"_blank\" rel=\"noopener\">三脚猫</a>相比较Jekyll而言，Hexo更容易入手，也更方便配置，顾本人更倾向于使用Hexo。另外Hexo也支持多线备份，可以同步到多个git仓库中，实现境内境外双线解析镜像，不过该功能还未体验。</p>\n<h1 id=\"Hexo搭建过程\"><a href=\"#Hexo搭建过程\" class=\"headerlink\" title=\"Hexo搭建过程\"></a>Hexo搭建过程</h1><p>本人是mac系统，参考<a href=\"https://www.jianshu.com/p/e99ed60390a8\" target=\"_blank\" rel=\"noopener\">全民博客时代的到来——20分钟简要教程</a>,一步一步下来，将下列工具准备齐全：</p>\n<ul>\n<li>git</li>\n<li>npm</li>\n<li>hexo</li>\n</ul>\n<p>在部署hexo过程中可能会遇到一些错误，根据npm提示或者google一些基本就可以解决了。</p>\n<p>关于Hexo源代码的保存问题，可以参考<a href=\"https://www.jianshu.com/p/3c827e38a852\" target=\"_blank\" rel=\"noopener\">保存Hexo博客源码到Github上</a>，创建一个新的分支，将代码存入新的分支中，保留master给GitHub Pages引擎用作渲染用。<br>在实际操作中，该文章中的一些git方法可以根据实际情况进行调整，这里需要掌握一些git的基本语法。</p>\n<h1 id=\"Hexo使用方法\"><a href=\"#Hexo使用方法\" class=\"headerlink\" title=\"Hexo使用方法\"></a>Hexo使用方法</h1><p>参考Hexo<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">帮助</a></p>\n<h2 id=\"文档结构\"><a href=\"#文档结构\" class=\"headerlink\" title=\"文档结构\"></a>文档结构</h2><p>安装完Hexo后的目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">|   └── _drafts (自建添加)</span><br><span class=\"line\">└── themes</span><br><span class=\"line\">└── public</span><br></pre></td></tr></table></figure>\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>用于记录网站的配置信息</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>node包的信息</p>\n<h3 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a>scaffolds</h3><p><strong>模版</strong> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>\n<h3 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h3><p>存放用户markdown文件的地方，除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>\n<p>可以建立一个_drafts文件夹，存放草稿文件。</p>\n<h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a>public</h3><p>发布的文件，最终这些文件将上传到GitHub Page中进行同步。</p>\n<h2 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h2><p>配置参数可以<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">参考</a><br>关于绑定域名，设置搜索选项时，在后续完成的时候再介绍。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p>Hexo命令可以<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">参考</a><br>可以利用一些短命令，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<p>实现安装和部署。</p>\n<p>更多的命令速查可以参考这个<a href=\"https://lvraikkonen.github.io/2017/06/05/Hexo-command-Cheatsheet/\" target=\"_blank\" rel=\"noopener\">cheatsheet</a></p>\n<p>另外一篇<a href=\"https://neo.works/pages/Hexo-Blogging-Cheatsheet/#frequently-used-emoji\" target=\"_blank\" rel=\"noopener\">cheatsheet</a>中的Emoji也比较有用。</p>"},{"title":"WPF中Dependency属性设置顺序的心得","date":"2009-02-10T09:51:00.000Z","_content":"今天在学习WPF依赖属性的时候做了一个很经典的例子，即通过XMAL中的Trigger来改变按钮的前景色。具体代码如下：\n\nCode\n\n```xml\n<Button>\n            OK\n            <Button.Style>\n                <Style TargetType=\"{x:Type Button}\">\n                    <Style.Triggers>\n                        <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                            <Setter Property=\"Foreground\" Value=\"Blue\"></Setter>\n                        </Trigger>\n                    </Style.Triggers>\n                </Style>\n            </Button.Style>\n</Button>\n``` \n\n可以很好的实现，将鼠标移至按钮上，然后按钮的前景色变为蓝色的功能。\n\n但是尝试给此按钮设置一个Foreground属性，代码：\n\n \n```xml\n<Button  Foreground=\"Black\">\n            OK\n            <Button.Style>\n                <Style TargetType=\"{x:Type Button}\">\n                    <Style.Triggers>\n                        <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                            <Setter Property=\"Foreground\" Value=\"Blue\"></Setter>\n                        </Trigger>\n                    </Style.Triggers>\n                </Style>\n            </Button.Style>\n        </Button\n```\n \n\n则使Trigger设置前者色的作用失效了。于是这便使我联想到这几天看到的一篇Dependency属性计算顺序的文章\n\n（http://www.cnblogs.com/YilingLai/archive/2006/12/25/602889.html）\n\n原来在第一步计算基础值的时，系统是按照下面的优先级来计算Dependency属性的值的：\n\n1、Local Value                  \n\n2、Style Triggers              \n\n3、Template Triggers                   \n\n4、Style Setters \n\n5、Theme Style Triggers    \n\n6、Theme Style Setters     \n\n7、Property Value Inheritance      \n\n8、Default Value\n\n因为Foreground=\"Black\"属于Local Value，比Style Triggers的优先级要高，所以在计算过程中\n\n它掩盖了Style Triggers对Foreground属性值的作用。\n\n那么既需要设置Foreground同时也需要通过设置Trigger来改变它怎么做呢？\n\n答案就是如下面代码所示：\n\n```xml\n<Window.Resources>\n        <Style TargetType=\"{x:Type Button}\" x:Key=\"changeColorStyle\">\n            <Style.Triggers>\n                <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                    <Setter Property=\"Foreground\" Value=\"Blue\"></Setter>\n                </Trigger>\n            </Style.Triggers>\n            <Setter Property=\"Foreground\" Value=\"Black\"></Setter>\n        </Style>\n    </Window.Resources>\n    <StackPanel>\n        <Button Style=\"{StaticResource changeColorStyle}\">\n            OK\n        </Button>\n    </StackPanel\n```\n \n\n将Style提取到Window.Resources中，然后使此Button引用此资源。\n\n因为在计算基础值的顺序时,Style Triggers排在第二，而Style Setter则排在第四的位置上。","source":"_posts/WPF中Dependency属性设置顺序的心得.md","raw":"---\ntitle: WPF中Dependency属性设置顺序的心得\ntags: []\ndate: 2009-02-10 17:51:00\n---\n今天在学习WPF依赖属性的时候做了一个很经典的例子，即通过XMAL中的Trigger来改变按钮的前景色。具体代码如下：\n\nCode\n\n```xml\n<Button>\n            OK\n            <Button.Style>\n                <Style TargetType=\"{x:Type Button}\">\n                    <Style.Triggers>\n                        <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                            <Setter Property=\"Foreground\" Value=\"Blue\"></Setter>\n                        </Trigger>\n                    </Style.Triggers>\n                </Style>\n            </Button.Style>\n</Button>\n``` \n\n可以很好的实现，将鼠标移至按钮上，然后按钮的前景色变为蓝色的功能。\n\n但是尝试给此按钮设置一个Foreground属性，代码：\n\n \n```xml\n<Button  Foreground=\"Black\">\n            OK\n            <Button.Style>\n                <Style TargetType=\"{x:Type Button}\">\n                    <Style.Triggers>\n                        <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                            <Setter Property=\"Foreground\" Value=\"Blue\"></Setter>\n                        </Trigger>\n                    </Style.Triggers>\n                </Style>\n            </Button.Style>\n        </Button\n```\n \n\n则使Trigger设置前者色的作用失效了。于是这便使我联想到这几天看到的一篇Dependency属性计算顺序的文章\n\n（http://www.cnblogs.com/YilingLai/archive/2006/12/25/602889.html）\n\n原来在第一步计算基础值的时，系统是按照下面的优先级来计算Dependency属性的值的：\n\n1、Local Value                  \n\n2、Style Triggers              \n\n3、Template Triggers                   \n\n4、Style Setters \n\n5、Theme Style Triggers    \n\n6、Theme Style Setters     \n\n7、Property Value Inheritance      \n\n8、Default Value\n\n因为Foreground=\"Black\"属于Local Value，比Style Triggers的优先级要高，所以在计算过程中\n\n它掩盖了Style Triggers对Foreground属性值的作用。\n\n那么既需要设置Foreground同时也需要通过设置Trigger来改变它怎么做呢？\n\n答案就是如下面代码所示：\n\n```xml\n<Window.Resources>\n        <Style TargetType=\"{x:Type Button}\" x:Key=\"changeColorStyle\">\n            <Style.Triggers>\n                <Trigger Property=\"IsMouseOver\" Value=\"True\">\n                    <Setter Property=\"Foreground\" Value=\"Blue\"></Setter>\n                </Trigger>\n            </Style.Triggers>\n            <Setter Property=\"Foreground\" Value=\"Black\"></Setter>\n        </Style>\n    </Window.Resources>\n    <StackPanel>\n        <Button Style=\"{StaticResource changeColorStyle}\">\n            OK\n        </Button>\n    </StackPanel\n```\n \n\n将Style提取到Window.Resources中，然后使此Button引用此资源。\n\n因为在计算基础值的顺序时,Style Triggers排在第二，而Style Setter则排在第四的位置上。","slug":"WPF中Dependency属性设置顺序的心得","published":1,"updated":"2019-02-20T13:39:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsd9sii40000kszsyvu5d1x9","content":"<p>今天在学习WPF依赖属性的时候做了一个很经典的例子，即通过XMAL中的Trigger来改变按钮的前景色。具体代码如下：</p>\n<p>Code</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">            OK</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button.Style</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"&#123;x:Type Button&#125;\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                        <span class=\"tag\">&lt;<span class=\"name\">Trigger</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"IsMouseOver\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"True\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                            <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Foreground\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                        <span class=\"tag\">&lt;/<span class=\"name\">Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">                </span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Button.Style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">可以很好的实现，将鼠标移至按钮上，然后按钮的前景色变为蓝色的功能。</span><br><span class=\"line\"></span><br><span class=\"line\">但是尝试给此按钮设置一个Foreground属性，代码：</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">```xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span>  <span class=\"attr\">Foreground</span>=<span class=\"string\">\"Black\"</span>&gt;</span></span><br><span class=\"line\">            OK</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button.Style</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"&#123;x:Type Button&#125;\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                        <span class=\"tag\">&lt;<span class=\"name\">Trigger</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"IsMouseOver\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"True\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                            <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Foreground\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                        <span class=\"tag\">&lt;/<span class=\"name\">Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">                </span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Button.Style</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span></span></span><br></pre></td></tr></table></figure>\n<p>则使Trigger设置前者色的作用失效了。于是这便使我联想到这几天看到的一篇Dependency属性计算顺序的文章</p>\n<p>（<a href=\"http://www.cnblogs.com/YilingLai/archive/2006/12/25/602889.html）\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/YilingLai/archive/2006/12/25/602889.html）</a></p>\n<p>原来在第一步计算基础值的时，系统是按照下面的优先级来计算Dependency属性的值的：</p>\n<p>1、Local Value                  </p>\n<p>2、Style Triggers              </p>\n<p>3、Template Triggers                   </p>\n<p>4、Style Setters </p>\n<p>5、Theme Style Triggers    </p>\n<p>6、Theme Style Setters     </p>\n<p>7、Property Value Inheritance      </p>\n<p>8、Default Value</p>\n<p>因为Foreground=”Black”属于Local Value，比Style Triggers的优先级要高，所以在计算过程中</p>\n<p>它掩盖了Style Triggers对Foreground属性值的作用。</p>\n<p>那么既需要设置Foreground同时也需要通过设置Trigger来改变它怎么做呢？</p>\n<p>答案就是如下面代码所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Window.Resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"&#123;x:Type Button&#125;\"</span> <span class=\"attr\">x:Key</span>=<span class=\"string\">\"changeColorStyle\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">Trigger</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"IsMouseOver\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"True\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Foreground\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Foreground\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Black\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Window.Resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Style</span>=<span class=\"string\">\"&#123;StaticResource changeColorStyle&#125;\"</span>&gt;</span></span><br><span class=\"line\">            OK</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span></span></span><br></pre></td></tr></table></figure>\n<p>将Style提取到Window.Resources中，然后使此Button引用此资源。</p>\n<p>因为在计算基础值的顺序时,Style Triggers排在第二，而Style Setter则排在第四的位置上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在学习WPF依赖属性的时候做了一个很经典的例子，即通过XMAL中的Trigger来改变按钮的前景色。具体代码如下：</p>\n<p>Code</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">            OK</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button.Style</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"&#123;x:Type Button&#125;\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                        <span class=\"tag\">&lt;<span class=\"name\">Trigger</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"IsMouseOver\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"True\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                            <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Foreground\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                        <span class=\"tag\">&lt;/<span class=\"name\">Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">                </span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Button.Style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">可以很好的实现，将鼠标移至按钮上，然后按钮的前景色变为蓝色的功能。</span><br><span class=\"line\"></span><br><span class=\"line\">但是尝试给此按钮设置一个Foreground属性，代码：</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">```xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span>  <span class=\"attr\">Foreground</span>=<span class=\"string\">\"Black\"</span>&gt;</span></span><br><span class=\"line\">            OK</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button.Style</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"&#123;x:Type Button&#125;\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                        <span class=\"tag\">&lt;<span class=\"name\">Trigger</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"IsMouseOver\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"True\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                            <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Foreground\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                        <span class=\"tag\">&lt;/<span class=\"name\">Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">                </span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Button.Style</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span></span></span><br></pre></td></tr></table></figure>\n<p>则使Trigger设置前者色的作用失效了。于是这便使我联想到这几天看到的一篇Dependency属性计算顺序的文章</p>\n<p>（<a href=\"http://www.cnblogs.com/YilingLai/archive/2006/12/25/602889.html）\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/YilingLai/archive/2006/12/25/602889.html）</a></p>\n<p>原来在第一步计算基础值的时，系统是按照下面的优先级来计算Dependency属性的值的：</p>\n<p>1、Local Value                  </p>\n<p>2、Style Triggers              </p>\n<p>3、Template Triggers                   </p>\n<p>4、Style Setters </p>\n<p>5、Theme Style Triggers    </p>\n<p>6、Theme Style Setters     </p>\n<p>7、Property Value Inheritance      </p>\n<p>8、Default Value</p>\n<p>因为Foreground=”Black”属于Local Value，比Style Triggers的优先级要高，所以在计算过程中</p>\n<p>它掩盖了Style Triggers对Foreground属性值的作用。</p>\n<p>那么既需要设置Foreground同时也需要通过设置Trigger来改变它怎么做呢？</p>\n<p>答案就是如下面代码所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Window.Resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"&#123;x:Type Button&#125;\"</span> <span class=\"attr\">x:Key</span>=<span class=\"string\">\"changeColorStyle\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">Trigger</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"IsMouseOver\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"True\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Foreground\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Foreground\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Black\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Window.Resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Style</span>=<span class=\"string\">\"&#123;StaticResource changeColorStyle&#125;\"</span>&gt;</span></span><br><span class=\"line\">            OK</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span></span></span><br></pre></td></tr></table></figure>\n<p>将Style提取到Window.Resources中，然后使此Button引用此资源。</p>\n<p>因为在计算基础值的顺序时,Style Triggers排在第二，而Style Setter则排在第四的位置上。</p>\n"},{"title":"windows7到期的问题","date":"2010-02-24T04:50:00.000Z","_content":"\n<span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; line-height: 24px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: verdana, 'courier new'; line-height: 21px; font-size: 10pt; \">最近使用的windows7 RC版经常报the pre-release version of windows 7 ultimate will expire in XX days.</span><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">如果不想重装怎么办呢？</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">google了一下，发现可以通过升级windows7的方法解决这个问题，参考[<span style=\"font-size: 10pt; \">How to Direct In-Place Upgrade Windows 7 Beta or RC (Prerelease Version) to Windows 7 RTM</span>](http://www.mydigitallife.info/2009/07/29/how-to-direct-in-place-upgrade-windows-7-beta-or-rc-prerelease-version-to-windows-7-rtm/ \"How to Direct In-Place Upgrade Windows 7 Beta or RC (Prerelease Version) to Windows 7 RTM\")</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">。</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">下载最新的win7版本，将iso中的文件复制出来，修改source/cversion.ini，如：</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">[HostBuild]\n</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">MinClient=7233.0\n</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">MinServer=7100.0</span></span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 19px; font-size: 10pt; \">修改为：</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-size: 13px; line-height: 19px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">[HostBuild]\n</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">MinClient=7000.0\n</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">MinServer=7100.0</span></span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 19px; font-size: 10pt; \">改完后，点击source/setup.exe文件，在安装的过程中选择升级（保证系统盘中有9G以上的空间），时间比较长，无需监视，适合下班后操作。</span></font></div>\n\n&nbsp;\n</span>","source":"_posts/windows7到期的问题.md","raw":"---\ntitle: windows7到期的问题\ntags: []\ndate: 2010-02-24 12:50:00\n---\n\n<span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; line-height: 24px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: verdana, 'courier new'; line-height: 21px; font-size: 10pt; \">最近使用的windows7 RC版经常报the pre-release version of windows 7 ultimate will expire in XX days.</span><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">如果不想重装怎么办呢？</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">google了一下，发现可以通过升级windows7的方法解决这个问题，参考[<span style=\"font-size: 10pt; \">How to Direct In-Place Upgrade Windows 7 Beta or RC (Prerelease Version) to Windows 7 RTM</span>](http://www.mydigitallife.info/2009/07/29/how-to-direct-in-place-upgrade-windows-7-beta-or-rc-prerelease-version-to-windows-7-rtm/ \"How to Direct In-Place Upgrade Windows 7 Beta or RC (Prerelease Version) to Windows 7 RTM\")</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">。</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">下载最新的win7版本，将iso中的文件复制出来，修改source/cversion.ini，如：</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">[HostBuild]\n</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">MinClient=7233.0\n</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">MinServer=7100.0</span></span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 19px; font-size: 10pt; \">修改为：</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-size: 13px; line-height: 19px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">[HostBuild]\n</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">MinClient=7000.0\n</span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">MinServer=7100.0</span></span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 19px; font-size: 10pt; \">改完后，点击source/setup.exe文件，在安装的过程中选择升级（保证系统盘中有9G以上的空间），时间比较长，无需监视，适合下班后操作。</span></font></div>\n\n&nbsp;\n</span>","slug":"windows7到期的问题","published":1,"updated":"2019-02-16T13:03:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsd9sii90001kszsz4cmasx5","content":"<p><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; line-height: 24px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: verdana, 'courier new'; line-height: 21px; font-size: 10pt; \">最近使用的windows7 RC版经常报the pre-release version of windows 7 ultimate will expire in XX days.</span><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">如果不想重装怎么办呢？</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">google了一下，发现可以通过升级windows7的方法解决这个问题，参考<a href=\"http://www.mydigitallife.info/2009/07/29/how-to-direct-in-place-upgrade-windows-7-beta-or-rc-prerelease-version-to-windows-7-rtm/\" title=\"How to Direct In-Place Upgrade Windows 7 Beta or RC (Prerelease Version) to Windows 7 RTM\" target=\"_blank\" rel=\"noopener\"><span style=\"font-size: 10pt; \">How to Direct In-Place Upgrade Windows 7 Beta or RC (Prerelease Version) to Windows 7 RTM</span></a></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">。</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">下载最新的win7版本，将iso中的文件复制出来，修改source/cversion.ini，如：</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">[HostBuild]<br></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">MinClient=7233.0<br></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">MinServer=7100.0</span></span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 19px; font-size: 10pt; \">修改为：</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-size: 13px; line-height: 19px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">[HostBuild]<br></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">MinClient=7000.0<br></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">MinServer=7100.0</span></span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 19px; font-size: 10pt; \">改完后，点击source/setup.exe文件，在安装的过程中选择升级（保证系统盘中有9G以上的空间），时间比较长，无需监视，适合下班后操作。</span></font></div></span></p>\n<p>&nbsp;<br></p>\n","site":{"data":{}},"excerpt":"","more":"<p><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; line-height: 24px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: verdana, 'courier new'; line-height: 21px; font-size: 10pt; \">最近使用的windows7 RC版经常报the pre-release version of windows 7 ultimate will expire in XX days.</span><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">如果不想重装怎么办呢？</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">google了一下，发现可以通过升级windows7的方法解决这个问题，参考<a href=\"http://www.mydigitallife.info/2009/07/29/how-to-direct-in-place-upgrade-windows-7-beta-or-rc-prerelease-version-to-windows-7-rtm/\" title=\"How to Direct In-Place Upgrade Windows 7 Beta or RC (Prerelease Version) to Windows 7 RTM\" target=\"_blank\" rel=\"noopener\"><span style=\"font-size: 10pt; \">How to Direct In-Place Upgrade Windows 7 Beta or RC (Prerelease Version) to Windows 7 RTM</span></a></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">。</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; font-size: 10pt; \">下载最新的win7版本，将iso中的文件复制出来，修改source/cversion.ini，如：</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"verdana, 'courier new'\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 21px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">[HostBuild]<br></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">MinClient=7233.0<br></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-family: monospace; line-height: 19px; color: #005577; font-size: 10pt; \">MinServer=7100.0</span></span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 19px; font-size: 10pt; \">修改为：</span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; font-size: 13px; line-height: 19px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">[HostBuild]<br></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">MinClient=7000.0<br></span><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; color: #005577; font-size: 10pt; \">MinServer=7100.0</span></span></font></div><div style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><font face=\"monospace\" size=\"3\" style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; \"><span style=\"margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; line-height: 19px; font-size: 10pt; \">改完后，点击source/setup.exe文件，在安装的过程中选择升级（保证系统盘中有9G以上的空间），时间比较长，无需监视，适合下班后操作。</span></font></div></span></p>\n<p>&nbsp;<br></p>\n"},{"title":"极大极小博弈树的简介（附Tic-Tac-Toe源码）","date":"2011-01-26T13:46:00.000Z","_content":"\n#简介\n\n极大极小博弈树([Minimax Game Tree](http://en.wikipedia.org/wiki/Minimax))用于编写电脑之间的游戏程序，这类程序由两个游戏者轮流，每次执行一个步骤。当然，所有可能的步骤构成了一个树的结构。例如下面的图就是一个MGT，它表示了[Tic-Tac-Toe](http://en.wikipedia.org/wiki/Tic-tac-toe)游戏的前两步所有可能的步骤。\n\n![](http://www.aihorizon.com/images/essays/minimax-tictac.gif)\n\n在每一层中的节点通常代表不同游戏者的选择，这两个游戏者通常被称作马克思（MAX）和米恩（Min）。\n\n例如如果第二层是Max turn，则第三层就是Min turn，第二层的每个节点就是Max的choice，它们之间是或的关系，第三层的每个节点就是Min的choice，它们之间是与的关系。根据这个树，Max要做出的选择就让下次Min做出的任意选择都最小，即Minimax这个词的含义，极小化对手的最大收益。所以它不同于[Maximin](http://en.wikipedia.org/wiki/Minimax#Maximin)最大化自己的收益。\n\n因为往往一局要下到最后才能分出胜负，而[Game Tree](http://en.wikipedia.org/wiki/Game_tree)上nodes的增长是以指数方式的，比如深蓝（Deep Blue）可以搜索12步，假设各方每步都有10种选择，那么一次的搜索量也有1万亿次，所以对于普通的电脑能够搜索到4步也有1万次了，所以就需要一个评分系统，对局面进行打分，考虑到是双人对战，则评分从负无穷到正无穷。所以马克思就是要找到一个最大的分数，而米恩就是要找到一个最小的分数。\n\n#例子\n\n下面用一个例子来说明，Tic-Tac-Toe游戏。\n\n其中&lsquo;o&rsquo;代表PC，&lsquo;x&rsquo;代表玩家。\n\n其中有三个主要的函数：\n\nint minSearch( char _board[9] ) \n\nint maxSearch( char _board[9] )\n\nint gameState(char _board[9])\n\n分别扮演max和min的角色，寻找最大和最小值，以及一个评分函数。\n\n下面重点说说这个游戏的核心部分，gameState评分函数：\n\n连三&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 100分\n\n双连二&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 50分\n\n平局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0分\n\n不分胜负&nbsp;&nbsp;&nbsp;&nbsp; 1\n\n其中如果评分时不分胜负则还会继续搜索，直到找到其他三种状态。\n\n```cpp\nint gameState(char _board[9])\n{\n    int state;\n    static int table[][3] = \n    {\n        {0, 1, 2},\n        {3, 4, 5},\n        {6, 7, 8},\n        {0, 3, 6},\n        {1, 4, 7},\n        {2, 5, 8},\n        {0, 4, 8},\n        {2, 4, 6},\n    };\n    char chess = _board[0];\n    for (char i = 1; i < 9; ++i)\n    {\n        chess &= _board[i];\n    }\n    bool isFull = 0 != chess;\n    bool isFind = false;\n    for (int i = 0; i < sizeof(table) / sizeof(int[3]); ++i)\n    {\n        chess = _board[table[i][0]];\n        int j;\n        for (j = 1; j < 3; ++j)\n            if (_board[table[i][j]] != chess)\n                break;\n        if (chess != empty && j == 3)\n        {\n            isFind = true;        \n            break;\n        }\n    }\n    if (isFind)\n        //got win or lose\n        state = chess == o ? WIN : LOSE;\n    else\n    {\n        if (isFull)\n            //all position has been set without win or lose\n            return DRAW;\n        else\n        {\n            //finds[0] -> 'o', finds[1] -> 'x'\n            int finds[2] = {0, };\n            for (int i = 0; i < sizeof(table) / sizeof(int[3]); ++i)\n            {\n                bool findEmpty = false;\n                chess = 0xff;\n                int j;\n                for (j = 0; j < 3; ++j)\n                    if (_board[table[i][j]] == empty && !findEmpty)\n                        findEmpty = true;\n                    else\n                        chess &= _board[table[i][j]];\n                if ((chess == o || chess == x) && findEmpty)\n                {\n                    isFind = true;        \n                    if (o == chess)\n                        ++finds[0];\n                    else\n                        ++finds[1];\n                }\n            }\n            if (finds[0] > 1 && finds[1] < 1)\n                //2 'o' has been founded twice in row, column or diagonal direction\n                state = -(INFINITY / 2) * finds[0];\n            else if (finds[1] > 1 && finds[0] < 1)\n                //2 'x' has been founded twice in row, column or diagonal direction\n                state = INFINITY / 2 * finds[1];\n            else\n                //need to search more.\n                state = INPROGRESS;\n        }\n    }\n    return state;\n}\n```\n\n最后附上源码：[http://files.cnblogs.com/chinese-zmm/Tic-Tac-Toe.7z](http://files.cnblogs.com/chinese-zmm/Tic-Tac-Toe.7z)\n\n#Reference\n\n[http://en.wikipedia.org/wiki/Minimax](http://en.wikipedia.org/wiki/Minimax)\n\n[http://www.cnblogs.com/goodness/archive/2010/05/27/1745756.html](http://www.cnblogs.com/goodness/archive/2010/05/27/1745756.html)","source":"_posts/极大极小博弈树的简洁（附Tic-Tac-Toe源码）.md","raw":"---\ntitle: 极大极小博弈树的简介（附Tic-Tac-Toe源码）\ntags: []\ndate: 2011-01-26 21:46:00\n---\n\n#简介\n\n极大极小博弈树([Minimax Game Tree](http://en.wikipedia.org/wiki/Minimax))用于编写电脑之间的游戏程序，这类程序由两个游戏者轮流，每次执行一个步骤。当然，所有可能的步骤构成了一个树的结构。例如下面的图就是一个MGT，它表示了[Tic-Tac-Toe](http://en.wikipedia.org/wiki/Tic-tac-toe)游戏的前两步所有可能的步骤。\n\n![](http://www.aihorizon.com/images/essays/minimax-tictac.gif)\n\n在每一层中的节点通常代表不同游戏者的选择，这两个游戏者通常被称作马克思（MAX）和米恩（Min）。\n\n例如如果第二层是Max turn，则第三层就是Min turn，第二层的每个节点就是Max的choice，它们之间是或的关系，第三层的每个节点就是Min的choice，它们之间是与的关系。根据这个树，Max要做出的选择就让下次Min做出的任意选择都最小，即Minimax这个词的含义，极小化对手的最大收益。所以它不同于[Maximin](http://en.wikipedia.org/wiki/Minimax#Maximin)最大化自己的收益。\n\n因为往往一局要下到最后才能分出胜负，而[Game Tree](http://en.wikipedia.org/wiki/Game_tree)上nodes的增长是以指数方式的，比如深蓝（Deep Blue）可以搜索12步，假设各方每步都有10种选择，那么一次的搜索量也有1万亿次，所以对于普通的电脑能够搜索到4步也有1万次了，所以就需要一个评分系统，对局面进行打分，考虑到是双人对战，则评分从负无穷到正无穷。所以马克思就是要找到一个最大的分数，而米恩就是要找到一个最小的分数。\n\n#例子\n\n下面用一个例子来说明，Tic-Tac-Toe游戏。\n\n其中&lsquo;o&rsquo;代表PC，&lsquo;x&rsquo;代表玩家。\n\n其中有三个主要的函数：\n\nint minSearch( char _board[9] ) \n\nint maxSearch( char _board[9] )\n\nint gameState(char _board[9])\n\n分别扮演max和min的角色，寻找最大和最小值，以及一个评分函数。\n\n下面重点说说这个游戏的核心部分，gameState评分函数：\n\n连三&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 100分\n\n双连二&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 50分\n\n平局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0分\n\n不分胜负&nbsp;&nbsp;&nbsp;&nbsp; 1\n\n其中如果评分时不分胜负则还会继续搜索，直到找到其他三种状态。\n\n```cpp\nint gameState(char _board[9])\n{\n    int state;\n    static int table[][3] = \n    {\n        {0, 1, 2},\n        {3, 4, 5},\n        {6, 7, 8},\n        {0, 3, 6},\n        {1, 4, 7},\n        {2, 5, 8},\n        {0, 4, 8},\n        {2, 4, 6},\n    };\n    char chess = _board[0];\n    for (char i = 1; i < 9; ++i)\n    {\n        chess &= _board[i];\n    }\n    bool isFull = 0 != chess;\n    bool isFind = false;\n    for (int i = 0; i < sizeof(table) / sizeof(int[3]); ++i)\n    {\n        chess = _board[table[i][0]];\n        int j;\n        for (j = 1; j < 3; ++j)\n            if (_board[table[i][j]] != chess)\n                break;\n        if (chess != empty && j == 3)\n        {\n            isFind = true;        \n            break;\n        }\n    }\n    if (isFind)\n        //got win or lose\n        state = chess == o ? WIN : LOSE;\n    else\n    {\n        if (isFull)\n            //all position has been set without win or lose\n            return DRAW;\n        else\n        {\n            //finds[0] -> 'o', finds[1] -> 'x'\n            int finds[2] = {0, };\n            for (int i = 0; i < sizeof(table) / sizeof(int[3]); ++i)\n            {\n                bool findEmpty = false;\n                chess = 0xff;\n                int j;\n                for (j = 0; j < 3; ++j)\n                    if (_board[table[i][j]] == empty && !findEmpty)\n                        findEmpty = true;\n                    else\n                        chess &= _board[table[i][j]];\n                if ((chess == o || chess == x) && findEmpty)\n                {\n                    isFind = true;        \n                    if (o == chess)\n                        ++finds[0];\n                    else\n                        ++finds[1];\n                }\n            }\n            if (finds[0] > 1 && finds[1] < 1)\n                //2 'o' has been founded twice in row, column or diagonal direction\n                state = -(INFINITY / 2) * finds[0];\n            else if (finds[1] > 1 && finds[0] < 1)\n                //2 'x' has been founded twice in row, column or diagonal direction\n                state = INFINITY / 2 * finds[1];\n            else\n                //need to search more.\n                state = INPROGRESS;\n        }\n    }\n    return state;\n}\n```\n\n最后附上源码：[http://files.cnblogs.com/chinese-zmm/Tic-Tac-Toe.7z](http://files.cnblogs.com/chinese-zmm/Tic-Tac-Toe.7z)\n\n#Reference\n\n[http://en.wikipedia.org/wiki/Minimax](http://en.wikipedia.org/wiki/Minimax)\n\n[http://www.cnblogs.com/goodness/archive/2010/05/27/1745756.html](http://www.cnblogs.com/goodness/archive/2010/05/27/1745756.html)","slug":"极大极小博弈树的简洁（附Tic-Tac-Toe源码）","published":1,"updated":"2019-02-20T14:04:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsd9siik0002kszs5lzq9qc4","content":"<p>#简介</p>\n<p>极大极小博弈树(<a href=\"http://en.wikipedia.org/wiki/Minimax\" target=\"_blank\" rel=\"noopener\">Minimax Game Tree</a>)用于编写电脑之间的游戏程序，这类程序由两个游戏者轮流，每次执行一个步骤。当然，所有可能的步骤构成了一个树的结构。例如下面的图就是一个MGT，它表示了<a href=\"http://en.wikipedia.org/wiki/Tic-tac-toe\" target=\"_blank\" rel=\"noopener\">Tic-Tac-Toe</a>游戏的前两步所有可能的步骤。</p>\n<p><img src=\"http://www.aihorizon.com/images/essays/minimax-tictac.gif\" alt></p>\n<p>在每一层中的节点通常代表不同游戏者的选择，这两个游戏者通常被称作马克思（MAX）和米恩（Min）。</p>\n<p>例如如果第二层是Max turn，则第三层就是Min turn，第二层的每个节点就是Max的choice，它们之间是或的关系，第三层的每个节点就是Min的choice，它们之间是与的关系。根据这个树，Max要做出的选择就让下次Min做出的任意选择都最小，即Minimax这个词的含义，极小化对手的最大收益。所以它不同于<a href=\"http://en.wikipedia.org/wiki/Minimax#Maximin\" target=\"_blank\" rel=\"noopener\">Maximin</a>最大化自己的收益。</p>\n<p>因为往往一局要下到最后才能分出胜负，而<a href=\"http://en.wikipedia.org/wiki/Game_tree\" target=\"_blank\" rel=\"noopener\">Game Tree</a>上nodes的增长是以指数方式的，比如深蓝（Deep Blue）可以搜索12步，假设各方每步都有10种选择，那么一次的搜索量也有1万亿次，所以对于普通的电脑能够搜索到4步也有1万次了，所以就需要一个评分系统，对局面进行打分，考虑到是双人对战，则评分从负无穷到正无穷。所以马克思就是要找到一个最大的分数，而米恩就是要找到一个最小的分数。</p>\n<p>#例子</p>\n<p>下面用一个例子来说明，Tic-Tac-Toe游戏。</p>\n<p>其中&lsquo;o&rsquo;代表PC，&lsquo;x&rsquo;代表玩家。</p>\n<p>其中有三个主要的函数：</p>\n<p>int minSearch( char _board[9] ) </p>\n<p>int maxSearch( char _board[9] )</p>\n<p>int gameState(char _board[9])</p>\n<p>分别扮演max和min的角色，寻找最大和最小值，以及一个评分函数。</p>\n<p>下面重点说说这个游戏的核心部分，gameState评分函数：</p>\n<p>连三&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 100分</p>\n<p>双连二&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 50分</p>\n<p>平局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0分</p>\n<p>不分胜负&nbsp;&nbsp;&nbsp;&nbsp; 1</p>\n<p>其中如果评分时不分胜负则还会继续搜索，直到找到其他三种状态。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gameState</span><span class=\"params\">(<span class=\"keyword\">char</span> _board[<span class=\"number\">9</span>])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> table[][<span class=\"number\">3</span>] = </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chess = _board[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        chess &amp;= _board[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isFull = <span class=\"number\">0</span> != chess;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isFind = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(table) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>[<span class=\"number\">3</span>]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        chess = _board[table[i][<span class=\"number\">0</span>]];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">3</span>; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_board[table[i][j]] != chess)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chess != empty &amp;&amp; j == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            isFind = <span class=\"literal\">true</span>;        </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFind)</span><br><span class=\"line\">        <span class=\"comment\">//got win or lose</span></span><br><span class=\"line\">        state = chess == o ? WIN : LOSE;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull)</span><br><span class=\"line\">            <span class=\"comment\">//all position has been set without win or lose</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> DRAW;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//finds[0] -&gt; 'o', finds[1] -&gt; 'x'</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> finds[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(table) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>[<span class=\"number\">3</span>]); ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">bool</span> findEmpty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                chess = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (_board[table[i][j]] == empty &amp;&amp; !findEmpty)</span><br><span class=\"line\">                        findEmpty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        chess &amp;= _board[table[i][j]];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((chess == o || chess == x) &amp;&amp; findEmpty)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    isFind = <span class=\"literal\">true</span>;        </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (o == chess)</span><br><span class=\"line\">                        ++finds[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ++finds[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finds[<span class=\"number\">0</span>] &gt; <span class=\"number\">1</span> &amp;&amp; finds[<span class=\"number\">1</span>] &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">//2 'o' has been founded twice in row, column or diagonal direction</span></span><br><span class=\"line\">                state = -(INFINITY / <span class=\"number\">2</span>) * finds[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (finds[<span class=\"number\">1</span>] &gt; <span class=\"number\">1</span> &amp;&amp; finds[<span class=\"number\">0</span>] &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">//2 'x' has been founded twice in row, column or diagonal direction</span></span><br><span class=\"line\">                state = INFINITY / <span class=\"number\">2</span> * finds[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"comment\">//need to search more.</span></span><br><span class=\"line\">                state = INPROGRESS;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后附上源码：<a href=\"http://files.cnblogs.com/chinese-zmm/Tic-Tac-Toe.7z\" target=\"_blank\" rel=\"noopener\">http://files.cnblogs.com/chinese-zmm/Tic-Tac-Toe.7z</a></p>\n<p>#Reference</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Minimax\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/Minimax</a></p>\n<p><a href=\"http://www.cnblogs.com/goodness/archive/2010/05/27/1745756.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/goodness/archive/2010/05/27/1745756.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#简介</p>\n<p>极大极小博弈树(<a href=\"http://en.wikipedia.org/wiki/Minimax\" target=\"_blank\" rel=\"noopener\">Minimax Game Tree</a>)用于编写电脑之间的游戏程序，这类程序由两个游戏者轮流，每次执行一个步骤。当然，所有可能的步骤构成了一个树的结构。例如下面的图就是一个MGT，它表示了<a href=\"http://en.wikipedia.org/wiki/Tic-tac-toe\" target=\"_blank\" rel=\"noopener\">Tic-Tac-Toe</a>游戏的前两步所有可能的步骤。</p>\n<p><img src=\"http://www.aihorizon.com/images/essays/minimax-tictac.gif\" alt></p>\n<p>在每一层中的节点通常代表不同游戏者的选择，这两个游戏者通常被称作马克思（MAX）和米恩（Min）。</p>\n<p>例如如果第二层是Max turn，则第三层就是Min turn，第二层的每个节点就是Max的choice，它们之间是或的关系，第三层的每个节点就是Min的choice，它们之间是与的关系。根据这个树，Max要做出的选择就让下次Min做出的任意选择都最小，即Minimax这个词的含义，极小化对手的最大收益。所以它不同于<a href=\"http://en.wikipedia.org/wiki/Minimax#Maximin\" target=\"_blank\" rel=\"noopener\">Maximin</a>最大化自己的收益。</p>\n<p>因为往往一局要下到最后才能分出胜负，而<a href=\"http://en.wikipedia.org/wiki/Game_tree\" target=\"_blank\" rel=\"noopener\">Game Tree</a>上nodes的增长是以指数方式的，比如深蓝（Deep Blue）可以搜索12步，假设各方每步都有10种选择，那么一次的搜索量也有1万亿次，所以对于普通的电脑能够搜索到4步也有1万次了，所以就需要一个评分系统，对局面进行打分，考虑到是双人对战，则评分从负无穷到正无穷。所以马克思就是要找到一个最大的分数，而米恩就是要找到一个最小的分数。</p>\n<p>#例子</p>\n<p>下面用一个例子来说明，Tic-Tac-Toe游戏。</p>\n<p>其中&lsquo;o&rsquo;代表PC，&lsquo;x&rsquo;代表玩家。</p>\n<p>其中有三个主要的函数：</p>\n<p>int minSearch( char _board[9] ) </p>\n<p>int maxSearch( char _board[9] )</p>\n<p>int gameState(char _board[9])</p>\n<p>分别扮演max和min的角色，寻找最大和最小值，以及一个评分函数。</p>\n<p>下面重点说说这个游戏的核心部分，gameState评分函数：</p>\n<p>连三&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 100分</p>\n<p>双连二&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 50分</p>\n<p>平局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0分</p>\n<p>不分胜负&nbsp;&nbsp;&nbsp;&nbsp; 1</p>\n<p>其中如果评分时不分胜负则还会继续搜索，直到找到其他三种状态。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gameState</span><span class=\"params\">(<span class=\"keyword\">char</span> _board[<span class=\"number\">9</span>])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> state;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> table[][<span class=\"number\">3</span>] = </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chess = _board[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        chess &amp;= _board[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isFull = <span class=\"number\">0</span> != chess;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isFind = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(table) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>[<span class=\"number\">3</span>]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        chess = _board[table[i][<span class=\"number\">0</span>]];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">3</span>; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_board[table[i][j]] != chess)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chess != empty &amp;&amp; j == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            isFind = <span class=\"literal\">true</span>;        </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFind)</span><br><span class=\"line\">        <span class=\"comment\">//got win or lose</span></span><br><span class=\"line\">        state = chess == o ? WIN : LOSE;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull)</span><br><span class=\"line\">            <span class=\"comment\">//all position has been set without win or lose</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> DRAW;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//finds[0] -&gt; 'o', finds[1] -&gt; 'x'</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> finds[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>, &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">sizeof</span>(table) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>[<span class=\"number\">3</span>]); ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">bool</span> findEmpty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                chess = <span class=\"number\">0xff</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (_board[table[i][j]] == empty &amp;&amp; !findEmpty)</span><br><span class=\"line\">                        findEmpty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        chess &amp;= _board[table[i][j]];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((chess == o || chess == x) &amp;&amp; findEmpty)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    isFind = <span class=\"literal\">true</span>;        </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (o == chess)</span><br><span class=\"line\">                        ++finds[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        ++finds[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finds[<span class=\"number\">0</span>] &gt; <span class=\"number\">1</span> &amp;&amp; finds[<span class=\"number\">1</span>] &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">//2 'o' has been founded twice in row, column or diagonal direction</span></span><br><span class=\"line\">                state = -(INFINITY / <span class=\"number\">2</span>) * finds[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (finds[<span class=\"number\">1</span>] &gt; <span class=\"number\">1</span> &amp;&amp; finds[<span class=\"number\">0</span>] &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\">//2 'x' has been founded twice in row, column or diagonal direction</span></span><br><span class=\"line\">                state = INFINITY / <span class=\"number\">2</span> * finds[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"comment\">//need to search more.</span></span><br><span class=\"line\">                state = INPROGRESS;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后附上源码：<a href=\"http://files.cnblogs.com/chinese-zmm/Tic-Tac-Toe.7z\" target=\"_blank\" rel=\"noopener\">http://files.cnblogs.com/chinese-zmm/Tic-Tac-Toe.7z</a></p>\n<p>#Reference</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Minimax\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/Minimax</a></p>\n<p><a href=\"http://www.cnblogs.com/goodness/archive/2010/05/27/1745756.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/goodness/archive/2010/05/27/1745756.html</a></p>\n"},{"title":"简述FPS的计算方法","date":"2010-02-04T07:05:00.000Z","_content":"**FPS**是Frame per second的缩写,即每秒的帧数.这一术语广泛的应用于计算机图形学，视频采集，游戏等。\n\n这里主要介绍一下视频游戏中的帧率，第一个First person shooter game的帧率只有大概6FPS，但是依然很成功。不过随着硬件设备，尤其是显卡性能的加强，现在游戏的帧率一般在30FPS~100FPS之间。由于每帧图像所消耗的时间不一样，造成帧率是在不断变化的，所以每个游戏都会设定一个最大的帧率，以保证平滑的切换。\n\n下面就以一段QT中的代码介绍一下帧率的计算。\n\n```cpp\n// Timing...  \nstatic QTime time;  \nstaticint frames =0;  \nstaticbool started =false;  \n  \nif (!started || time.elapsed() >1000) {  \n     qreal fps = frames * 1000. / time.elapsed();  \n     if (fps ==0)  \n           m_current_fps =\"counting fps...\";  \n     else  \n           m_current_fps = QString::fromLatin1(\"%3 FPS\").arg((int) qRound(fps));  \n  \n     time.start();  \n     started =true;  \n     frames =0;  \n  \n     } else {  \n          ++frames;  \n  \n          p.setOpacity(1);  \n          p.setFont(QFont(\"times\", 30));  \n          p.fillRect(5, height() -40, 250, 40, Qt::white);  \n          p.drawText(10, height() -8, m_current_fps);  \n     }  \n}\n```\n\n由于一般实时的游戏都已一个定时器不断地刷新画面，所以每一帧的输出都是通过paintEvent来完成的。将上面这段代码放入paintEvent就可以统计出每秒的帧率。\n\n那么怎么控制最大的帧率呢？\n\n其实也很简单，就是通过设置定时器的interval来完成的，考虑到现在显示器的显示频率一般在60HZ，所以interval一般设置为1000/60ms 比较好，即60FPS是一个理论上最大的帧率。\n\n","source":"_posts/简述FPS的计算方法.md","raw":"---\ntitle: 简述FPS的计算方法\ntags: []\ndate: 2010-02-04 15:05:00\n---\n**FPS**是Frame per second的缩写,即每秒的帧数.这一术语广泛的应用于计算机图形学，视频采集，游戏等。\n\n这里主要介绍一下视频游戏中的帧率，第一个First person shooter game的帧率只有大概6FPS，但是依然很成功。不过随着硬件设备，尤其是显卡性能的加强，现在游戏的帧率一般在30FPS~100FPS之间。由于每帧图像所消耗的时间不一样，造成帧率是在不断变化的，所以每个游戏都会设定一个最大的帧率，以保证平滑的切换。\n\n下面就以一段QT中的代码介绍一下帧率的计算。\n\n```cpp\n// Timing...  \nstatic QTime time;  \nstaticint frames =0;  \nstaticbool started =false;  \n  \nif (!started || time.elapsed() >1000) {  \n     qreal fps = frames * 1000. / time.elapsed();  \n     if (fps ==0)  \n           m_current_fps =\"counting fps...\";  \n     else  \n           m_current_fps = QString::fromLatin1(\"%3 FPS\").arg((int) qRound(fps));  \n  \n     time.start();  \n     started =true;  \n     frames =0;  \n  \n     } else {  \n          ++frames;  \n  \n          p.setOpacity(1);  \n          p.setFont(QFont(\"times\", 30));  \n          p.fillRect(5, height() -40, 250, 40, Qt::white);  \n          p.drawText(10, height() -8, m_current_fps);  \n     }  \n}\n```\n\n由于一般实时的游戏都已一个定时器不断地刷新画面，所以每一帧的输出都是通过paintEvent来完成的。将上面这段代码放入paintEvent就可以统计出每秒的帧率。\n\n那么怎么控制最大的帧率呢？\n\n其实也很简单，就是通过设置定时器的interval来完成的，考虑到现在显示器的显示频率一般在60HZ，所以interval一般设置为1000/60ms 比较好，即60FPS是一个理论上最大的帧率。\n\n","slug":"简述FPS的计算方法","published":1,"updated":"2019-02-20T13:24:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsd9siil0003kszsh4pr1dix","content":"<p><strong>FPS</strong>是Frame per second的缩写,即每秒的帧数.这一术语广泛的应用于计算机图形学，视频采集，游戏等。</p>\n<p>这里主要介绍一下视频游戏中的帧率，第一个First person shooter game的帧率只有大概6FPS，但是依然很成功。不过随着硬件设备，尤其是显卡性能的加强，现在游戏的帧率一般在30FPS~100FPS之间。由于每帧图像所消耗的时间不一样，造成帧率是在不断变化的，所以每个游戏都会设定一个最大的帧率，以保证平滑的切换。</p>\n<p>下面就以一段QT中的代码介绍一下帧率的计算。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Timing...  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> QTime time;  </span><br><span class=\"line\">staticint frames =<span class=\"number\">0</span>;  </span><br><span class=\"line\">staticbool started =<span class=\"literal\">false</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!started || time.elapsed() &gt;<span class=\"number\">1000</span>) &#123;  </span><br><span class=\"line\">     qreal fps = frames * <span class=\"number\">1000.</span> / time.elapsed();  </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (fps ==<span class=\"number\">0</span>)  </span><br><span class=\"line\">           m_current_fps =<span class=\"string\">\"counting fps...\"</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">else</span>  </span><br><span class=\"line\">           m_current_fps = QString::fromLatin1(<span class=\"string\">\"%3 FPS\"</span>).arg((<span class=\"keyword\">int</span>) qRound(fps));  </span><br><span class=\"line\">  </span><br><span class=\"line\">     time.start();  </span><br><span class=\"line\">     started =<span class=\"literal\">true</span>;  </span><br><span class=\"line\">     frames =<span class=\"number\">0</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">          ++frames;  </span><br><span class=\"line\">  </span><br><span class=\"line\">          p.setOpacity(<span class=\"number\">1</span>);  </span><br><span class=\"line\">          p.setFont(QFont(<span class=\"string\">\"times\"</span>, <span class=\"number\">30</span>));  </span><br><span class=\"line\">          p.fillRect(<span class=\"number\">5</span>, height() <span class=\"number\">-40</span>, <span class=\"number\">250</span>, <span class=\"number\">40</span>, Qt::white);  </span><br><span class=\"line\">          p.drawText(<span class=\"number\">10</span>, height() <span class=\"number\">-8</span>, m_current_fps);  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于一般实时的游戏都已一个定时器不断地刷新画面，所以每一帧的输出都是通过paintEvent来完成的。将上面这段代码放入paintEvent就可以统计出每秒的帧率。</p>\n<p>那么怎么控制最大的帧率呢？</p>\n<p>其实也很简单，就是通过设置定时器的interval来完成的，考虑到现在显示器的显示频率一般在60HZ，所以interval一般设置为1000/60ms 比较好，即60FPS是一个理论上最大的帧率。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>FPS</strong>是Frame per second的缩写,即每秒的帧数.这一术语广泛的应用于计算机图形学，视频采集，游戏等。</p>\n<p>这里主要介绍一下视频游戏中的帧率，第一个First person shooter game的帧率只有大概6FPS，但是依然很成功。不过随着硬件设备，尤其是显卡性能的加强，现在游戏的帧率一般在30FPS~100FPS之间。由于每帧图像所消耗的时间不一样，造成帧率是在不断变化的，所以每个游戏都会设定一个最大的帧率，以保证平滑的切换。</p>\n<p>下面就以一段QT中的代码介绍一下帧率的计算。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Timing...  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> QTime time;  </span><br><span class=\"line\">staticint frames =<span class=\"number\">0</span>;  </span><br><span class=\"line\">staticbool started =<span class=\"literal\">false</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!started || time.elapsed() &gt;<span class=\"number\">1000</span>) &#123;  </span><br><span class=\"line\">     qreal fps = frames * <span class=\"number\">1000.</span> / time.elapsed();  </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (fps ==<span class=\"number\">0</span>)  </span><br><span class=\"line\">           m_current_fps =<span class=\"string\">\"counting fps...\"</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">else</span>  </span><br><span class=\"line\">           m_current_fps = QString::fromLatin1(<span class=\"string\">\"%3 FPS\"</span>).arg((<span class=\"keyword\">int</span>) qRound(fps));  </span><br><span class=\"line\">  </span><br><span class=\"line\">     time.start();  </span><br><span class=\"line\">     started =<span class=\"literal\">true</span>;  </span><br><span class=\"line\">     frames =<span class=\"number\">0</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">          ++frames;  </span><br><span class=\"line\">  </span><br><span class=\"line\">          p.setOpacity(<span class=\"number\">1</span>);  </span><br><span class=\"line\">          p.setFont(QFont(<span class=\"string\">\"times\"</span>, <span class=\"number\">30</span>));  </span><br><span class=\"line\">          p.fillRect(<span class=\"number\">5</span>, height() <span class=\"number\">-40</span>, <span class=\"number\">250</span>, <span class=\"number\">40</span>, Qt::white);  </span><br><span class=\"line\">          p.drawText(<span class=\"number\">10</span>, height() <span class=\"number\">-8</span>, m_current_fps);  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于一般实时的游戏都已一个定时器不断地刷新画面，所以每一帧的输出都是通过paintEvent来完成的。将上面这段代码放入paintEvent就可以统计出每秒的帧率。</p>\n<p>那么怎么控制最大的帧率呢？</p>\n<p>其实也很简单，就是通过设置定时器的interval来完成的，考虑到现在显示器的显示频率一般在60HZ，所以interval一般设置为1000/60ms 比较好，即60FPS是一个理论上最大的帧率。</p>\n"},{"title":"Tiled 地图编辑器分析（QT平台）","date":"2010-08-21T01:16:00.000Z","_content":"\nTiled 是一款地图编辑软件，它的网址是：[http://www.mapeditor.org/](http://www.mapeditor.org/)（ 不过好像要用代理才能访问）。Wiki的网址是：[http://sourceforge.net/apps/mediawiki/tiled/index.php?title=Main_Page](http://sourceforge.net/apps/mediawiki/tiled/index.php?title=Main_Page \"Main_Page\")。它的上一版是用Jave实现，有兴趣的也可以去看一下。\n\n&nbsp;\n\n## Tiled现在包含的功能有：\n\n1.  **<font color=\"#000080\">General purpose tile map editor with XML-based map format</font>**  <li>Supports orthogonal and isometric maps  <li>Custom objects can be placed with pixel precision  <li>**<font color=\"#000080\">Full undo/redo and copy/paste support</font>**  <li>Add custom properties to tiles, layers, objects or the map  <li>Automatically reloads tilesets when changed externally  <li>Resize or offset your tile map later as needed  <li>Efficient tile editing tools like stamp and fill brushes  <li>Supports input/output plugins to open and save files in custom formats \n\n本文将重点描述Tiled的整体结构，以及1, 4功能的实现（本文分析的是它的0.1版）。\n\n&nbsp;\n\n## 开发环境的搭建\n\n首先从[http://sourceforge.net/projects/tiled/](http://sourceforge.net/projects/tiled/) 上下载最新的源码。\n\n用[Qt Creator](http://qt.nokia.com/products/developer-tools)打开源码中的pro文件。\n\n下载zlib库，地址：[http://www.zlib.net/](http://www.zlib.net/)。\n\n打开src下面的**src.pro**, 加入对zlib的引用：\n > INCLUDEPATH += \"D:\\Program Files\\GnuWin32\\include\"  <p>LIBS += -L\"D:\\Program Files\\GnuWin32\\lib\" \\\n> &nbsp;&nbsp;&nbsp; -lzlib \n\n点击build，泡杯茶回来便可看到程序的运行画面了，如下所示：  <p>[![tiled_shotsnap](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_shotsnap_thumb.png \"tiled_shotsnap\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_shotsnap_2.png)  <p>**Note：**源代码所在文件夹的路径中不能出现中文，否则编译会出错。\n\nTiled的使用说明可以参考如下两篇文章：\n\n[http://silveiraneto.net/2009/01/11/game-map-edition-using-tiled/](http://silveiraneto.net/2009/01/11/game-map-edition-using-tiled/)\n\n[http://www.raywenderlich.com/1163/how-to-make-a-tile-based-game-with-cocos2d](http://www.raywenderlich.com/1163/how-to-make-a-tile-based-game-with-cocos2d)\n\n&nbsp;\n\n## 整体结构的介绍\n\nQT窗口的结构如下所示\n\n[![tiled_view_struct](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_view_struct_thumb.png \"tiled_view_struct\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_view_struct_2.png) \n\n先说左边三个窗口：\n\n层管理窗口：可以把层次分类进行管理，如建筑物和植物可以定义到不同的层次。\n\n历史管理窗口：可以查看和撤销之前的操作。\n\n色块管理窗口：显示外界导入的tileset，可以添加到客户区中。\n\n这三个窗口利用QT的QDockWidget实现，所以默认具有停靠，移动的功能。\n\n&nbsp;\n\n再说左边的客户区，可以编辑map，这块是利用QT的GraphicsView图形引擎完成的，关于GraphicsView的介绍可以参考：\n\n[http://doc.qt.nokia.com/4.6/graphicsview.html](http://doc.qt.nokia.com/4.6/graphicsview.html)，对应到代码中就是MapView。\n\n&nbsp;\n\n下面看一下MainWindow类是如何管理这几个窗口的。\n\n[![Creek](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/TiledQT_EC02/Creek_thumb.jpg \"Creek\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/TiledQT_EC02/Creek_2.jpg)","source":"_posts/Tiled-地图编辑器分析（QT平台）.md","raw":"---\ntitle: Tiled 地图编辑器分析（QT平台）\ntags: []\ndate: 2010-08-21 09:16:00\n---\n\nTiled 是一款地图编辑软件，它的网址是：[http://www.mapeditor.org/](http://www.mapeditor.org/)（ 不过好像要用代理才能访问）。Wiki的网址是：[http://sourceforge.net/apps/mediawiki/tiled/index.php?title=Main_Page](http://sourceforge.net/apps/mediawiki/tiled/index.php?title=Main_Page \"Main_Page\")。它的上一版是用Jave实现，有兴趣的也可以去看一下。\n\n&nbsp;\n\n## Tiled现在包含的功能有：\n\n1.  **<font color=\"#000080\">General purpose tile map editor with XML-based map format</font>**  <li>Supports orthogonal and isometric maps  <li>Custom objects can be placed with pixel precision  <li>**<font color=\"#000080\">Full undo/redo and copy/paste support</font>**  <li>Add custom properties to tiles, layers, objects or the map  <li>Automatically reloads tilesets when changed externally  <li>Resize or offset your tile map later as needed  <li>Efficient tile editing tools like stamp and fill brushes  <li>Supports input/output plugins to open and save files in custom formats \n\n本文将重点描述Tiled的整体结构，以及1, 4功能的实现（本文分析的是它的0.1版）。\n\n&nbsp;\n\n## 开发环境的搭建\n\n首先从[http://sourceforge.net/projects/tiled/](http://sourceforge.net/projects/tiled/) 上下载最新的源码。\n\n用[Qt Creator](http://qt.nokia.com/products/developer-tools)打开源码中的pro文件。\n\n下载zlib库，地址：[http://www.zlib.net/](http://www.zlib.net/)。\n\n打开src下面的**src.pro**, 加入对zlib的引用：\n > INCLUDEPATH += \"D:\\Program Files\\GnuWin32\\include\"  <p>LIBS += -L\"D:\\Program Files\\GnuWin32\\lib\" \\\n> &nbsp;&nbsp;&nbsp; -lzlib \n\n点击build，泡杯茶回来便可看到程序的运行画面了，如下所示：  <p>[![tiled_shotsnap](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_shotsnap_thumb.png \"tiled_shotsnap\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_shotsnap_2.png)  <p>**Note：**源代码所在文件夹的路径中不能出现中文，否则编译会出错。\n\nTiled的使用说明可以参考如下两篇文章：\n\n[http://silveiraneto.net/2009/01/11/game-map-edition-using-tiled/](http://silveiraneto.net/2009/01/11/game-map-edition-using-tiled/)\n\n[http://www.raywenderlich.com/1163/how-to-make-a-tile-based-game-with-cocos2d](http://www.raywenderlich.com/1163/how-to-make-a-tile-based-game-with-cocos2d)\n\n&nbsp;\n\n## 整体结构的介绍\n\nQT窗口的结构如下所示\n\n[![tiled_view_struct](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_view_struct_thumb.png \"tiled_view_struct\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_view_struct_2.png) \n\n先说左边三个窗口：\n\n层管理窗口：可以把层次分类进行管理，如建筑物和植物可以定义到不同的层次。\n\n历史管理窗口：可以查看和撤销之前的操作。\n\n色块管理窗口：显示外界导入的tileset，可以添加到客户区中。\n\n这三个窗口利用QT的QDockWidget实现，所以默认具有停靠，移动的功能。\n\n&nbsp;\n\n再说左边的客户区，可以编辑map，这块是利用QT的GraphicsView图形引擎完成的，关于GraphicsView的介绍可以参考：\n\n[http://doc.qt.nokia.com/4.6/graphicsview.html](http://doc.qt.nokia.com/4.6/graphicsview.html)，对应到代码中就是MapView。\n\n&nbsp;\n\n下面看一下MainWindow类是如何管理这几个窗口的。\n\n[![Creek](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/TiledQT_EC02/Creek_thumb.jpg \"Creek\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/TiledQT_EC02/Creek_2.jpg)","slug":"Tiled-地图编辑器分析（QT平台）","published":1,"updated":"2019-02-16T13:03:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjserb4pj0000a7fyuy8qkemp","content":"<p>Tiled 是一款地图编辑软件，它的网址是：<a href=\"http://www.mapeditor.org/\" target=\"_blank\" rel=\"noopener\">http://www.mapeditor.org/</a>（ 不过好像要用代理才能访问）。Wiki的网址是：<a href=\"http://sourceforge.net/apps/mediawiki/tiled/index.php?title=Main_Page\" title=\"Main_Page\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/apps/mediawiki/tiled/index.php?title=Main_Page</a>。它的上一版是用Jave实现，有兴趣的也可以去看一下。</p>\n<p>&nbsp;</p>\n<h2 id=\"Tiled现在包含的功能有：\"><a href=\"#Tiled现在包含的功能有：\" class=\"headerlink\" title=\"Tiled现在包含的功能有：\"></a>Tiled现在包含的功能有：</h2><ol>\n<li><strong><font color=\"#000080\">General purpose tile map editor with XML-based map format</font></strong>  </li><li>Supports orthogonal and isometric maps  </li><li>Custom objects can be placed with pixel precision  </li><li><strong><font color=\"#000080\">Full undo/redo and copy/paste support</font></strong>  </li><li>Add custom properties to tiles, layers, objects or the map  </li><li>Automatically reloads tilesets when changed externally  </li><li>Resize or offset your tile map later as needed  </li><li>Efficient tile editing tools like stamp and fill brushes  </li><li>Supports input/output plugins to open and save files in custom formats </li>\n</ol>\n<p>本文将重点描述Tiled的整体结构，以及1, 4功能的实现（本文分析的是它的0.1版）。</p>\n<p>&nbsp;</p>\n<h2 id=\"开发环境的搭建\"><a href=\"#开发环境的搭建\" class=\"headerlink\" title=\"开发环境的搭建\"></a>开发环境的搭建</h2><p>首先从<a href=\"http://sourceforge.net/projects/tiled/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/tiled/</a> 上下载最新的源码。</p>\n<p>用<a href=\"http://qt.nokia.com/products/developer-tools\" target=\"_blank\" rel=\"noopener\">Qt Creator</a>打开源码中的pro文件。</p>\n<p>下载zlib库，地址：<a href=\"http://www.zlib.net/\" target=\"_blank\" rel=\"noopener\">http://www.zlib.net/</a>。</p>\n<p>打开src下面的<strong>src.pro</strong>, 加入对zlib的引用：</p>\n<blockquote>\n<p>INCLUDEPATH += “D:\\Program Files\\GnuWin32\\include”  </p><p>LIBS += -L”D:\\Program Files\\GnuWin32\\lib” \\<br>&nbsp;&nbsp;&nbsp; -lzlib </p>\n</blockquote>\n<p>点击build，泡杯茶回来便可看到程序的运行画面了，如下所示：  </p><p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_shotsnap_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_shotsnap_thumb.png\" alt=\"tiled_shotsnap\" title=\"tiled_shotsnap\"></a>  </p><p><strong>Note：</strong>源代码所在文件夹的路径中不能出现中文，否则编译会出错。</p>\n<p>Tiled的使用说明可以参考如下两篇文章：</p>\n<p><a href=\"http://silveiraneto.net/2009/01/11/game-map-edition-using-tiled/\" target=\"_blank\" rel=\"noopener\">http://silveiraneto.net/2009/01/11/game-map-edition-using-tiled/</a></p>\n<p><a href=\"http://www.raywenderlich.com/1163/how-to-make-a-tile-based-game-with-cocos2d\" target=\"_blank\" rel=\"noopener\">http://www.raywenderlich.com/1163/how-to-make-a-tile-based-game-with-cocos2d</a></p>\n<p>&nbsp;</p>\n<h2 id=\"整体结构的介绍\"><a href=\"#整体结构的介绍\" class=\"headerlink\" title=\"整体结构的介绍\"></a>整体结构的介绍</h2><p>QT窗口的结构如下所示</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_view_struct_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_view_struct_thumb.png\" alt=\"tiled_view_struct\" title=\"tiled_view_struct\"></a> </p>\n<p>先说左边三个窗口：</p>\n<p>层管理窗口：可以把层次分类进行管理，如建筑物和植物可以定义到不同的层次。</p>\n<p>历史管理窗口：可以查看和撤销之前的操作。</p>\n<p>色块管理窗口：显示外界导入的tileset，可以添加到客户区中。</p>\n<p>这三个窗口利用QT的QDockWidget实现，所以默认具有停靠，移动的功能。</p>\n<p>&nbsp;</p>\n<p>再说左边的客户区，可以编辑map，这块是利用QT的GraphicsView图形引擎完成的，关于GraphicsView的介绍可以参考：</p>\n<p><a href=\"http://doc.qt.nokia.com/4.6/graphicsview.html\" target=\"_blank\" rel=\"noopener\">http://doc.qt.nokia.com/4.6/graphicsview.html</a>，对应到代码中就是MapView。</p>\n<p>&nbsp;</p>\n<p>下面看一下MainWindow类是如何管理这几个窗口的。</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/TiledQT_EC02/Creek_2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/TiledQT_EC02/Creek_thumb.jpg\" alt=\"Creek\" title=\"Creek\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Tiled 是一款地图编辑软件，它的网址是：<a href=\"http://www.mapeditor.org/\" target=\"_blank\" rel=\"noopener\">http://www.mapeditor.org/</a>（ 不过好像要用代理才能访问）。Wiki的网址是：<a href=\"http://sourceforge.net/apps/mediawiki/tiled/index.php?title=Main_Page\" title=\"Main_Page\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/apps/mediawiki/tiled/index.php?title=Main_Page</a>。它的上一版是用Jave实现，有兴趣的也可以去看一下。</p>\n<p>&nbsp;</p>\n<h2 id=\"Tiled现在包含的功能有：\"><a href=\"#Tiled现在包含的功能有：\" class=\"headerlink\" title=\"Tiled现在包含的功能有：\"></a>Tiled现在包含的功能有：</h2><ol>\n<li><strong><font color=\"#000080\">General purpose tile map editor with XML-based map format</font></strong>  </li><li>Supports orthogonal and isometric maps  </li><li>Custom objects can be placed with pixel precision  </li><li><strong><font color=\"#000080\">Full undo/redo and copy/paste support</font></strong>  </li><li>Add custom properties to tiles, layers, objects or the map  </li><li>Automatically reloads tilesets when changed externally  </li><li>Resize or offset your tile map later as needed  </li><li>Efficient tile editing tools like stamp and fill brushes  </li><li>Supports input/output plugins to open and save files in custom formats </li>\n</ol>\n<p>本文将重点描述Tiled的整体结构，以及1, 4功能的实现（本文分析的是它的0.1版）。</p>\n<p>&nbsp;</p>\n<h2 id=\"开发环境的搭建\"><a href=\"#开发环境的搭建\" class=\"headerlink\" title=\"开发环境的搭建\"></a>开发环境的搭建</h2><p>首先从<a href=\"http://sourceforge.net/projects/tiled/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/tiled/</a> 上下载最新的源码。</p>\n<p>用<a href=\"http://qt.nokia.com/products/developer-tools\" target=\"_blank\" rel=\"noopener\">Qt Creator</a>打开源码中的pro文件。</p>\n<p>下载zlib库，地址：<a href=\"http://www.zlib.net/\" target=\"_blank\" rel=\"noopener\">http://www.zlib.net/</a>。</p>\n<p>打开src下面的<strong>src.pro</strong>, 加入对zlib的引用：</p>\n<blockquote>\n<p>INCLUDEPATH += “D:\\Program Files\\GnuWin32\\include”  </p><p>LIBS += -L”D:\\Program Files\\GnuWin32\\lib” \\<br>&nbsp;&nbsp;&nbsp; -lzlib </p>\n</blockquote>\n<p>点击build，泡杯茶回来便可看到程序的运行画面了，如下所示：  </p><p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_shotsnap_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_shotsnap_thumb.png\" alt=\"tiled_shotsnap\" title=\"tiled_shotsnap\"></a>  </p><p><strong>Note：</strong>源代码所在文件夹的路径中不能出现中文，否则编译会出错。</p>\n<p>Tiled的使用说明可以参考如下两篇文章：</p>\n<p><a href=\"http://silveiraneto.net/2009/01/11/game-map-edition-using-tiled/\" target=\"_blank\" rel=\"noopener\">http://silveiraneto.net/2009/01/11/game-map-edition-using-tiled/</a></p>\n<p><a href=\"http://www.raywenderlich.com/1163/how-to-make-a-tile-based-game-with-cocos2d\" target=\"_blank\" rel=\"noopener\">http://www.raywenderlich.com/1163/how-to-make-a-tile-based-game-with-cocos2d</a></p>\n<p>&nbsp;</p>\n<h2 id=\"整体结构的介绍\"><a href=\"#整体结构的介绍\" class=\"headerlink\" title=\"整体结构的介绍\"></a>整体结构的介绍</h2><p>QT窗口的结构如下所示</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_view_struct_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/Tiled_81F9/tiled_view_struct_thumb.png\" alt=\"tiled_view_struct\" title=\"tiled_view_struct\"></a> </p>\n<p>先说左边三个窗口：</p>\n<p>层管理窗口：可以把层次分类进行管理，如建筑物和植物可以定义到不同的层次。</p>\n<p>历史管理窗口：可以查看和撤销之前的操作。</p>\n<p>色块管理窗口：显示外界导入的tileset，可以添加到客户区中。</p>\n<p>这三个窗口利用QT的QDockWidget实现，所以默认具有停靠，移动的功能。</p>\n<p>&nbsp;</p>\n<p>再说左边的客户区，可以编辑map，这块是利用QT的GraphicsView图形引擎完成的，关于GraphicsView的介绍可以参考：</p>\n<p><a href=\"http://doc.qt.nokia.com/4.6/graphicsview.html\" target=\"_blank\" rel=\"noopener\">http://doc.qt.nokia.com/4.6/graphicsview.html</a>，对应到代码中就是MapView。</p>\n<p>&nbsp;</p>\n<p>下面看一下MainWindow类是如何管理这几个窗口的。</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/TiledQT_EC02/Creek_2.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/TiledQT_EC02/Creek_thumb.jpg\" alt=\"Creek\" title=\"Creek\"></a></p>\n"},{"title":"也谈线程同步变量","date":"2010-04-08T13:46:00.000Z","_content":"\n　　前段时间看了一下QT中的线程同步变量，这里谈谈我的心得，由于线程同步变量在很多系统和平台中都有涉及，所以下文将更多地从它们的共性方面去讨论。废话少说，进入正文。\n\nQT中主要提供了以下几个同步类：\n\nQMutex\n\nQSemaphore\n\nQWaitCondition\n\nQReadLocker\n\nQWriteLocker 等。\n\n下面就主要探讨一下前三个同步类。\n\n**QMutex类**的功能比较简单，主要分为**Recursive**和**N****on-Recursive**两种方式，Recursive模式即指在同一线程中可以对某个QMutex多次加锁，当然也要同等次数的解锁。而Non-Recursive即指QMutex只能被lock一次，否则视为死锁。下面重点介绍一下这两种模式的异同。\n\n　　在Recursive模式下需要记录第一次对其进行lock操作的线程id，即ownership（它的所属），如果是同一个线程，则对此Mutex再加一次锁，不会block当前的线程。如果是不同的线程，则需要block当前的线程，此外对该QMutex unlock的线程必须和lock的线程相同。\n\n　　在Non-Recursive模式下unlock的线程则不需要与lock的线程相同，在这点上有点类似于Semaphore。有的地方说Non-Recursive模式下的Mutex没有记录ownership，那么_我猜测__Non-Recursive__死锁的检测可能就是等待确定的时间，如果超过了该时间没有被解锁则判定为死锁，不知道这种猜测对不对，哪位知道的可以__share__一下_。通过查看QMutex的代码，发现QMutex版本的Mutex记录了线程的Ownership，所以在QMutex被二次加锁时能够立刻检查出死锁。\n\n**QSemaphore****类**提供对多个资源的保护，适用于生产者和消费者的模式。包括Acquire和Release方法。\n\n**QWaitCondition****类**，有些平台上也叫Monitor，提供了对多个条件的等待。下面是一个用条件变量实现的生产者和消费者的例子。\n\n```cpp\nvoid Producer::run()  \n{  \n    qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));  \n     \n    for (int i =0; i < DataSize; ++i) {  \n        mutex.lock();  \n        if (numUsedBytes == BufferSize)  \n            //缓冲区已满则等待  \n            bufferNotFull.wait(&mutex);  \n        mutex.unlock();  \n   \n        buffer\\[i % BufferSize\\] =\"ACGT\"\\[(int)qrand() %4\\];  \n   \n        mutex.lock();  \n        ++numUsedBytes;  \n        //生产完一个，唤醒因为缓冲区为空而等待的消费者  \n        bufferNotEmpty.wakeAll();  \n        mutex.unlock();  \n    }  \n}  \n//! \\[2\\]  \n   \n//! \\[3\\]  \nclass Consumer : public QThread  \n//! \\[3\\] //! \\[4\\]  \n{  \npublic:  \n    void run();  \n};  \n   \nvoid Consumer::run()  \n{  \n    for (int i =0; i < DataSize; ++i) {  \n        mutex.lock();  \n        if (numUsedBytes ==0)  \n            //缓冲区为空，等待  \n            bufferNotEmpty.wait(&mutex);  \n        mutex.unlock();  \n         \n        fprintf(stderr, \"%c\", buffer\\[i % BufferSize\\]);  \n   \n        mutex.lock();  \n        --numUsedBytes;  \n        //消费完一个，唤醒因为缓冲区满等待的消费者  \n        bufferNotFull.wakeAll();  \n        mutex.unlock();  \n    }  \n    fprintf(stderr, \"\\\\n\");  \n}\n```\n\n由此看出WaitCondition是与一个条件联系在一起用的，常见的使用方法如下：\n\n```cpp\nWhile(true)  \n{  \n    Do_something();  \n    Mutex.lock();  \n    If (condition)  \n        waitCondition.wati(mutex);  \n    Mutex.unlock();  \n}  \n  \nWhile (true)  \n{  \n    Do_something();  \n    Mutex.lock();  \n    Chang the condtion;  \n    waitCodtion.wake();  \n    Mutex.unlock();  \n}  \n```\n\n**Note：**WaitCondition的wait的内部实现一般是先unlock传入的mutex，然后等待，收到信号后再对mutex进行lock操作。这样为编程提供了一些便利，下面将提到。\n\n**Semaphore****和****WaitCondition****的比较**\n\n下表总结了两者的不同 \n\n**_Semaphores_**\n\n> Can be used anywhere in a program, but should not be used in a monitor\n\n> Wait() does not always block the caller (_i.e._, when the semaphore counter is greater than zero).\n\n>Signal() either releases a blocked thread, if there is one, or increases the semaphore counter.\n\n>If Signal() releases a blocked thread, the caller and the released thread **_both_** continue.\n\n\n**_Condition Variables_**\n\n>Can only be used in monitors\n\n>Wait() always blocks the caller.\n\n>Signal() either releases a blocked thread, if there is one, or the signal is lost as if it never happens.\n\n>If Signal() releases a blocked thread, the caller yields the monitor (Hoare type) or continues (Mesa Type). Only one of the caller or the released thread can continue, but not both.\n\n总得来说两者是可以互换的，比如WaitCondition虽然没有记录在它上面等待的个数，但是可以通过与一个整数联用来达到与Semaphore相同，如上面的例子中所示。据说WaitCondition内部也可以用Semaphore来实现的。\n\n此外在使用WaitCondition的时候要注意的是WaitCondition的wake方法在没有其他线程等待的情况下是不起作用的，所以在使用的时候要格外注意，下面是一个qt中的一个例子：\n\n```cpp\nforever {  \n     mutex.lock();  \n     keyPressed.wait(&mutex);  \n     ++count;  \n     mutex.unlock();  \n   \n     do_something();  \n   \n     mutex.lock();  \n     --count;  \n     mutex.unlock();  \n }  \nforever {  \n     getchar();  \n   \n     mutex.lock();  \n     // Sleep until there are no busy worker threads  \nwhile (count >0) {  \n         mutex.unlock();  \n         sleep(1);  \n         mutex.lock();  \n     }  \n     keyPressed.wakeAll();  \n     mutex.unlock();  \n }\n```\n\n\n上面的代码通过添加一个count变量，防止在其他线程还在工作的情况下被唤醒。由于此处的mutex还用来保护count变量的同步，所以如果QWaitCondition在wait操作时没有对其unlock，那么在另一个线程中想对其操作，满足原来的条件的时候就会产生死锁。 ","source":"_posts/也谈线程同步变量.md","raw":"---\ntitle: 也谈线程同步变量\ntags: []\ndate: 2010-04-08 21:46:00\n---\n\n　　前段时间看了一下QT中的线程同步变量，这里谈谈我的心得，由于线程同步变量在很多系统和平台中都有涉及，所以下文将更多地从它们的共性方面去讨论。废话少说，进入正文。\n\nQT中主要提供了以下几个同步类：\n\nQMutex\n\nQSemaphore\n\nQWaitCondition\n\nQReadLocker\n\nQWriteLocker 等。\n\n下面就主要探讨一下前三个同步类。\n\n**QMutex类**的功能比较简单，主要分为**Recursive**和**N****on-Recursive**两种方式，Recursive模式即指在同一线程中可以对某个QMutex多次加锁，当然也要同等次数的解锁。而Non-Recursive即指QMutex只能被lock一次，否则视为死锁。下面重点介绍一下这两种模式的异同。\n\n　　在Recursive模式下需要记录第一次对其进行lock操作的线程id，即ownership（它的所属），如果是同一个线程，则对此Mutex再加一次锁，不会block当前的线程。如果是不同的线程，则需要block当前的线程，此外对该QMutex unlock的线程必须和lock的线程相同。\n\n　　在Non-Recursive模式下unlock的线程则不需要与lock的线程相同，在这点上有点类似于Semaphore。有的地方说Non-Recursive模式下的Mutex没有记录ownership，那么_我猜测__Non-Recursive__死锁的检测可能就是等待确定的时间，如果超过了该时间没有被解锁则判定为死锁，不知道这种猜测对不对，哪位知道的可以__share__一下_。通过查看QMutex的代码，发现QMutex版本的Mutex记录了线程的Ownership，所以在QMutex被二次加锁时能够立刻检查出死锁。\n\n**QSemaphore****类**提供对多个资源的保护，适用于生产者和消费者的模式。包括Acquire和Release方法。\n\n**QWaitCondition****类**，有些平台上也叫Monitor，提供了对多个条件的等待。下面是一个用条件变量实现的生产者和消费者的例子。\n\n```cpp\nvoid Producer::run()  \n{  \n    qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));  \n     \n    for (int i =0; i < DataSize; ++i) {  \n        mutex.lock();  \n        if (numUsedBytes == BufferSize)  \n            //缓冲区已满则等待  \n            bufferNotFull.wait(&mutex);  \n        mutex.unlock();  \n   \n        buffer\\[i % BufferSize\\] =\"ACGT\"\\[(int)qrand() %4\\];  \n   \n        mutex.lock();  \n        ++numUsedBytes;  \n        //生产完一个，唤醒因为缓冲区为空而等待的消费者  \n        bufferNotEmpty.wakeAll();  \n        mutex.unlock();  \n    }  \n}  \n//! \\[2\\]  \n   \n//! \\[3\\]  \nclass Consumer : public QThread  \n//! \\[3\\] //! \\[4\\]  \n{  \npublic:  \n    void run();  \n};  \n   \nvoid Consumer::run()  \n{  \n    for (int i =0; i < DataSize; ++i) {  \n        mutex.lock();  \n        if (numUsedBytes ==0)  \n            //缓冲区为空，等待  \n            bufferNotEmpty.wait(&mutex);  \n        mutex.unlock();  \n         \n        fprintf(stderr, \"%c\", buffer\\[i % BufferSize\\]);  \n   \n        mutex.lock();  \n        --numUsedBytes;  \n        //消费完一个，唤醒因为缓冲区满等待的消费者  \n        bufferNotFull.wakeAll();  \n        mutex.unlock();  \n    }  \n    fprintf(stderr, \"\\\\n\");  \n}\n```\n\n由此看出WaitCondition是与一个条件联系在一起用的，常见的使用方法如下：\n\n```cpp\nWhile(true)  \n{  \n    Do_something();  \n    Mutex.lock();  \n    If (condition)  \n        waitCondition.wati(mutex);  \n    Mutex.unlock();  \n}  \n  \nWhile (true)  \n{  \n    Do_something();  \n    Mutex.lock();  \n    Chang the condtion;  \n    waitCodtion.wake();  \n    Mutex.unlock();  \n}  \n```\n\n**Note：**WaitCondition的wait的内部实现一般是先unlock传入的mutex，然后等待，收到信号后再对mutex进行lock操作。这样为编程提供了一些便利，下面将提到。\n\n**Semaphore****和****WaitCondition****的比较**\n\n下表总结了两者的不同 \n\n**_Semaphores_**\n\n> Can be used anywhere in a program, but should not be used in a monitor\n\n> Wait() does not always block the caller (_i.e._, when the semaphore counter is greater than zero).\n\n>Signal() either releases a blocked thread, if there is one, or increases the semaphore counter.\n\n>If Signal() releases a blocked thread, the caller and the released thread **_both_** continue.\n\n\n**_Condition Variables_**\n\n>Can only be used in monitors\n\n>Wait() always blocks the caller.\n\n>Signal() either releases a blocked thread, if there is one, or the signal is lost as if it never happens.\n\n>If Signal() releases a blocked thread, the caller yields the monitor (Hoare type) or continues (Mesa Type). Only one of the caller or the released thread can continue, but not both.\n\n总得来说两者是可以互换的，比如WaitCondition虽然没有记录在它上面等待的个数，但是可以通过与一个整数联用来达到与Semaphore相同，如上面的例子中所示。据说WaitCondition内部也可以用Semaphore来实现的。\n\n此外在使用WaitCondition的时候要注意的是WaitCondition的wake方法在没有其他线程等待的情况下是不起作用的，所以在使用的时候要格外注意，下面是一个qt中的一个例子：\n\n```cpp\nforever {  \n     mutex.lock();  \n     keyPressed.wait(&mutex);  \n     ++count;  \n     mutex.unlock();  \n   \n     do_something();  \n   \n     mutex.lock();  \n     --count;  \n     mutex.unlock();  \n }  \nforever {  \n     getchar();  \n   \n     mutex.lock();  \n     // Sleep until there are no busy worker threads  \nwhile (count >0) {  \n         mutex.unlock();  \n         sleep(1);  \n         mutex.lock();  \n     }  \n     keyPressed.wakeAll();  \n     mutex.unlock();  \n }\n```\n\n\n上面的代码通过添加一个count变量，防止在其他线程还在工作的情况下被唤醒。由于此处的mutex还用来保护count变量的同步，所以如果QWaitCondition在wait操作时没有对其unlock，那么在另一个线程中想对其操作，满足原来的条件的时候就会产生死锁。 ","slug":"也谈线程同步变量","published":1,"updated":"2019-02-21T15:03:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjserb4pm0001a7fy98pols5x","content":"<p>　　前段时间看了一下QT中的线程同步变量，这里谈谈我的心得，由于线程同步变量在很多系统和平台中都有涉及，所以下文将更多地从它们的共性方面去讨论。废话少说，进入正文。</p>\n<p>QT中主要提供了以下几个同步类：</p>\n<p>QMutex</p>\n<p>QSemaphore</p>\n<p>QWaitCondition</p>\n<p>QReadLocker</p>\n<p>QWriteLocker 等。</p>\n<p>下面就主要探讨一下前三个同步类。</p>\n<p><strong>QMutex类</strong>的功能比较简单，主要分为<strong>Recursive</strong>和<strong>N**</strong>on-Recursive**两种方式，Recursive模式即指在同一线程中可以对某个QMutex多次加锁，当然也要同等次数的解锁。而Non-Recursive即指QMutex只能被lock一次，否则视为死锁。下面重点介绍一下这两种模式的异同。</p>\n<p>　　在Recursive模式下需要记录第一次对其进行lock操作的线程id，即ownership（它的所属），如果是同一个线程，则对此Mutex再加一次锁，不会block当前的线程。如果是不同的线程，则需要block当前的线程，此外对该QMutex unlock的线程必须和lock的线程相同。</p>\n<p>　　在Non-Recursive模式下unlock的线程则不需要与lock的线程相同，在这点上有点类似于Semaphore。有的地方说Non-Recursive模式下的Mutex没有记录ownership，那么<em>我猜测<strong>Non-Recursive</strong>死锁的检测可能就是等待确定的时间，如果超过了该时间没有被解锁则判定为死锁，不知道这种猜测对不对，哪位知道的可以<strong>share</strong>一下</em>。通过查看QMutex的代码，发现QMutex版本的Mutex记录了线程的Ownership，所以在QMutex被二次加锁时能够立刻检查出死锁。</p>\n<p><strong>QSemaphore**</strong>类**提供对多个资源的保护，适用于生产者和消费者的模式。包括Acquire和Release方法。</p>\n<p><strong>QWaitCondition**</strong>类**，有些平台上也叫Monitor，提供了对多个条件的等待。下面是一个用条件变量实现的生产者和消费者的例子。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Producer::run()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    qsrand(QTime(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>).secsTo(QTime::currentTime()));  </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; DataSize; ++i) &#123;  </span><br><span class=\"line\">        mutex.lock();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numUsedBytes == BufferSize)  </span><br><span class=\"line\">            <span class=\"comment\">//缓冲区已满则等待  </span></span><br><span class=\"line\">            bufferNotFull.wait(&amp;mutex);  </span><br><span class=\"line\">        mutex.unlock();  </span><br><span class=\"line\">   </span><br><span class=\"line\">        buffer\\[i % BufferSize\\] =<span class=\"string\">\"ACGT\"</span>\\[(<span class=\"keyword\">int</span>)qrand() %<span class=\"number\">4</span>\\];  </span><br><span class=\"line\">   </span><br><span class=\"line\">        mutex.lock();  </span><br><span class=\"line\">        ++numUsedBytes;  </span><br><span class=\"line\">        <span class=\"comment\">//生产完一个，唤醒因为缓冲区为空而等待的消费者  </span></span><br><span class=\"line\">        bufferNotEmpty.wakeAll();  </span><br><span class=\"line\">        mutex.unlock();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//! \\[2\\]  </span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">//! \\[3\\]  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> :</span> <span class=\"keyword\">public</span> QThread  </span><br><span class=\"line\"><span class=\"comment\">//! \\[3\\] //! \\[4\\]  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">void</span> Consumer::run()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; DataSize; ++i) &#123;  </span><br><span class=\"line\">        mutex.lock();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numUsedBytes ==<span class=\"number\">0</span>)  </span><br><span class=\"line\">            <span class=\"comment\">//缓冲区为空，等待  </span></span><br><span class=\"line\">            bufferNotEmpty.wait(&amp;mutex);  </span><br><span class=\"line\">        mutex.unlock();  </span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"%c\"</span>, buffer\\[i % BufferSize\\]);  </span><br><span class=\"line\">   </span><br><span class=\"line\">        mutex.lock();  </span><br><span class=\"line\">        --numUsedBytes;  </span><br><span class=\"line\">        <span class=\"comment\">//消费完一个，唤醒因为缓冲区满等待的消费者  </span></span><br><span class=\"line\">        bufferNotFull.wakeAll();  </span><br><span class=\"line\">        mutex.unlock();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"\\\\n\"</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此看出WaitCondition是与一个条件联系在一起用的，常见的使用方法如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">While(<span class=\"literal\">true</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    Do_something();  </span><br><span class=\"line\">    Mutex.lock();  </span><br><span class=\"line\">    If (condition)  </span><br><span class=\"line\">        waitCondition.wati(mutex);  </span><br><span class=\"line\">    Mutex.unlock();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">While (<span class=\"literal\">true</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    Do_something();  </span><br><span class=\"line\">    Mutex.lock();  </span><br><span class=\"line\">    Chang the condtion;  </span><br><span class=\"line\">    waitCodtion.wake();  </span><br><span class=\"line\">    Mutex.unlock();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note：</strong>WaitCondition的wait的内部实现一般是先unlock传入的mutex，然后等待，收到信号后再对mutex进行lock操作。这样为编程提供了一些便利，下面将提到。</p>\n<p><strong>Semaphore**</strong>和<strong><strong>WaitCondition</strong></strong>的比较**</p>\n<p>下表总结了两者的不同 </p>\n<p><strong><em>Semaphores</em></strong></p>\n<blockquote>\n<p>Can be used anywhere in a program, but should not be used in a monitor</p>\n</blockquote>\n<blockquote>\n<p>Wait() does not always block the caller (<em>i.e.</em>, when the semaphore counter is greater than zero).</p>\n</blockquote>\n<blockquote>\n<p>Signal() either releases a blocked thread, if there is one, or increases the semaphore counter.</p>\n</blockquote>\n<blockquote>\n<p>If Signal() releases a blocked thread, the caller and the released thread <strong><em>both</em></strong> continue.</p>\n</blockquote>\n<p><strong><em>Condition Variables</em></strong></p>\n<blockquote>\n<p>Can only be used in monitors</p>\n</blockquote>\n<blockquote>\n<p>Wait() always blocks the caller.</p>\n</blockquote>\n<blockquote>\n<p>Signal() either releases a blocked thread, if there is one, or the signal is lost as if it never happens.</p>\n</blockquote>\n<blockquote>\n<p>If Signal() releases a blocked thread, the caller yields the monitor (Hoare type) or continues (Mesa Type). Only one of the caller or the released thread can continue, but not both.</p>\n</blockquote>\n<p>总得来说两者是可以互换的，比如WaitCondition虽然没有记录在它上面等待的个数，但是可以通过与一个整数联用来达到与Semaphore相同，如上面的例子中所示。据说WaitCondition内部也可以用Semaphore来实现的。</p>\n<p>此外在使用WaitCondition的时候要注意的是WaitCondition的wake方法在没有其他线程等待的情况下是不起作用的，所以在使用的时候要格外注意，下面是一个qt中的一个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever &#123;  </span><br><span class=\"line\">     mutex.lock();  </span><br><span class=\"line\">     keyPressed.wait(&amp;mutex);  </span><br><span class=\"line\">     ++count;  </span><br><span class=\"line\">     mutex.unlock();  </span><br><span class=\"line\">   </span><br><span class=\"line\">     do_something();  </span><br><span class=\"line\">   </span><br><span class=\"line\">     mutex.lock();  </span><br><span class=\"line\">     --count;  </span><br><span class=\"line\">     mutex.unlock();  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">forever &#123;  </span><br><span class=\"line\">     getchar();  </span><br><span class=\"line\">   </span><br><span class=\"line\">     mutex.lock();  </span><br><span class=\"line\">     <span class=\"comment\">// Sleep until there are no busy worker threads  </span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (count &gt;<span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">         mutex.unlock();  </span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);  </span><br><span class=\"line\">         mutex.lock();  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">     keyPressed.wakeAll();  </span><br><span class=\"line\">     mutex.unlock();  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码通过添加一个count变量，防止在其他线程还在工作的情况下被唤醒。由于此处的mutex还用来保护count变量的同步，所以如果QWaitCondition在wait操作时没有对其unlock，那么在另一个线程中想对其操作，满足原来的条件的时候就会产生死锁。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　前段时间看了一下QT中的线程同步变量，这里谈谈我的心得，由于线程同步变量在很多系统和平台中都有涉及，所以下文将更多地从它们的共性方面去讨论。废话少说，进入正文。</p>\n<p>QT中主要提供了以下几个同步类：</p>\n<p>QMutex</p>\n<p>QSemaphore</p>\n<p>QWaitCondition</p>\n<p>QReadLocker</p>\n<p>QWriteLocker 等。</p>\n<p>下面就主要探讨一下前三个同步类。</p>\n<p><strong>QMutex类</strong>的功能比较简单，主要分为<strong>Recursive</strong>和<strong>N**</strong>on-Recursive**两种方式，Recursive模式即指在同一线程中可以对某个QMutex多次加锁，当然也要同等次数的解锁。而Non-Recursive即指QMutex只能被lock一次，否则视为死锁。下面重点介绍一下这两种模式的异同。</p>\n<p>　　在Recursive模式下需要记录第一次对其进行lock操作的线程id，即ownership（它的所属），如果是同一个线程，则对此Mutex再加一次锁，不会block当前的线程。如果是不同的线程，则需要block当前的线程，此外对该QMutex unlock的线程必须和lock的线程相同。</p>\n<p>　　在Non-Recursive模式下unlock的线程则不需要与lock的线程相同，在这点上有点类似于Semaphore。有的地方说Non-Recursive模式下的Mutex没有记录ownership，那么<em>我猜测<strong>Non-Recursive</strong>死锁的检测可能就是等待确定的时间，如果超过了该时间没有被解锁则判定为死锁，不知道这种猜测对不对，哪位知道的可以<strong>share</strong>一下</em>。通过查看QMutex的代码，发现QMutex版本的Mutex记录了线程的Ownership，所以在QMutex被二次加锁时能够立刻检查出死锁。</p>\n<p><strong>QSemaphore**</strong>类**提供对多个资源的保护，适用于生产者和消费者的模式。包括Acquire和Release方法。</p>\n<p><strong>QWaitCondition**</strong>类**，有些平台上也叫Monitor，提供了对多个条件的等待。下面是一个用条件变量实现的生产者和消费者的例子。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Producer::run()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    qsrand(QTime(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>).secsTo(QTime::currentTime()));  </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; DataSize; ++i) &#123;  </span><br><span class=\"line\">        mutex.lock();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numUsedBytes == BufferSize)  </span><br><span class=\"line\">            <span class=\"comment\">//缓冲区已满则等待  </span></span><br><span class=\"line\">            bufferNotFull.wait(&amp;mutex);  </span><br><span class=\"line\">        mutex.unlock();  </span><br><span class=\"line\">   </span><br><span class=\"line\">        buffer\\[i % BufferSize\\] =<span class=\"string\">\"ACGT\"</span>\\[(<span class=\"keyword\">int</span>)qrand() %<span class=\"number\">4</span>\\];  </span><br><span class=\"line\">   </span><br><span class=\"line\">        mutex.lock();  </span><br><span class=\"line\">        ++numUsedBytes;  </span><br><span class=\"line\">        <span class=\"comment\">//生产完一个，唤醒因为缓冲区为空而等待的消费者  </span></span><br><span class=\"line\">        bufferNotEmpty.wakeAll();  </span><br><span class=\"line\">        mutex.unlock();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//! \\[2\\]  </span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">//! \\[3\\]  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> :</span> <span class=\"keyword\">public</span> QThread  </span><br><span class=\"line\"><span class=\"comment\">//! \\[3\\] //! \\[4\\]  </span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">void</span> Consumer::run()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; DataSize; ++i) &#123;  </span><br><span class=\"line\">        mutex.lock();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numUsedBytes ==<span class=\"number\">0</span>)  </span><br><span class=\"line\">            <span class=\"comment\">//缓冲区为空，等待  </span></span><br><span class=\"line\">            bufferNotEmpty.wait(&amp;mutex);  </span><br><span class=\"line\">        mutex.unlock();  </span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"%c\"</span>, buffer\\[i % BufferSize\\]);  </span><br><span class=\"line\">   </span><br><span class=\"line\">        mutex.lock();  </span><br><span class=\"line\">        --numUsedBytes;  </span><br><span class=\"line\">        <span class=\"comment\">//消费完一个，唤醒因为缓冲区满等待的消费者  </span></span><br><span class=\"line\">        bufferNotFull.wakeAll();  </span><br><span class=\"line\">        mutex.unlock();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"\\\\n\"</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此看出WaitCondition是与一个条件联系在一起用的，常见的使用方法如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">While(<span class=\"literal\">true</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    Do_something();  </span><br><span class=\"line\">    Mutex.lock();  </span><br><span class=\"line\">    If (condition)  </span><br><span class=\"line\">        waitCondition.wati(mutex);  </span><br><span class=\"line\">    Mutex.unlock();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">While (<span class=\"literal\">true</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    Do_something();  </span><br><span class=\"line\">    Mutex.lock();  </span><br><span class=\"line\">    Chang the condtion;  </span><br><span class=\"line\">    waitCodtion.wake();  </span><br><span class=\"line\">    Mutex.unlock();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Note：</strong>WaitCondition的wait的内部实现一般是先unlock传入的mutex，然后等待，收到信号后再对mutex进行lock操作。这样为编程提供了一些便利，下面将提到。</p>\n<p><strong>Semaphore**</strong>和<strong><strong>WaitCondition</strong></strong>的比较**</p>\n<p>下表总结了两者的不同 </p>\n<p><strong><em>Semaphores</em></strong></p>\n<blockquote>\n<p>Can be used anywhere in a program, but should not be used in a monitor</p>\n</blockquote>\n<blockquote>\n<p>Wait() does not always block the caller (<em>i.e.</em>, when the semaphore counter is greater than zero).</p>\n</blockquote>\n<blockquote>\n<p>Signal() either releases a blocked thread, if there is one, or increases the semaphore counter.</p>\n</blockquote>\n<blockquote>\n<p>If Signal() releases a blocked thread, the caller and the released thread <strong><em>both</em></strong> continue.</p>\n</blockquote>\n<p><strong><em>Condition Variables</em></strong></p>\n<blockquote>\n<p>Can only be used in monitors</p>\n</blockquote>\n<blockquote>\n<p>Wait() always blocks the caller.</p>\n</blockquote>\n<blockquote>\n<p>Signal() either releases a blocked thread, if there is one, or the signal is lost as if it never happens.</p>\n</blockquote>\n<blockquote>\n<p>If Signal() releases a blocked thread, the caller yields the monitor (Hoare type) or continues (Mesa Type). Only one of the caller or the released thread can continue, but not both.</p>\n</blockquote>\n<p>总得来说两者是可以互换的，比如WaitCondition虽然没有记录在它上面等待的个数，但是可以通过与一个整数联用来达到与Semaphore相同，如上面的例子中所示。据说WaitCondition内部也可以用Semaphore来实现的。</p>\n<p>此外在使用WaitCondition的时候要注意的是WaitCondition的wake方法在没有其他线程等待的情况下是不起作用的，所以在使用的时候要格外注意，下面是一个qt中的一个例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forever &#123;  </span><br><span class=\"line\">     mutex.lock();  </span><br><span class=\"line\">     keyPressed.wait(&amp;mutex);  </span><br><span class=\"line\">     ++count;  </span><br><span class=\"line\">     mutex.unlock();  </span><br><span class=\"line\">   </span><br><span class=\"line\">     do_something();  </span><br><span class=\"line\">   </span><br><span class=\"line\">     mutex.lock();  </span><br><span class=\"line\">     --count;  </span><br><span class=\"line\">     mutex.unlock();  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">forever &#123;  </span><br><span class=\"line\">     getchar();  </span><br><span class=\"line\">   </span><br><span class=\"line\">     mutex.lock();  </span><br><span class=\"line\">     <span class=\"comment\">// Sleep until there are no busy worker threads  </span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (count &gt;<span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">         mutex.unlock();  </span><br><span class=\"line\">         sleep(<span class=\"number\">1</span>);  </span><br><span class=\"line\">         mutex.lock();  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">     keyPressed.wakeAll();  </span><br><span class=\"line\">     mutex.unlock();  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码通过添加一个count变量，防止在其他线程还在工作的情况下被唤醒。由于此处的mutex还用来保护count变量的同步，所以如果QWaitCondition在wait操作时没有对其unlock，那么在另一个线程中想对其操作，满足原来的条件的时候就会产生死锁。 </p>\n"},{"title":"TimeZoneChange事件的捕获","date":"2009-08-08T05:03:00.000Z","_content":"\n#需求：\n在c#中要捕获TimeZone变化的事件。 \n\n经过简单的分析发现，c#中没有直接捕获TimeZone Change的事件，但是通过google搜索时，发现一个SystemEvents类提供了许多系统属性变化的时间，其中有一个就是TimeChange事件。考虑到TimeZone带来的附加效果就是Time的变化，所以在此利用了TimeChange事件，来捕获TimeZoneChange事件，具体的代码如下： \n\n```csharp\npublic sealed class TimeEvents\n{\n    public static TimeZoneInfo PreviousTimeZone;\n    public static event EventHandler TimeZoneChangedEvent;\n     static TimeEvents()\n    {\n        PreviousTimeZone = TimeZoneInfo.Local;\n        Microsoft.Win32.SystemEvents.TimeChanged += OnTimeChanged;\n    }\n     private static void OnTimeChanged(object sender, EventArgs e)\n    {\n        System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();\n        TimeZoneInfo.ClearCachedData();\n        if (TimeZoneInfo.Local != PreviousTimeZone)\n        {\n            OnTimeZoneChanged();\n            PreviousTimeZone = TimeZoneInfo.Local;\n        }\n    }\n     private static void OnTimeZoneChanged()\n    {\n        if (null != TimeZoneChangedEvent)\n        {\n            TimeZoneChangedEvent(new TimeEvents(), EventArgs.Empty);\n        }\n    }\n}\n```\n\n#Remarks： \n\n由于TimeZoneInfo对象使用了缓存机制，即它会将获得的TimeZoneInfo缓存起来，在用户请求当前时区属性（Local）时，直接返回缓存的TimeZone，而不重新获取新的TimeZone，所以在获取新的TimeZone属性时，需要先清空Culture和TImeZone的缓存，如下所示： \n\n\n\n```csharp\nSystem.Globalization.CultureInfo.CurrentCulture.ClearCachedData();\nTimeZoneInfo.ClearCachedData();\n```","source":"_posts/TimeZoneChange事件的捕获.md","raw":"---\ntitle: TimeZoneChange事件的捕获\ntags: []\ndate: 2009-08-08 13:03:00\n---\n\n#需求：\n在c#中要捕获TimeZone变化的事件。 \n\n经过简单的分析发现，c#中没有直接捕获TimeZone Change的事件，但是通过google搜索时，发现一个SystemEvents类提供了许多系统属性变化的时间，其中有一个就是TimeChange事件。考虑到TimeZone带来的附加效果就是Time的变化，所以在此利用了TimeChange事件，来捕获TimeZoneChange事件，具体的代码如下： \n\n```csharp\npublic sealed class TimeEvents\n{\n    public static TimeZoneInfo PreviousTimeZone;\n    public static event EventHandler TimeZoneChangedEvent;\n     static TimeEvents()\n    {\n        PreviousTimeZone = TimeZoneInfo.Local;\n        Microsoft.Win32.SystemEvents.TimeChanged += OnTimeChanged;\n    }\n     private static void OnTimeChanged(object sender, EventArgs e)\n    {\n        System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();\n        TimeZoneInfo.ClearCachedData();\n        if (TimeZoneInfo.Local != PreviousTimeZone)\n        {\n            OnTimeZoneChanged();\n            PreviousTimeZone = TimeZoneInfo.Local;\n        }\n    }\n     private static void OnTimeZoneChanged()\n    {\n        if (null != TimeZoneChangedEvent)\n        {\n            TimeZoneChangedEvent(new TimeEvents(), EventArgs.Empty);\n        }\n    }\n}\n```\n\n#Remarks： \n\n由于TimeZoneInfo对象使用了缓存机制，即它会将获得的TimeZoneInfo缓存起来，在用户请求当前时区属性（Local）时，直接返回缓存的TimeZone，而不重新获取新的TimeZone，所以在获取新的TimeZone属性时，需要先清空Culture和TImeZone的缓存，如下所示： \n\n\n\n```csharp\nSystem.Globalization.CultureInfo.CurrentCulture.ClearCachedData();\nTimeZoneInfo.ClearCachedData();\n```","slug":"TimeZoneChange事件的捕获","published":1,"updated":"2019-02-21T14:51:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjserb4pn0002a7fyxjv3epg0","content":"<p>#需求：<br>在c#中要捕获TimeZone变化的事件。 </p>\n<p>经过简单的分析发现，c#中没有直接捕获TimeZone Change的事件，但是通过google搜索时，发现一个SystemEvents类提供了许多系统属性变化的时间，其中有一个就是TimeChange事件。考虑到TimeZone带来的附加效果就是Time的变化，所以在此利用了TimeChange事件，来捕获TimeZoneChange事件，具体的代码如下： </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">TimeEvents</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TimeZoneInfo PreviousTimeZone;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">event</span> EventHandler TimeZoneChangedEvent;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">TimeEvents</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        PreviousTimeZone = TimeZoneInfo.Local;</span><br><span class=\"line\">        Microsoft.Win32.SystemEvents.TimeChanged += OnTimeChanged;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnTimeChanged</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();</span><br><span class=\"line\">        TimeZoneInfo.ClearCachedData();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TimeZoneInfo.Local != PreviousTimeZone)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            OnTimeZoneChanged();</span><br><span class=\"line\">            PreviousTimeZone = TimeZoneInfo.Local;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnTimeZoneChanged</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != TimeZoneChangedEvent)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TimeZoneChangedEvent(<span class=\"keyword\">new</span> TimeEvents(), EventArgs.Empty);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#Remarks： </p>\n<p>由于TimeZoneInfo对象使用了缓存机制，即它会将获得的TimeZoneInfo缓存起来，在用户请求当前时区属性（Local）时，直接返回缓存的TimeZone，而不重新获取新的TimeZone，所以在获取新的TimeZone属性时，需要先清空Culture和TImeZone的缓存，如下所示： </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();</span><br><span class=\"line\">TimeZoneInfo.ClearCachedData();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>#需求：<br>在c#中要捕获TimeZone变化的事件。 </p>\n<p>经过简单的分析发现，c#中没有直接捕获TimeZone Change的事件，但是通过google搜索时，发现一个SystemEvents类提供了许多系统属性变化的时间，其中有一个就是TimeChange事件。考虑到TimeZone带来的附加效果就是Time的变化，所以在此利用了TimeChange事件，来捕获TimeZoneChange事件，具体的代码如下： </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">TimeEvents</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TimeZoneInfo PreviousTimeZone;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">event</span> EventHandler TimeZoneChangedEvent;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">TimeEvents</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        PreviousTimeZone = TimeZoneInfo.Local;</span><br><span class=\"line\">        Microsoft.Win32.SystemEvents.TimeChanged += OnTimeChanged;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnTimeChanged</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();</span><br><span class=\"line\">        TimeZoneInfo.ClearCachedData();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TimeZoneInfo.Local != PreviousTimeZone)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            OnTimeZoneChanged();</span><br><span class=\"line\">            PreviousTimeZone = TimeZoneInfo.Local;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnTimeZoneChanged</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != TimeZoneChangedEvent)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TimeZoneChangedEvent(<span class=\"keyword\">new</span> TimeEvents(), EventArgs.Empty);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#Remarks： </p>\n<p>由于TimeZoneInfo对象使用了缓存机制，即它会将获得的TimeZoneInfo缓存起来，在用户请求当前时区属性（Local）时，直接返回缓存的TimeZone，而不重新获取新的TimeZone，所以在获取新的TimeZone属性时，需要先清空Culture和TImeZone的缓存，如下所示： </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Globalization.CultureInfo.CurrentCulture.ClearCachedData();</span><br><span class=\"line\">TimeZoneInfo.ClearCachedData();</span><br></pre></td></tr></table></figure>"},{"title":"如何保持GUI的响应流畅(QT平台)","date":"2010-05-08T03:17:00.000Z","_content":"\n#引子\n\n一般来说耗时较长的操作，分为计算密集型操作和IO密集型操作，对于这两类操作如何提高响应速度呢？ \n\n而从操作的本质上来说，操作又可分为不可分解操作，如在第三方库中耗时较长的操作，以及可分解操作，其中可分解操作又可细分为串行操作和可并行操作，如何针对这几类操作来提高响应速度呢？ \n\n如何将异步的操作，如网络库中异步的读取数据方法，变成同步的操作？ \n\n此外对于多线程，普遍的看法是可以提供程序的运行速度，其实不然，不正确地使用线程常常会使程序变慢，那么在QT中是否可以通过多线程以外的方法来提高响应速度呢？ \n\n下文将一一解答这些问题。 \n\n&nbsp;\n\n# 正文\n\n首先什么是对GUI的响应？答：GUI的响应就是系统对于GUI事件的处理速度。 \n\n由于系统处理事件需要一定的时间，所以一般窗口系统都会提供一个事件队列来存储事件。如果把每个事件处理看成一个任务的话，那么事件处理就类似于操作系统对于任务按照优先级进行处理，使得每个任务的平均等待时间最小。那么就可以借鉴一下操作系统中的方法，比如： \n\n> 分级，让较长的任务延后执行。 \n> \n> 分时，对于较长的任务，让其执行一段时间后暂停，然后再执行。 \n> \n> 减少每个任务运行的耗时，当然这是最基本的方法。\n\n\n\n先看第一个分级，当一个事件处理程序知道自己将执行耗时很长的操作时，可以调用[QCoreApplication::processEvents()](http://doc.trolltech.com/latest/qcoreapplication.html%22%20target=%22_blank#processEvents) 方法，等待消息队列中的方法都执行完再执行。当然这是一个最基本的方法，只适用与简单的情况，如果事件队列中的另一程序也调用了该方法则会出现死锁。 \n\n&nbsp;\n\n再看分时，它适用于可分解的操作（包括串行操作和并行操作），只需记录当前任务的执行情况，然后可以再次执行。它的使用流程如下： \n\n```cpp\nFunction EventHandler()\n{\n    //开始计时\n    While(执行时间 < 用户可接受的响应时间)\n    {\n        //执行操作\n    }\n    //注册系统空闲事件以继续处理\n}\n```\n\n在QT中注册系统空闲事件的方法可以通过QTimer::singleShot(0, this, SLOT(calculate()));将系统空闲信号注册到自己的槽中。或者使用QMetaObject::invokeMethod(this, \"calculate\", Qt::QueuedConnection);方法，通过invokeMethod异步的执行某个方法。 \n\n&nbsp;\n\n最后重点看一下如何减少响应的时间，对于数据密集型操作，推荐使用ThreadPool来管理，减少线程上下文切换的时间；而对于IO密集型操作，则自己管理一个thread来实现，而这也是我认为thread最应该使用的情景，即让CPU和外设都处于满负荷运转状态，减少总的操作时间。 \n\n&nbsp;\n\n对于并行操作响应时间的减少，在QT中引入了Qt Concurrent的概念，采用[Map/Reduce](http://en.wikipedia.org/wiki/MapReduce)的方式，具体可以参考QT中的[Concurrent Programming](http://doc.trolltech.com/4.6/threads-qtconcurrent.html)节。 \n\n&nbsp;\n\n最后再解答下如何在QT中将异步操作改成同步操作的方法，这个就属于QT special的内容，一般的读者可以跳过。 \n\n具体的代码如下所示： \n\n```cpp\nQNetworkAccessManager manager;\nQEventLoop q;\nQTimer tT;\n \ntT.setSingleShot(true);\nconnect(&tT, SIGNAL(timeout()), &q, SLOT(quit()));\nconnect(&manager, SIGNAL(finished(QNetworkReply*)),\n        &q, SLOT(quit()));\nQNetworkReply *reply = manager.get(QNetworkRequest(QUrl(\"http://www.qtcentre.org\")));\n \ntT.start(5000); // 5s timeout\nq.exec();\n \nif(tT.isActive()){\n    // download complete\n    tT.stop();\n} else {\n    // timeout\n}\n\n```\n\n其中主要利用了QEventLoop类，它将创建一个本地的Event loop，然后block，直到接受到finished信号，或者timeout超时信号后才退出，而事件循环则不会被block。 \n\n&nbsp;\n\n# 总结\n\n本文分析了影响GUI响应速度的原因，通过类比操作系统对任务的优先级分派方式，探讨了对多种事件类型，提高其响应速度的方法，其中有些方法在其它平台也是通用的。","source":"_posts/如何保持GUI的响应流畅-QT平台.md","raw":"---\ntitle: 如何保持GUI的响应流畅(QT平台)\ntags: []\ndate: 2010-05-08 11:17:00\n---\n\n#引子\n\n一般来说耗时较长的操作，分为计算密集型操作和IO密集型操作，对于这两类操作如何提高响应速度呢？ \n\n而从操作的本质上来说，操作又可分为不可分解操作，如在第三方库中耗时较长的操作，以及可分解操作，其中可分解操作又可细分为串行操作和可并行操作，如何针对这几类操作来提高响应速度呢？ \n\n如何将异步的操作，如网络库中异步的读取数据方法，变成同步的操作？ \n\n此外对于多线程，普遍的看法是可以提供程序的运行速度，其实不然，不正确地使用线程常常会使程序变慢，那么在QT中是否可以通过多线程以外的方法来提高响应速度呢？ \n\n下文将一一解答这些问题。 \n\n&nbsp;\n\n# 正文\n\n首先什么是对GUI的响应？答：GUI的响应就是系统对于GUI事件的处理速度。 \n\n由于系统处理事件需要一定的时间，所以一般窗口系统都会提供一个事件队列来存储事件。如果把每个事件处理看成一个任务的话，那么事件处理就类似于操作系统对于任务按照优先级进行处理，使得每个任务的平均等待时间最小。那么就可以借鉴一下操作系统中的方法，比如： \n\n> 分级，让较长的任务延后执行。 \n> \n> 分时，对于较长的任务，让其执行一段时间后暂停，然后再执行。 \n> \n> 减少每个任务运行的耗时，当然这是最基本的方法。\n\n\n\n先看第一个分级，当一个事件处理程序知道自己将执行耗时很长的操作时，可以调用[QCoreApplication::processEvents()](http://doc.trolltech.com/latest/qcoreapplication.html%22%20target=%22_blank#processEvents) 方法，等待消息队列中的方法都执行完再执行。当然这是一个最基本的方法，只适用与简单的情况，如果事件队列中的另一程序也调用了该方法则会出现死锁。 \n\n&nbsp;\n\n再看分时，它适用于可分解的操作（包括串行操作和并行操作），只需记录当前任务的执行情况，然后可以再次执行。它的使用流程如下： \n\n```cpp\nFunction EventHandler()\n{\n    //开始计时\n    While(执行时间 < 用户可接受的响应时间)\n    {\n        //执行操作\n    }\n    //注册系统空闲事件以继续处理\n}\n```\n\n在QT中注册系统空闲事件的方法可以通过QTimer::singleShot(0, this, SLOT(calculate()));将系统空闲信号注册到自己的槽中。或者使用QMetaObject::invokeMethod(this, \"calculate\", Qt::QueuedConnection);方法，通过invokeMethod异步的执行某个方法。 \n\n&nbsp;\n\n最后重点看一下如何减少响应的时间，对于数据密集型操作，推荐使用ThreadPool来管理，减少线程上下文切换的时间；而对于IO密集型操作，则自己管理一个thread来实现，而这也是我认为thread最应该使用的情景，即让CPU和外设都处于满负荷运转状态，减少总的操作时间。 \n\n&nbsp;\n\n对于并行操作响应时间的减少，在QT中引入了Qt Concurrent的概念，采用[Map/Reduce](http://en.wikipedia.org/wiki/MapReduce)的方式，具体可以参考QT中的[Concurrent Programming](http://doc.trolltech.com/4.6/threads-qtconcurrent.html)节。 \n\n&nbsp;\n\n最后再解答下如何在QT中将异步操作改成同步操作的方法，这个就属于QT special的内容，一般的读者可以跳过。 \n\n具体的代码如下所示： \n\n```cpp\nQNetworkAccessManager manager;\nQEventLoop q;\nQTimer tT;\n \ntT.setSingleShot(true);\nconnect(&tT, SIGNAL(timeout()), &q, SLOT(quit()));\nconnect(&manager, SIGNAL(finished(QNetworkReply*)),\n        &q, SLOT(quit()));\nQNetworkReply *reply = manager.get(QNetworkRequest(QUrl(\"http://www.qtcentre.org\")));\n \ntT.start(5000); // 5s timeout\nq.exec();\n \nif(tT.isActive()){\n    // download complete\n    tT.stop();\n} else {\n    // timeout\n}\n\n```\n\n其中主要利用了QEventLoop类，它将创建一个本地的Event loop，然后block，直到接受到finished信号，或者timeout超时信号后才退出，而事件循环则不会被block。 \n\n&nbsp;\n\n# 总结\n\n本文分析了影响GUI响应速度的原因，通过类比操作系统对任务的优先级分派方式，探讨了对多种事件类型，提高其响应速度的方法，其中有些方法在其它平台也是通用的。","slug":"如何保持GUI的响应流畅-QT平台","published":1,"updated":"2019-02-21T14:55:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjserb4po0003a7fyo4e9co4n","content":"<p>#引子</p>\n<p>一般来说耗时较长的操作，分为计算密集型操作和IO密集型操作，对于这两类操作如何提高响应速度呢？ </p>\n<p>而从操作的本质上来说，操作又可分为不可分解操作，如在第三方库中耗时较长的操作，以及可分解操作，其中可分解操作又可细分为串行操作和可并行操作，如何针对这几类操作来提高响应速度呢？ </p>\n<p>如何将异步的操作，如网络库中异步的读取数据方法，变成同步的操作？ </p>\n<p>此外对于多线程，普遍的看法是可以提供程序的运行速度，其实不然，不正确地使用线程常常会使程序变慢，那么在QT中是否可以通过多线程以外的方法来提高响应速度呢？ </p>\n<p>下文将一一解答这些问题。 </p>\n<p>&nbsp;</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>首先什么是对GUI的响应？答：GUI的响应就是系统对于GUI事件的处理速度。 </p>\n<p>由于系统处理事件需要一定的时间，所以一般窗口系统都会提供一个事件队列来存储事件。如果把每个事件处理看成一个任务的话，那么事件处理就类似于操作系统对于任务按照优先级进行处理，使得每个任务的平均等待时间最小。那么就可以借鉴一下操作系统中的方法，比如： </p>\n<blockquote>\n<p>分级，让较长的任务延后执行。 </p>\n<p>分时，对于较长的任务，让其执行一段时间后暂停，然后再执行。 </p>\n<p>减少每个任务运行的耗时，当然这是最基本的方法。</p>\n</blockquote>\n<p>先看第一个分级，当一个事件处理程序知道自己将执行耗时很长的操作时，可以调用<a href=\"http://doc.trolltech.com/latest/qcoreapplication.html%22%20target=%22_blank#processEvents\" target=\"_blank\" rel=\"noopener\">QCoreApplication::processEvents()</a> 方法，等待消息队列中的方法都执行完再执行。当然这是一个最基本的方法，只适用与简单的情况，如果事件队列中的另一程序也调用了该方法则会出现死锁。 </p>\n<p>&nbsp;</p>\n<p>再看分时，它适用于可分解的操作（包括串行操作和并行操作），只需记录当前任务的执行情况，然后可以再次执行。它的使用流程如下： </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Function <span class=\"title\">EventHandler</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//开始计时</span></span><br><span class=\"line\">    While(执行时间 &lt; 用户可接受的响应时间)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注册系统空闲事件以继续处理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在QT中注册系统空闲事件的方法可以通过QTimer::singleShot(0, this, SLOT(calculate()));将系统空闲信号注册到自己的槽中。或者使用QMetaObject::invokeMethod(this, “calculate”, Qt::QueuedConnection);方法，通过invokeMethod异步的执行某个方法。 </p>\n<p>&nbsp;</p>\n<p>最后重点看一下如何减少响应的时间，对于数据密集型操作，推荐使用ThreadPool来管理，减少线程上下文切换的时间；而对于IO密集型操作，则自己管理一个thread来实现，而这也是我认为thread最应该使用的情景，即让CPU和外设都处于满负荷运转状态，减少总的操作时间。 </p>\n<p>&nbsp;</p>\n<p>对于并行操作响应时间的减少，在QT中引入了Qt Concurrent的概念，采用<a href=\"http://en.wikipedia.org/wiki/MapReduce\" target=\"_blank\" rel=\"noopener\">Map/Reduce</a>的方式，具体可以参考QT中的<a href=\"http://doc.trolltech.com/4.6/threads-qtconcurrent.html\" target=\"_blank\" rel=\"noopener\">Concurrent Programming</a>节。 </p>\n<p>&nbsp;</p>\n<p>最后再解答下如何在QT中将异步操作改成同步操作的方法，这个就属于QT special的内容，一般的读者可以跳过。 </p>\n<p>具体的代码如下所示： </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QNetworkAccessManager manager;</span><br><span class=\"line\">QEventLoop q;</span><br><span class=\"line\">QTimer tT;</span><br><span class=\"line\"> </span><br><span class=\"line\">tT.setSingleShot(<span class=\"literal\">true</span>);</span><br><span class=\"line\">connect(&amp;tT, SIGNAL(timeout()), &amp;q, SLOT(quit()));</span><br><span class=\"line\">connect(&amp;manager, SIGNAL(finished(QNetworkReply*)),</span><br><span class=\"line\">        &amp;q, SLOT(quit()));</span><br><span class=\"line\">QNetworkReply *reply = manager.get(QNetworkRequest(QUrl(<span class=\"string\">\"http://www.qtcentre.org\"</span>)));</span><br><span class=\"line\"> </span><br><span class=\"line\">tT.start(<span class=\"number\">5000</span>); <span class=\"comment\">// 5s timeout</span></span><br><span class=\"line\">q.exec();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span>(tT.isActive())&#123;</span><br><span class=\"line\">    <span class=\"comment\">// download complete</span></span><br><span class=\"line\">    tT.stop();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// timeout</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中主要利用了QEventLoop类，它将创建一个本地的Event loop，然后block，直到接受到finished信号，或者timeout超时信号后才退出，而事件循环则不会被block。 </p>\n<p>&nbsp;</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文分析了影响GUI响应速度的原因，通过类比操作系统对任务的优先级分派方式，探讨了对多种事件类型，提高其响应速度的方法，其中有些方法在其它平台也是通用的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#引子</p>\n<p>一般来说耗时较长的操作，分为计算密集型操作和IO密集型操作，对于这两类操作如何提高响应速度呢？ </p>\n<p>而从操作的本质上来说，操作又可分为不可分解操作，如在第三方库中耗时较长的操作，以及可分解操作，其中可分解操作又可细分为串行操作和可并行操作，如何针对这几类操作来提高响应速度呢？ </p>\n<p>如何将异步的操作，如网络库中异步的读取数据方法，变成同步的操作？ </p>\n<p>此外对于多线程，普遍的看法是可以提供程序的运行速度，其实不然，不正确地使用线程常常会使程序变慢，那么在QT中是否可以通过多线程以外的方法来提高响应速度呢？ </p>\n<p>下文将一一解答这些问题。 </p>\n<p>&nbsp;</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>首先什么是对GUI的响应？答：GUI的响应就是系统对于GUI事件的处理速度。 </p>\n<p>由于系统处理事件需要一定的时间，所以一般窗口系统都会提供一个事件队列来存储事件。如果把每个事件处理看成一个任务的话，那么事件处理就类似于操作系统对于任务按照优先级进行处理，使得每个任务的平均等待时间最小。那么就可以借鉴一下操作系统中的方法，比如： </p>\n<blockquote>\n<p>分级，让较长的任务延后执行。 </p>\n<p>分时，对于较长的任务，让其执行一段时间后暂停，然后再执行。 </p>\n<p>减少每个任务运行的耗时，当然这是最基本的方法。</p>\n</blockquote>\n<p>先看第一个分级，当一个事件处理程序知道自己将执行耗时很长的操作时，可以调用<a href=\"http://doc.trolltech.com/latest/qcoreapplication.html%22%20target=%22_blank#processEvents\" target=\"_blank\" rel=\"noopener\">QCoreApplication::processEvents()</a> 方法，等待消息队列中的方法都执行完再执行。当然这是一个最基本的方法，只适用与简单的情况，如果事件队列中的另一程序也调用了该方法则会出现死锁。 </p>\n<p>&nbsp;</p>\n<p>再看分时，它适用于可分解的操作（包括串行操作和并行操作），只需记录当前任务的执行情况，然后可以再次执行。它的使用流程如下： </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Function <span class=\"title\">EventHandler</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//开始计时</span></span><br><span class=\"line\">    While(执行时间 &lt; 用户可接受的响应时间)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注册系统空闲事件以继续处理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在QT中注册系统空闲事件的方法可以通过QTimer::singleShot(0, this, SLOT(calculate()));将系统空闲信号注册到自己的槽中。或者使用QMetaObject::invokeMethod(this, “calculate”, Qt::QueuedConnection);方法，通过invokeMethod异步的执行某个方法。 </p>\n<p>&nbsp;</p>\n<p>最后重点看一下如何减少响应的时间，对于数据密集型操作，推荐使用ThreadPool来管理，减少线程上下文切换的时间；而对于IO密集型操作，则自己管理一个thread来实现，而这也是我认为thread最应该使用的情景，即让CPU和外设都处于满负荷运转状态，减少总的操作时间。 </p>\n<p>&nbsp;</p>\n<p>对于并行操作响应时间的减少，在QT中引入了Qt Concurrent的概念，采用<a href=\"http://en.wikipedia.org/wiki/MapReduce\" target=\"_blank\" rel=\"noopener\">Map/Reduce</a>的方式，具体可以参考QT中的<a href=\"http://doc.trolltech.com/4.6/threads-qtconcurrent.html\" target=\"_blank\" rel=\"noopener\">Concurrent Programming</a>节。 </p>\n<p>&nbsp;</p>\n<p>最后再解答下如何在QT中将异步操作改成同步操作的方法，这个就属于QT special的内容，一般的读者可以跳过。 </p>\n<p>具体的代码如下所示： </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QNetworkAccessManager manager;</span><br><span class=\"line\">QEventLoop q;</span><br><span class=\"line\">QTimer tT;</span><br><span class=\"line\"> </span><br><span class=\"line\">tT.setSingleShot(<span class=\"literal\">true</span>);</span><br><span class=\"line\">connect(&amp;tT, SIGNAL(timeout()), &amp;q, SLOT(quit()));</span><br><span class=\"line\">connect(&amp;manager, SIGNAL(finished(QNetworkReply*)),</span><br><span class=\"line\">        &amp;q, SLOT(quit()));</span><br><span class=\"line\">QNetworkReply *reply = manager.get(QNetworkRequest(QUrl(<span class=\"string\">\"http://www.qtcentre.org\"</span>)));</span><br><span class=\"line\"> </span><br><span class=\"line\">tT.start(<span class=\"number\">5000</span>); <span class=\"comment\">// 5s timeout</span></span><br><span class=\"line\">q.exec();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span>(tT.isActive())&#123;</span><br><span class=\"line\">    <span class=\"comment\">// download complete</span></span><br><span class=\"line\">    tT.stop();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// timeout</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中主要利用了QEventLoop类，它将创建一个本地的Event loop，然后block，直到接受到finished信号，或者timeout超时信号后才退出，而事件循环则不会被block。 </p>\n<p>&nbsp;</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文分析了影响GUI响应速度的原因，通过类比操作系统对任务的优先级分派方式，探讨了对多种事件类型，提高其响应速度的方法，其中有些方法在其它平台也是通用的。</p>\n"},{"title":"程序优化小记","date":"2011-01-19T12:40:00.000Z","_content":"\n最近做给一块蓝牙芯片做了一个decode的功能，数据是用RLE（[http://en.wikipedia.org/wiki/Run-length_encoding](http://en.wikipedia.org/wiki/Run-length_encoding \"http://en.wikipedia.org/wiki/Run-length_encoding\")）流程算法压缩的。为什么选用RLE算法，因为蓝牙芯片自身memory的局限性，最大只能获得不到2K的内存，还是不连续，而解压出的数据有2K多，所以需要一种能够边解压边发送的算法，查看现在流行的几种算法：霍夫曼算法，RLE算法，查表算法。\n\n&nbsp;\n\n<table cellspacing=\"0\" cellpadding=\"2\" width=\"400\" border=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"100\">&nbsp;</td>\n<td valign=\"top\" width=\"100\">压缩率</td>\n<td valign=\"top\" width=\"100\">实现复杂度</td>\n<td valign=\"top\" width=\"100\">内存占用量</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"100\">霍夫曼算法</td>\n<td valign=\"top\" width=\"100\">小</td>\n<td valign=\"top\" width=\"100\">中</td>\n<td valign=\"top\" width=\"100\">中</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"100\">RLE算法</td>\n<td valign=\"top\" width=\"100\">中</td>\n<td valign=\"top\" width=\"100\">小</td>\n<td valign=\"top\" width=\"100\">小</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"100\">查表算法</td>\n<td valign=\"top\" width=\"100\">大</td>\n<td valign=\"top\" width=\"100\">大</td>\n<td valign=\"top\" width=\"100\">大（一般几十K）</td>\n</tr>\n</tbody>\n</table>\n\n&nbsp;\n\n由于查表算法的内存占用量一般需要几十K，所以所以首先排除，而且比较霍夫曼算法和RLE算法，RLE算法在压缩率，实现复杂度，内存占用量三个方面都占有优势，所以最终选择RLE作为压缩和解码的方法。\n\n花了几天时间实现了改算法，今天对其进行了性能测试，发现解压目标数据需要200多ms，遂决定对其进行优化。\n\n**step1**，还原行解压函数，减少一百多次的函数调用，但是实验的结果是反而增加了100多ms，猜测可能是有远指针调用，遂放弃。</span>\n\n**step2**，将行解压函数中，对堆内存的访问换成对栈上数据的访问，实验下来时间减小到了70-80ms，性能提升了一倍多。\n\n**step3**，由于采用的RLE算法是经过改进过的，n + 1行的数据是和n行数据异或过，所以增加相同数据的几率，比如有三行数据时1010 1010，理论上是不能压缩的，当时经过异或，后面两行数据都变成了0000 0000，便可以采用RLE算法进行压缩。所以根据这一特性，在step3做的优化是，比较解压出的值，如果是0，则不需要和上一行的数据进行异或（因为任何数和零异或都不变）。改进后可以将时间减小到30-40ms，又提升了一倍多。\n\n**step4**，在step3的基础，在行解压算法中，如果检测到行的剩余部分都是0，则直接跳过该行剩下的部分。改进后时间减小到了十几个ms。\n\n所以进过step2-4，性能提升了10倍多。","source":"_posts/程序优化小记.md","raw":"---\ntitle: 程序优化小记\ntags: []\ndate: 2011-01-19 20:40:00\n---\n\n最近做给一块蓝牙芯片做了一个decode的功能，数据是用RLE（[http://en.wikipedia.org/wiki/Run-length_encoding](http://en.wikipedia.org/wiki/Run-length_encoding \"http://en.wikipedia.org/wiki/Run-length_encoding\")）流程算法压缩的。为什么选用RLE算法，因为蓝牙芯片自身memory的局限性，最大只能获得不到2K的内存，还是不连续，而解压出的数据有2K多，所以需要一种能够边解压边发送的算法，查看现在流行的几种算法：霍夫曼算法，RLE算法，查表算法。\n\n&nbsp;\n\n<table cellspacing=\"0\" cellpadding=\"2\" width=\"400\" border=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"100\">&nbsp;</td>\n<td valign=\"top\" width=\"100\">压缩率</td>\n<td valign=\"top\" width=\"100\">实现复杂度</td>\n<td valign=\"top\" width=\"100\">内存占用量</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"100\">霍夫曼算法</td>\n<td valign=\"top\" width=\"100\">小</td>\n<td valign=\"top\" width=\"100\">中</td>\n<td valign=\"top\" width=\"100\">中</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"100\">RLE算法</td>\n<td valign=\"top\" width=\"100\">中</td>\n<td valign=\"top\" width=\"100\">小</td>\n<td valign=\"top\" width=\"100\">小</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"100\">查表算法</td>\n<td valign=\"top\" width=\"100\">大</td>\n<td valign=\"top\" width=\"100\">大</td>\n<td valign=\"top\" width=\"100\">大（一般几十K）</td>\n</tr>\n</tbody>\n</table>\n\n&nbsp;\n\n由于查表算法的内存占用量一般需要几十K，所以所以首先排除，而且比较霍夫曼算法和RLE算法，RLE算法在压缩率，实现复杂度，内存占用量三个方面都占有优势，所以最终选择RLE作为压缩和解码的方法。\n\n花了几天时间实现了改算法，今天对其进行了性能测试，发现解压目标数据需要200多ms，遂决定对其进行优化。\n\n**step1**，还原行解压函数，减少一百多次的函数调用，但是实验的结果是反而增加了100多ms，猜测可能是有远指针调用，遂放弃。</span>\n\n**step2**，将行解压函数中，对堆内存的访问换成对栈上数据的访问，实验下来时间减小到了70-80ms，性能提升了一倍多。\n\n**step3**，由于采用的RLE算法是经过改进过的，n + 1行的数据是和n行数据异或过，所以增加相同数据的几率，比如有三行数据时1010 1010，理论上是不能压缩的，当时经过异或，后面两行数据都变成了0000 0000，便可以采用RLE算法进行压缩。所以根据这一特性，在step3做的优化是，比较解压出的值，如果是0，则不需要和上一行的数据进行异或（因为任何数和零异或都不变）。改进后可以将时间减小到30-40ms，又提升了一倍多。\n\n**step4**，在step3的基础，在行解压算法中，如果检测到行的剩余部分都是0，则直接跳过该行剩下的部分。改进后时间减小到了十几个ms。\n\n所以进过step2-4，性能提升了10倍多。","slug":"程序优化小记","published":1,"updated":"2019-02-21T14:56:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjserb4qu0004a7fyoqcgmo2i","content":"<p>最近做给一块蓝牙芯片做了一个decode的功能，数据是用RLE（<a href=\"http://en.wikipedia.org/wiki/Run-length_encoding\" title=\"http://en.wikipedia.org/wiki/Run-length_encoding\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/Run-length_encoding</a>）流程算法压缩的。为什么选用RLE算法，因为蓝牙芯片自身memory的局限性，最大只能获得不到2K的内存，还是不连续，而解压出的数据有2K多，所以需要一种能够边解压边发送的算法，查看现在流行的几种算法：霍夫曼算法，RLE算法，查表算法。</p>\n<p>&nbsp;</p>\n<table cellspacing=\"0\" cellpadding=\"2\" width=\"400\" border=\"0\"><br><tbody><br><tr><br><td valign=\"top\" width=\"100\">&nbsp;</td><br><td valign=\"top\" width=\"100\">压缩率</td><br><td valign=\"top\" width=\"100\">实现复杂度</td><br><td valign=\"top\" width=\"100\">内存占用量</td><br></tr><br><tr><br><td valign=\"top\" width=\"100\">霍夫曼算法</td><br><td valign=\"top\" width=\"100\">小</td><br><td valign=\"top\" width=\"100\">中</td><br><td valign=\"top\" width=\"100\">中</td><br></tr><br><tr><br><td valign=\"top\" width=\"100\">RLE算法</td><br><td valign=\"top\" width=\"100\">中</td><br><td valign=\"top\" width=\"100\">小</td><br><td valign=\"top\" width=\"100\">小</td><br></tr><br><tr><br><td valign=\"top\" width=\"100\">查表算法</td><br><td valign=\"top\" width=\"100\">大</td><br><td valign=\"top\" width=\"100\">大</td><br><td valign=\"top\" width=\"100\">大（一般几十K）</td><br></tr><br></tbody><br></table>\n\n<p>&nbsp;</p>\n<p>由于查表算法的内存占用量一般需要几十K，所以所以首先排除，而且比较霍夫曼算法和RLE算法，RLE算法在压缩率，实现复杂度，内存占用量三个方面都占有优势，所以最终选择RLE作为压缩和解码的方法。</p>\n<p>花了几天时间实现了改算法，今天对其进行了性能测试，发现解压目标数据需要200多ms，遂决定对其进行优化。</p>\n<p><strong>step1</strong>，还原行解压函数，减少一百多次的函数调用，但是实验的结果是反而增加了100多ms，猜测可能是有远指针调用，遂放弃。</p>\n<p><strong>step2</strong>，将行解压函数中，对堆内存的访问换成对栈上数据的访问，实验下来时间减小到了70-80ms，性能提升了一倍多。</p>\n<p><strong>step3</strong>，由于采用的RLE算法是经过改进过的，n + 1行的数据是和n行数据异或过，所以增加相同数据的几率，比如有三行数据时1010 1010，理论上是不能压缩的，当时经过异或，后面两行数据都变成了0000 0000，便可以采用RLE算法进行压缩。所以根据这一特性，在step3做的优化是，比较解压出的值，如果是0，则不需要和上一行的数据进行异或（因为任何数和零异或都不变）。改进后可以将时间减小到30-40ms，又提升了一倍多。</p>\n<p><strong>step4</strong>，在step3的基础，在行解压算法中，如果检测到行的剩余部分都是0，则直接跳过该行剩下的部分。改进后时间减小到了十几个ms。</p>\n<p>所以进过step2-4，性能提升了10倍多。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近做给一块蓝牙芯片做了一个decode的功能，数据是用RLE（<a href=\"http://en.wikipedia.org/wiki/Run-length_encoding\" title=\"http://en.wikipedia.org/wiki/Run-length_encoding\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/Run-length_encoding</a>）流程算法压缩的。为什么选用RLE算法，因为蓝牙芯片自身memory的局限性，最大只能获得不到2K的内存，还是不连续，而解压出的数据有2K多，所以需要一种能够边解压边发送的算法，查看现在流行的几种算法：霍夫曼算法，RLE算法，查表算法。</p>\n<p>&nbsp;</p>\n<table cellspacing=\"0\" cellpadding=\"2\" width=\"400\" border=\"0\"><br><tbody><br><tr><br><td valign=\"top\" width=\"100\">&nbsp;</td><br><td valign=\"top\" width=\"100\">压缩率</td><br><td valign=\"top\" width=\"100\">实现复杂度</td><br><td valign=\"top\" width=\"100\">内存占用量</td><br></tr><br><tr><br><td valign=\"top\" width=\"100\">霍夫曼算法</td><br><td valign=\"top\" width=\"100\">小</td><br><td valign=\"top\" width=\"100\">中</td><br><td valign=\"top\" width=\"100\">中</td><br></tr><br><tr><br><td valign=\"top\" width=\"100\">RLE算法</td><br><td valign=\"top\" width=\"100\">中</td><br><td valign=\"top\" width=\"100\">小</td><br><td valign=\"top\" width=\"100\">小</td><br></tr><br><tr><br><td valign=\"top\" width=\"100\">查表算法</td><br><td valign=\"top\" width=\"100\">大</td><br><td valign=\"top\" width=\"100\">大</td><br><td valign=\"top\" width=\"100\">大（一般几十K）</td><br></tr><br></tbody><br></table>\n\n<p>&nbsp;</p>\n<p>由于查表算法的内存占用量一般需要几十K，所以所以首先排除，而且比较霍夫曼算法和RLE算法，RLE算法在压缩率，实现复杂度，内存占用量三个方面都占有优势，所以最终选择RLE作为压缩和解码的方法。</p>\n<p>花了几天时间实现了改算法，今天对其进行了性能测试，发现解压目标数据需要200多ms，遂决定对其进行优化。</p>\n<p><strong>step1</strong>，还原行解压函数，减少一百多次的函数调用，但是实验的结果是反而增加了100多ms，猜测可能是有远指针调用，遂放弃。</p>\n<p><strong>step2</strong>，将行解压函数中，对堆内存的访问换成对栈上数据的访问，实验下来时间减小到了70-80ms，性能提升了一倍多。</p>\n<p><strong>step3</strong>，由于采用的RLE算法是经过改进过的，n + 1行的数据是和n行数据异或过，所以增加相同数据的几率，比如有三行数据时1010 1010，理论上是不能压缩的，当时经过异或，后面两行数据都变成了0000 0000，便可以采用RLE算法进行压缩。所以根据这一特性，在step3做的优化是，比较解压出的值，如果是0，则不需要和上一行的数据进行异或（因为任何数和零异或都不变）。改进后可以将时间减小到30-40ms，又提升了一倍多。</p>\n<p><strong>step4</strong>，在step3的基础，在行解压算法中，如果检测到行的剩余部分都是0，则直接跳过该行剩下的部分。改进后时间减小到了十几个ms。</p>\n<p>所以进过step2-4，性能提升了10倍多。</p>\n"},{"title":"Beating the Average------为什么要学习Lisp[转]","date":"2010-12-13T10:29:00.000Z","_content":"\n<span><span>出类拔萃</span></span>\n\nby Paul Graham\n\nApril 2001, rev. April 2003\n\n（这篇文章改自<span>2001</span>年给<span>Franz</span>开发者论坛的演讲）\n\n<span>1995</span>年夏天，我和我的朋友<span>Robert Morris</span>创办了一个公司叫<span>Viaweb.&nbsp;</span>我们的计划是写一个在线商店的建站软件。当时这个软件的新颖之处是它在我们的服务器端运行，用网页作为用户界面。\n\n当然，很多人当年也有同样的想法，但就我所知，<span>Viaweb</span>是第一款基于<span>web</span>的应用。我们很喜欢这个新想法，并以此为公司命名：<span>Viaweb</span>，因为我们的软件不是桌面软件而是通过网络来运行的。\n\n关于这个软件，另一件特别之处就是它主要用<span>Lisp</span>写就。它是面向大众用户的<span>Lisp</span>程序的先锋，在此之前<span>Lisp</span>几乎都是用在大学和实验室的象牙塔里。<span>[1]</span>\n\n**<span>The Secret Weapon</span>**\n\n<span>秘密武器</span>\n\n<span>Eric Raymond</span>写过一篇文章<span>&ldquo;</span>如何成为黑客<span>&rdquo;</span>，文中他教导黑客学前班的同学如何选择语言。他建议以<span>Python</span>和<span>Java</span>起步－因为容易学。严肃的黑客要修改<span>Unix</span>就得学<span>C</span>语言。最后，真正严肃的黑客应该考虑学习<span>Lisp:</span>\n\n<span>&nbsp;&ldquo;</span>悟道时那种深刻的醍醐灌顶的感受是<span>Lisp</span>值得学习的一个原因；这个体验会让你在后面的岁月里成为更好的程序员－即使你<span>&nbsp;&nbsp;</span>不常用<span>Lisp</span>写程序。<span>&rdquo;</span>\n\n这和常听到的学习拉丁语的论调很类似。学了不会帮你找到工作（语言学教授除外），但它会训练提高你的大脑，让你在用诸如英语之类的语言写作时能够得心应手。\n\n但是，等一下。这个比喻并不普遍适用。学习拉丁语找不着工作是因为没人说拉丁语。如果你用拉丁语写作，没人能理解你。但是<span>Lisp</span>是计算机语言，计算机可不挑剔程序员用什么语言。\n\n如果像他说的，<span>Lisp</span>能让你成为更好的程序员，为啥不用呢？如果一个画家弄了一杆能让他下笔犹如神的画笔，在我看来，他画啥画都想用的，不是吗？我不是要取笑<span>Eric Raymond</span>。总的来讲，他的建议很好。他关于<span>Lisp</span>的说法基本是传统观点。但是这个传统观点自相矛盾：<span>Lisp</span>会让你成为更好的程序员，但你不会去用它。\n\n为什么不呢？毕竟编程语言只是工具。如果<span>Lisp</span>写的程序更好的话，你就应该用它。如果用它写得烂，那谁还稀罕呢？\n\n这不只是理论上的问题。软件行业竞争残酷－优胜劣汰。其他条件相同，软件写的又快又好公司会把对手挤垮。当你开始创业时，会对这一点深有体会。创业公司常处于要么盆满钵满要么一穷二白的位置。你最终要么赚翻，要么潦倒。如果你对技术押错宝了，竞争对手就会来灭掉你。\n\n<span>Robert</span>和我都精于<span>Lisp</span>，我们没有理由不相信自己的直觉而弃用<span>Lisp.&nbsp;</span>我们知道其他人都在用<span>C++</span>和<span>Perl</span>写软件。我们也知道这没啥大不了的。如果你选择那样的技术，就要在<span>Windows</span>上跑。选择技术时，必须忽略其他人在用什么，只考虑什么能工作得最好。\n\n这在创业公司里更为适用。大公司里，你可以像其他所有大公司一样做事。但是创业公司里，你不能亦步亦趋。我不认为很多人意识到这一点了（即使是创业公司里的家伙们）。\n\n大公司每年平均增长<span>10%</span>。所以你要是掌管一个大公司的话，你按照大公司的通用做事方式，你也就种瓜得瓜，种豆得豆－得到<span>10%</span>的增长。\n\n创业公司里的情况也一样。如果你按照大多数创业公司的方式去做事，你也就只能期望业绩达到平均水平。这里的问题在于，平均水平意味着你要关门大吉。创业公司的成活率是大大低于<span>50%</span>的。所以，如果你开公司，最好有点与众不同。否则，麻烦就大了。\n\n<span>1995</span>年那会，我们知道一个竞争者尚未参透的秘密（现在也有好多蒙在鼓里呢）：如果你的软件在服务器端运行，就可以用任何你想用的语言。要是写桌面应用，很强势的一个观点就是要用操作系统的语言写应用。十年前，写应用这意味着用<span>C</span>语言写。但是，对于基于<span>Web</span>的软件，而你又有语言和操作系统的源码时，你可以用任何想用的语言。\n\n然而，语言选择的自由是把双刃剑。现在你可以选了，你得思考选哪一个。那些拒绝变化的鸵鸟公司危险了：它们的对手可没有把头埋进沙子。\n\n你会选哪个语言呢？我们选择<span>Lisp.&nbsp;</span>很重要的一点就是，这个市场上快速开发很重要。我们都白手起家，一个公司要是能比对手更早的做完新特性就很有优势。我们知道<span>Lisp</span>用于快速开发相当合适，而基于服务器的应用会放大这个优势－因为软件写完就可以立即发布。\n\n如果其他公司不想用<span>Lisp,&nbsp;</span>真好。这在技术上会让我们有一个优势，能帮上忙的来者不拒。当我们创立<span>Viaweb</span>时，我们没有商业经验，不懂得市场推广，招聘员工，融资或者吸引用户。我们几个甚至都没工作过。我们唯一玩的转的就是写软件。我们寄希望于此。软件开发方面的任何优势，我们都不会放过。\n\n你可以说采用<span>Lisp</span>是一个试验。我们的算盘是这样打的：如果我们用<span>Lisp</span>，我们功能会开发的比对手快，也可以做一些他们做不到的事情。<span>Lisp</span>很高层，我们就不需要大的开发组，我们的开销就很小。如果行得通，我们就能提供物美价廉的产品，还能盈利。最终，赢得所有用户，我们的对手则失掉用户最终关门。这就是我们当时希望的过程。\n\n试验的结果如何？居然行得通。我们最终遇见了很多竞争者，<span>20</span>～<span>30</span>个吧，但没有一个能和我们针尖对麦芒。我们服务器上跑着一个<span>&ldquo;</span>所见即所得<span>&rdquo;</span>的在线商店编辑器，用起来却和桌面应用没啥差别。我们的对手们用的是<span>CGI</span>脚本。功能上我们总能先他们一步。有时，绝望中的对手想增加几个我们没有的功能。但是<span>Lisp</span>的开发周期很快，我们可以在他们发布软文宣传的一两天之内就复制一个新功能。当记者们读到他们的公关稿然后打电话给我们来问时，我们也有这个功能了。\n\n我们的竞争对手也许觉得我们有什么秘密武器－能够读到他们脑子里的计划。实际上我们没有，比他们想的要简单。没人泄密他们的新功能，我们只是比任何人预期的开发速度更快而已。\n\n我九岁时看过一部<span>The Day of the Jackal,&nbsp;</span>由<span>Frederick Forsyth</span>执导<span>.&nbsp;</span>主角是个刺客，要去刺杀法国总统。他必须通过警察，上到一个公寓能够俯瞰总统的行车路线。他乔装成一个跛老头，警察根本没有注意到他。\n\n我们的秘密武器也差不多。我们用一个怪异的人工智能语言写软件，语法难看，充斥着括号。很多年以来，对<span>Lisp</span>的这种描述让我很不自在。现在，却成了我们的优势。商业上，拥有一项对手根本不懂的技术是无价的，正如战争一样，出其不意和厉兵秣马一样重要。\n\n嗯，我有点窘：开发<span>Viaweb</span>时，公开场合我对<span>Lisp</span>只字未提。我们不向媒体说，如果你在网站上搜，也就只能找到我简历里提到的两本书。这是有意为之。如果他们不知道或者不关心我们用什么开发，我也乐于保持现状。<span>[2]</span>\n\n理解我们技术最好的是我们的客户。他们不关心<span>Viaweb</span>用什么写的，但是他们注意到软件跑得很好。几分钟就能建好一个漂亮的在线商店。然后，口碑就传开了，用户越来越多。<span>1997</span>年底时，我们有<span>500</span>个用户。六个月后，<span>Yahoo</span>买我们时，有了<span>1070</span>个用户。今天，成了<span>Yahoo Store</span>的<span>Viaweb</span>还统治着市场，是<span>Yahoo</span>产品线中很能盈利的一员。那些由<span>Viaweb</span>建成的商店成了<span>Yahoo Shopping</span>的基础。我<span>1999</span>年离开<span>Yahoo</span>，我不知道用户数量的具体数字，但是最近一次听到的是大约<span>20</span>，<span>000.</span>\n\n**<span>The Blub Paradox</span>**\n\n**<span>Blub</span>**<span>困境</span>\n\n<span>Lisp</span>到底强在哪儿？如果<span>Lisp</span>真那么棒，为啥没人用呢？听起来文绉绉的问题，实际上答案很直接。<span>Lisp</span>很棒不是因为某些痴迷者才能看到的品质，而是因为它就是所有语言中最强大的。没有普及的原因是选择编程语言不仅仅是个技术问题，而且是思维习惯－再没有比思维习惯改变得更慢得东西了。当然，这两个答案都需要解释。\n\n我以一个不那么惊世骇俗的论断开始：编程语言的能力各有千秋。\n\n高级语言比机器语言强大－这是个不争的事实。如今大多数程序员都赞成<span>&rdquo;</span>通常不要用机器语言写程序<span>&ldquo;</span>的观点。相反，你应当用高级语言，然后用编译器把程序编成机器语言。这个想法已经为硬件设计所采纳：自<span>80</span>年代起，指令集就专为编译器设计而不那么考虑我们程序员了。\n\n人人都知道你的程序要是全用机器语言写就是个错误。但是另外一个原则却不为人熟知：如果你要从一堆语言里挑一个出来（其他条件都相同的情况下），要是不选择最强大的－这也是个错误。<span>[3]</span>\n\n这个原则也有很多例外。如果你的程序要和另外一个用某种语言写的程序打交道，那么通常新程序采用同样的语言是个好选择。如果你的程序只是要干点简单的活，比如数据处理或者位操作之类的，你可以用稍微低级一点的语言，还能带来速度上的优势。如果你写一个试验原型，你最好找库函数能满足要求的随便什么语言。但是大体来讲，对于应用软件，你需要用最强大的（也不太慢的）语言，其他的选择都是错误－这一定程度上和用机器语言写程序是一码事。\n\n你知道机器语言很低级。但是，至少某种社会共识认为高级语言通常被认为是一样强大的。但事实并非如此。<span>&ldquo;</span>高级语言<span>&rdquo;</span>这个技术词汇实际上没有表明任何确定的东西。并没有一个位于机器语言和高级语言之间的分水岭。所有语言都位于一个由不同抽象能力构成的谱系<span>[4]</span>之中：从最强大的语言到机器语言，位置反映着语言本身的能力的差别。\n\n拿<span>Cobol</span>来说，它是个高级语言－因为它能被编译成机器语言。真有人会跳出来辩护说<span>Cobol</span>和<span>Python</span>一样强吗？它要比<span>Python</span>更接近机器语言。\n\n或者<span>Perl4</span>又如何呢？<span>Perl4</span>到<span>Perl5</span>之间，词法闭包被加进来了。大多数<span>Perl</span>黑客都同意<span>Perl5</span>比<span>Perl4</span>更强了。但是，一旦你同意这一点，你也就同意了一个高级语言比另一个更强大。直接的推论就是，除了特殊情况，你应当用最强大的语言。\n\n然而现实中这个想法很少能实现它的结论。过了一定的年龄，程序员很少再会主动的更换语言了。他们手上碰巧用起来的随便什么语言，都被奉为圭臬。\n\n程序员对于喜好的语言偏爱有加，不能自拔。我不打算伤任何人的感情，所以解释观点时，我用一个虚构的语言：<span>Blub</span>。<span>Blub</span>位于抽象谱系的中间，它不是最高级的语言，但也比<span>Cobol</span>和机器语言强。\n\n实际上，我们虚构的<span>Blub</span>程序员不会用机器码或者<span>Cobol</span>：当然他们不会去写机器码－那是编译器该干的事情。对于<span>Cobol</span>，他们纳闷那些人是怎么用这语言干活的－<span>&nbsp;Cobol</span>连<span>x</span>功能都没有（<span>x</span>是一个<span>Blub</span>的功能）。\n\n只要我们的<span>Blub</span>程序员朝下看，他就知道在朝下看－比<span>Blub</span>弱的语言一眼就能看出来，因为它们缺少一些<span>Blub</span>的功能。但是如果向上看，他不会意识到。他认为所看到的都是些怪异的语言。他也许会觉得看到的语言都和<span>Blub</span>差不多，只是花哨的东西太多。<span>Blub</span>对他就够好了－因为，他用<span>Blub</span>思考。\n\n当我们切换到使用更高级的语言的程序员的视角，我们会发现他朝下会看到<span>Blub</span>：你怎么能用<span>Blub</span>干活呢？它连<span>y</span>功能都没有哎。\n\n推理一下，只有理解最强大的语言的程序员才能一览众山，看到所有语言能力间的差别。（这也许就是<span>Eric Raymond</span>说<span>Lisp</span>能让你成为一个更好的程序员的意思。）你不能相信其他人的观点，因为<span>Blub</span>困境：他们对自己碰巧用上的语言很满意，因为这语言描绘了他们思考程序的方式。\n\n我从自己的经验里知道这一点，高中时我用<span>Basic</span>写程序。这语言甚至都不支持递归。现在难以想象写程序不用递归。可那时，我可不稀罕。我用<span>Basic</span>思考，我写得很顺，我所触及皆以掌握。\n\n<span>Eric Raymond</span>所推荐的<span>5</span>种语言位于能力谱系的不同位置。它们的相对位置如何讨论起来比较敏感。我要说的是，我认为<span>Lisp</span>最高。要支持我的观点，我要告诉你一样其它<span>4</span>种语言都没有的东西：离了宏，你咋能编程呢？<span>[5]</span>\n\n很多语言都有叫做宏的东西。但是<span>Lisp</span>的宏独树一帜。信不信由你，宏和括号联系紧密。<span>Lisp</span>的设计者把那一堆括号加进来可不是为了标新立异。对于<span>Blub</span>程序员，<span>Lisp</span>看起来很怪。但是那些括号事出有因。它们是<span>Lisp</span>与其它语言本质区别的外在表现。\n\n<span>Lisp</span>代码由<span>Lisp</span>数据对象构成。不是在像<span>&rdquo;</span>源码文件由字符构成<span>&ldquo;</span>或者<span>&rdquo;</span>字符串也是该语言支持的数据类型之一<span>&ldquo;</span>这样的浅显的层次上：在由解析器读进内存后，<span>Lisp</span>代码就由你能遍历的数据结构构成了。\n\n如果你了解编译器的工作原理，其实解析器干的活不多：要说<span>Lisp</span>的语法奇怪，还不如说<span>Lisp</span>没有语法。你写程序实际上是在写语法树－而其它语言需要编译器生成这种内部表示。你的程序完全可以存取这些语法树。你可以写程序去操作它。在<span>Lisp</span>里，这些程序叫做宏。它们是写程序的程序。\n\n写程序的程序？你哪天才能用得到啊？如果你用<span>Cobol</span>思考，不常用。而用<span>Lisp</span>思考的话，答案就是：天天都用。这里要是我能举个例子说明就好了。但是这样对于不懂<span>Lisp</span>的人就是在废话了；要是从头到尾讲明白这里篇幅也不够，在<span>Ansi Common Lisp</span>里我的进度很快，但也到<span>160</span>页才开始讲宏。\n\n但我想给一点有说服力的论据。<span>Viaweb</span>的编辑器代码里有<span>20</span>～<span>25%</span>的宏。宏比普通的<span>Lisp</span>程序难写，不该用的时候用就是画蛇添足。所以我们代码里的每个宏都有用。这意味着<span>20</span>～<span>25%</span>的代码是其它语言没法容易做到的。然而，挑剔的<span>Blub</span>程序员也许会找找我所声称的<span>Lisp</span>的神秘力量，这一堆宏应该能让他们迷惑不已。我们写这些宏不是为了自娱自乐－我们是个小创业公司，我们必须疯狂写程序，这样才能与竞争对手之间构筑技术上的壁垒。\n\n怀疑的人会说这有什么联系吗？我们代码里的一大块是在做其它语言很难做到的事情，发布的软件做了很多竞争对手的软件没法做到的事情。也许这其中有联系。我鼓励你顺着这条线索再走走。拄着拐杖的跛老头也许还有更多去了解。\n\n**<span>Aikido for Startups</span>**\n\n<span>创业公司的合气道</span>\n\n但是我不期望能让任何人（过了<span>25</span>岁）去学<span>Lisp</span>。这篇文章的目的不是要改变谁的思想，而是让那些有兴趣用<span>Lisp</span>的人更加确信－这些人知道<span>Lisp</span>很强大，但是因为它应用不广泛而有所顾虑。在竞争中，这是个优势。如果你的竞争对手不了解，<span>Lisp</span>的力量会加倍。\n\n如果你想在创业公司里用<span>Lisp</span>，不用担心它不流行。你应当期望保持现状。事实也如此。程序设计语言的天性就是让人们乐于用它。计算机硬件的发展比个人习惯的发展快得多，程序设计的实践通常比处理器的进步落后<span>10</span>～<span>20</span>年。在<span>MIT</span>，他们<span>60'</span>就开始用高级语言写程序了，但是很多公司到了<span>80'</span>还在用机器语言。我打赌，很多人会一直用机器语言写下去，直到有一天，处理器换成了<span>RISC</span>指令集－就像急着下班的酒吧服务员急着关门一样，端掉这些人的饭碗。\n\n通常，技术进步很快。但是程序设计语言不同：它不只是技术，它是程序员思考的工具。语言是技术和信仰的混合体<span>[6]</span>。于是，位于中间的语言（也就是中级程序员用的那些语言）动得跟冰山一样慢。<span>60'</span>由<span>Lisp</span>引入的垃圾回收功能，现在开始被接受。词法闭包，由<span>Lisp</span>在<span>70'</span>引入的，现在其它语言还没有广泛采纳。<span>60'</span>中<span>Lisp</span>引入的宏，现在还是处女地。\n\n很明显，中间的语言族有着巨大的惯性。我不认为你能和这个力量对抗。相反，你要向合气道的选手学习：以彼之道，还治彼身。\n\n如果你在大公司工作，这不太容易。你很难说你的服秃顶上司同意用<span>Lisp</span>写东西，他刚才才读到另一种语言新鲜出炉（就像<span>Ada</span>二十年前那样），正要征服世界。但是你要是为创业公司工作，没有秃顶老板干涉，你就能像我们那样化解<span>Blub</span>困境，转为自己的优势：你可以用那些黏糊在中间语言的竞争者不能采用的技术。\n\n如果你为创业公司工作，这儿有个估量对手的妙招：读读他们的招聘职位列表。他们网站上其它的东西无非是些股票图片和乏味的说明，但是招聘职位却必须反映他们要找的人，否则会引来一堆无关的求职者。\n\n在<span>Viaweb</span>工作的时候，我读了不少职位描述。大约每个月都有一个新的竞争对手加入这个行当。检查了他们的在线<span>Demo</span>后，我做的第一件事就是看看他们的招聘页。过了几年，我就知道要当心哪家。工作描述里要是<span>IT</span>类的成分越多，这家公司就越不构成威胁。对我们最安全的就是那些要求<span>Oracle</span>经验的，永远都不用担心他们。他们要是招聘<span>C++</span>或者<span>Java</span>开发者，也不用担心。但是要是找的是<span>Perl</span>或者<span>Python</span>程序员，就有点威胁了－这公司至少在技术方面是由真正的黑客掌管的。要是当初我看见一家招<span>Lisp</span>黑客的，我一定会忧心忡忡的。\n\n－－－－－\n\n注：\n\n<span>[1] Viaweb</span>一开始有两块：编辑器（用<span>Lisp</span>写的，客户用来建站）和订单系统（用<span>C</span>写的，处理订单）。第一版主要是<span>Lisp,</span>因为订单系统很小。后来增加了两个模块：<span>C</span>写的图片生成器以及<span>Perl</span>写的结算工具。\n\n<span>2003</span>年一月，<span>Yahoo</span>发布了新的编辑器，用<span>C++</span>和<span>Perl</span>写的。也很难讲这程序就不再是用<span>Lisp</span>写的了：因为要把它翻译成<span>C++</span>，他们先得写一个<span>Lisp</span>解释器－页面生成模板的代码据我所知还是<span>Lisp</span>的。（参考<span>Greenspun's Tenth Rule</span>。）\n\n<span>[2] Robert Morris</span>说我没必要那么保密。因为即使竞争对手知道我们用<span>Lisp</span>，他们也不会理解原因的：<span>&rdquo;</span>如果他们足够聪明，那他们应当已经在用<span>Lisp</span>了。<span>&ldquo;</span>\n\n<span>[3]&nbsp;</span>所有语言在图灵相等这一层上是一样强大的。但是这和程序员的意思不一样。（没人想在图灵机上写程序。）程序员在意的语言的能力也许不能形式化的定义，但一种解释就是，你想要在弱的语言里的要某种强语言的功能，就只能用弱语言去写一个解释器。如果<span>A</span>语言由一个操作可以把字符串里的空格移走，而<span>B</span>语言没有，这并不意味着<span>B</span>语言弱，因为你可以写个函数来完成这件事。但是要是<span>A</span>支持递归，而<span>B</span>不支持，这你就不好写个库函数来完成了。\n\n<span>[4]&nbsp;</span>对<span>Nerd</span>们的注解：可能是个格，顶尖；形状不重要，这里至少有个偏序关系。\n\n<span>[5]&nbsp;</span>把宏当作一个单独的功能有点误导。实践中，宏的作用通常由其它一些<span>Lisp</span>特性比如词法闭包以及<span>rest</span>参数大大加强。\n\n<span>[6]&nbsp;</span>这样，比较编程语言要么挑起信仰口水战要么就只能在绝对中立的教材里，这只能是人类学的工作了。想追求平静，保护自己的所有的人会避免这个话题。但是，这问题只是一半和信仰相关；还有值得研究的东西，特别是你要设计一个新语言时。\n\n译注：\n\n[1] 翻译时中英混排，完成时提取中文可以用grep:&nbsp;\n\n&nbsp;\n\nfrom:[http://article.yeeyan.org/view/11304/49653](http://article.yeeyan.org/view/11304/49653)","source":"_posts/Beating-the-Average-为什么要学习Lisp-转.md","raw":"---\ntitle: 'Beating the Average------为什么要学习Lisp[转]'\ntags: []\ndate: 2010-12-13 18:29:00\n---\n\n<span><span>出类拔萃</span></span>\n\nby Paul Graham\n\nApril 2001, rev. April 2003\n\n（这篇文章改自<span>2001</span>年给<span>Franz</span>开发者论坛的演讲）\n\n<span>1995</span>年夏天，我和我的朋友<span>Robert Morris</span>创办了一个公司叫<span>Viaweb.&nbsp;</span>我们的计划是写一个在线商店的建站软件。当时这个软件的新颖之处是它在我们的服务器端运行，用网页作为用户界面。\n\n当然，很多人当年也有同样的想法，但就我所知，<span>Viaweb</span>是第一款基于<span>web</span>的应用。我们很喜欢这个新想法，并以此为公司命名：<span>Viaweb</span>，因为我们的软件不是桌面软件而是通过网络来运行的。\n\n关于这个软件，另一件特别之处就是它主要用<span>Lisp</span>写就。它是面向大众用户的<span>Lisp</span>程序的先锋，在此之前<span>Lisp</span>几乎都是用在大学和实验室的象牙塔里。<span>[1]</span>\n\n**<span>The Secret Weapon</span>**\n\n<span>秘密武器</span>\n\n<span>Eric Raymond</span>写过一篇文章<span>&ldquo;</span>如何成为黑客<span>&rdquo;</span>，文中他教导黑客学前班的同学如何选择语言。他建议以<span>Python</span>和<span>Java</span>起步－因为容易学。严肃的黑客要修改<span>Unix</span>就得学<span>C</span>语言。最后，真正严肃的黑客应该考虑学习<span>Lisp:</span>\n\n<span>&nbsp;&ldquo;</span>悟道时那种深刻的醍醐灌顶的感受是<span>Lisp</span>值得学习的一个原因；这个体验会让你在后面的岁月里成为更好的程序员－即使你<span>&nbsp;&nbsp;</span>不常用<span>Lisp</span>写程序。<span>&rdquo;</span>\n\n这和常听到的学习拉丁语的论调很类似。学了不会帮你找到工作（语言学教授除外），但它会训练提高你的大脑，让你在用诸如英语之类的语言写作时能够得心应手。\n\n但是，等一下。这个比喻并不普遍适用。学习拉丁语找不着工作是因为没人说拉丁语。如果你用拉丁语写作，没人能理解你。但是<span>Lisp</span>是计算机语言，计算机可不挑剔程序员用什么语言。\n\n如果像他说的，<span>Lisp</span>能让你成为更好的程序员，为啥不用呢？如果一个画家弄了一杆能让他下笔犹如神的画笔，在我看来，他画啥画都想用的，不是吗？我不是要取笑<span>Eric Raymond</span>。总的来讲，他的建议很好。他关于<span>Lisp</span>的说法基本是传统观点。但是这个传统观点自相矛盾：<span>Lisp</span>会让你成为更好的程序员，但你不会去用它。\n\n为什么不呢？毕竟编程语言只是工具。如果<span>Lisp</span>写的程序更好的话，你就应该用它。如果用它写得烂，那谁还稀罕呢？\n\n这不只是理论上的问题。软件行业竞争残酷－优胜劣汰。其他条件相同，软件写的又快又好公司会把对手挤垮。当你开始创业时，会对这一点深有体会。创业公司常处于要么盆满钵满要么一穷二白的位置。你最终要么赚翻，要么潦倒。如果你对技术押错宝了，竞争对手就会来灭掉你。\n\n<span>Robert</span>和我都精于<span>Lisp</span>，我们没有理由不相信自己的直觉而弃用<span>Lisp.&nbsp;</span>我们知道其他人都在用<span>C++</span>和<span>Perl</span>写软件。我们也知道这没啥大不了的。如果你选择那样的技术，就要在<span>Windows</span>上跑。选择技术时，必须忽略其他人在用什么，只考虑什么能工作得最好。\n\n这在创业公司里更为适用。大公司里，你可以像其他所有大公司一样做事。但是创业公司里，你不能亦步亦趋。我不认为很多人意识到这一点了（即使是创业公司里的家伙们）。\n\n大公司每年平均增长<span>10%</span>。所以你要是掌管一个大公司的话，你按照大公司的通用做事方式，你也就种瓜得瓜，种豆得豆－得到<span>10%</span>的增长。\n\n创业公司里的情况也一样。如果你按照大多数创业公司的方式去做事，你也就只能期望业绩达到平均水平。这里的问题在于，平均水平意味着你要关门大吉。创业公司的成活率是大大低于<span>50%</span>的。所以，如果你开公司，最好有点与众不同。否则，麻烦就大了。\n\n<span>1995</span>年那会，我们知道一个竞争者尚未参透的秘密（现在也有好多蒙在鼓里呢）：如果你的软件在服务器端运行，就可以用任何你想用的语言。要是写桌面应用，很强势的一个观点就是要用操作系统的语言写应用。十年前，写应用这意味着用<span>C</span>语言写。但是，对于基于<span>Web</span>的软件，而你又有语言和操作系统的源码时，你可以用任何想用的语言。\n\n然而，语言选择的自由是把双刃剑。现在你可以选了，你得思考选哪一个。那些拒绝变化的鸵鸟公司危险了：它们的对手可没有把头埋进沙子。\n\n你会选哪个语言呢？我们选择<span>Lisp.&nbsp;</span>很重要的一点就是，这个市场上快速开发很重要。我们都白手起家，一个公司要是能比对手更早的做完新特性就很有优势。我们知道<span>Lisp</span>用于快速开发相当合适，而基于服务器的应用会放大这个优势－因为软件写完就可以立即发布。\n\n如果其他公司不想用<span>Lisp,&nbsp;</span>真好。这在技术上会让我们有一个优势，能帮上忙的来者不拒。当我们创立<span>Viaweb</span>时，我们没有商业经验，不懂得市场推广，招聘员工，融资或者吸引用户。我们几个甚至都没工作过。我们唯一玩的转的就是写软件。我们寄希望于此。软件开发方面的任何优势，我们都不会放过。\n\n你可以说采用<span>Lisp</span>是一个试验。我们的算盘是这样打的：如果我们用<span>Lisp</span>，我们功能会开发的比对手快，也可以做一些他们做不到的事情。<span>Lisp</span>很高层，我们就不需要大的开发组，我们的开销就很小。如果行得通，我们就能提供物美价廉的产品，还能盈利。最终，赢得所有用户，我们的对手则失掉用户最终关门。这就是我们当时希望的过程。\n\n试验的结果如何？居然行得通。我们最终遇见了很多竞争者，<span>20</span>～<span>30</span>个吧，但没有一个能和我们针尖对麦芒。我们服务器上跑着一个<span>&ldquo;</span>所见即所得<span>&rdquo;</span>的在线商店编辑器，用起来却和桌面应用没啥差别。我们的对手们用的是<span>CGI</span>脚本。功能上我们总能先他们一步。有时，绝望中的对手想增加几个我们没有的功能。但是<span>Lisp</span>的开发周期很快，我们可以在他们发布软文宣传的一两天之内就复制一个新功能。当记者们读到他们的公关稿然后打电话给我们来问时，我们也有这个功能了。\n\n我们的竞争对手也许觉得我们有什么秘密武器－能够读到他们脑子里的计划。实际上我们没有，比他们想的要简单。没人泄密他们的新功能，我们只是比任何人预期的开发速度更快而已。\n\n我九岁时看过一部<span>The Day of the Jackal,&nbsp;</span>由<span>Frederick Forsyth</span>执导<span>.&nbsp;</span>主角是个刺客，要去刺杀法国总统。他必须通过警察，上到一个公寓能够俯瞰总统的行车路线。他乔装成一个跛老头，警察根本没有注意到他。\n\n我们的秘密武器也差不多。我们用一个怪异的人工智能语言写软件，语法难看，充斥着括号。很多年以来，对<span>Lisp</span>的这种描述让我很不自在。现在，却成了我们的优势。商业上，拥有一项对手根本不懂的技术是无价的，正如战争一样，出其不意和厉兵秣马一样重要。\n\n嗯，我有点窘：开发<span>Viaweb</span>时，公开场合我对<span>Lisp</span>只字未提。我们不向媒体说，如果你在网站上搜，也就只能找到我简历里提到的两本书。这是有意为之。如果他们不知道或者不关心我们用什么开发，我也乐于保持现状。<span>[2]</span>\n\n理解我们技术最好的是我们的客户。他们不关心<span>Viaweb</span>用什么写的，但是他们注意到软件跑得很好。几分钟就能建好一个漂亮的在线商店。然后，口碑就传开了，用户越来越多。<span>1997</span>年底时，我们有<span>500</span>个用户。六个月后，<span>Yahoo</span>买我们时，有了<span>1070</span>个用户。今天，成了<span>Yahoo Store</span>的<span>Viaweb</span>还统治着市场，是<span>Yahoo</span>产品线中很能盈利的一员。那些由<span>Viaweb</span>建成的商店成了<span>Yahoo Shopping</span>的基础。我<span>1999</span>年离开<span>Yahoo</span>，我不知道用户数量的具体数字，但是最近一次听到的是大约<span>20</span>，<span>000.</span>\n\n**<span>The Blub Paradox</span>**\n\n**<span>Blub</span>**<span>困境</span>\n\n<span>Lisp</span>到底强在哪儿？如果<span>Lisp</span>真那么棒，为啥没人用呢？听起来文绉绉的问题，实际上答案很直接。<span>Lisp</span>很棒不是因为某些痴迷者才能看到的品质，而是因为它就是所有语言中最强大的。没有普及的原因是选择编程语言不仅仅是个技术问题，而且是思维习惯－再没有比思维习惯改变得更慢得东西了。当然，这两个答案都需要解释。\n\n我以一个不那么惊世骇俗的论断开始：编程语言的能力各有千秋。\n\n高级语言比机器语言强大－这是个不争的事实。如今大多数程序员都赞成<span>&rdquo;</span>通常不要用机器语言写程序<span>&ldquo;</span>的观点。相反，你应当用高级语言，然后用编译器把程序编成机器语言。这个想法已经为硬件设计所采纳：自<span>80</span>年代起，指令集就专为编译器设计而不那么考虑我们程序员了。\n\n人人都知道你的程序要是全用机器语言写就是个错误。但是另外一个原则却不为人熟知：如果你要从一堆语言里挑一个出来（其他条件都相同的情况下），要是不选择最强大的－这也是个错误。<span>[3]</span>\n\n这个原则也有很多例外。如果你的程序要和另外一个用某种语言写的程序打交道，那么通常新程序采用同样的语言是个好选择。如果你的程序只是要干点简单的活，比如数据处理或者位操作之类的，你可以用稍微低级一点的语言，还能带来速度上的优势。如果你写一个试验原型，你最好找库函数能满足要求的随便什么语言。但是大体来讲，对于应用软件，你需要用最强大的（也不太慢的）语言，其他的选择都是错误－这一定程度上和用机器语言写程序是一码事。\n\n你知道机器语言很低级。但是，至少某种社会共识认为高级语言通常被认为是一样强大的。但事实并非如此。<span>&ldquo;</span>高级语言<span>&rdquo;</span>这个技术词汇实际上没有表明任何确定的东西。并没有一个位于机器语言和高级语言之间的分水岭。所有语言都位于一个由不同抽象能力构成的谱系<span>[4]</span>之中：从最强大的语言到机器语言，位置反映着语言本身的能力的差别。\n\n拿<span>Cobol</span>来说，它是个高级语言－因为它能被编译成机器语言。真有人会跳出来辩护说<span>Cobol</span>和<span>Python</span>一样强吗？它要比<span>Python</span>更接近机器语言。\n\n或者<span>Perl4</span>又如何呢？<span>Perl4</span>到<span>Perl5</span>之间，词法闭包被加进来了。大多数<span>Perl</span>黑客都同意<span>Perl5</span>比<span>Perl4</span>更强了。但是，一旦你同意这一点，你也就同意了一个高级语言比另一个更强大。直接的推论就是，除了特殊情况，你应当用最强大的语言。\n\n然而现实中这个想法很少能实现它的结论。过了一定的年龄，程序员很少再会主动的更换语言了。他们手上碰巧用起来的随便什么语言，都被奉为圭臬。\n\n程序员对于喜好的语言偏爱有加，不能自拔。我不打算伤任何人的感情，所以解释观点时，我用一个虚构的语言：<span>Blub</span>。<span>Blub</span>位于抽象谱系的中间，它不是最高级的语言，但也比<span>Cobol</span>和机器语言强。\n\n实际上，我们虚构的<span>Blub</span>程序员不会用机器码或者<span>Cobol</span>：当然他们不会去写机器码－那是编译器该干的事情。对于<span>Cobol</span>，他们纳闷那些人是怎么用这语言干活的－<span>&nbsp;Cobol</span>连<span>x</span>功能都没有（<span>x</span>是一个<span>Blub</span>的功能）。\n\n只要我们的<span>Blub</span>程序员朝下看，他就知道在朝下看－比<span>Blub</span>弱的语言一眼就能看出来，因为它们缺少一些<span>Blub</span>的功能。但是如果向上看，他不会意识到。他认为所看到的都是些怪异的语言。他也许会觉得看到的语言都和<span>Blub</span>差不多，只是花哨的东西太多。<span>Blub</span>对他就够好了－因为，他用<span>Blub</span>思考。\n\n当我们切换到使用更高级的语言的程序员的视角，我们会发现他朝下会看到<span>Blub</span>：你怎么能用<span>Blub</span>干活呢？它连<span>y</span>功能都没有哎。\n\n推理一下，只有理解最强大的语言的程序员才能一览众山，看到所有语言能力间的差别。（这也许就是<span>Eric Raymond</span>说<span>Lisp</span>能让你成为一个更好的程序员的意思。）你不能相信其他人的观点，因为<span>Blub</span>困境：他们对自己碰巧用上的语言很满意，因为这语言描绘了他们思考程序的方式。\n\n我从自己的经验里知道这一点，高中时我用<span>Basic</span>写程序。这语言甚至都不支持递归。现在难以想象写程序不用递归。可那时，我可不稀罕。我用<span>Basic</span>思考，我写得很顺，我所触及皆以掌握。\n\n<span>Eric Raymond</span>所推荐的<span>5</span>种语言位于能力谱系的不同位置。它们的相对位置如何讨论起来比较敏感。我要说的是，我认为<span>Lisp</span>最高。要支持我的观点，我要告诉你一样其它<span>4</span>种语言都没有的东西：离了宏，你咋能编程呢？<span>[5]</span>\n\n很多语言都有叫做宏的东西。但是<span>Lisp</span>的宏独树一帜。信不信由你，宏和括号联系紧密。<span>Lisp</span>的设计者把那一堆括号加进来可不是为了标新立异。对于<span>Blub</span>程序员，<span>Lisp</span>看起来很怪。但是那些括号事出有因。它们是<span>Lisp</span>与其它语言本质区别的外在表现。\n\n<span>Lisp</span>代码由<span>Lisp</span>数据对象构成。不是在像<span>&rdquo;</span>源码文件由字符构成<span>&ldquo;</span>或者<span>&rdquo;</span>字符串也是该语言支持的数据类型之一<span>&ldquo;</span>这样的浅显的层次上：在由解析器读进内存后，<span>Lisp</span>代码就由你能遍历的数据结构构成了。\n\n如果你了解编译器的工作原理，其实解析器干的活不多：要说<span>Lisp</span>的语法奇怪，还不如说<span>Lisp</span>没有语法。你写程序实际上是在写语法树－而其它语言需要编译器生成这种内部表示。你的程序完全可以存取这些语法树。你可以写程序去操作它。在<span>Lisp</span>里，这些程序叫做宏。它们是写程序的程序。\n\n写程序的程序？你哪天才能用得到啊？如果你用<span>Cobol</span>思考，不常用。而用<span>Lisp</span>思考的话，答案就是：天天都用。这里要是我能举个例子说明就好了。但是这样对于不懂<span>Lisp</span>的人就是在废话了；要是从头到尾讲明白这里篇幅也不够，在<span>Ansi Common Lisp</span>里我的进度很快，但也到<span>160</span>页才开始讲宏。\n\n但我想给一点有说服力的论据。<span>Viaweb</span>的编辑器代码里有<span>20</span>～<span>25%</span>的宏。宏比普通的<span>Lisp</span>程序难写，不该用的时候用就是画蛇添足。所以我们代码里的每个宏都有用。这意味着<span>20</span>～<span>25%</span>的代码是其它语言没法容易做到的。然而，挑剔的<span>Blub</span>程序员也许会找找我所声称的<span>Lisp</span>的神秘力量，这一堆宏应该能让他们迷惑不已。我们写这些宏不是为了自娱自乐－我们是个小创业公司，我们必须疯狂写程序，这样才能与竞争对手之间构筑技术上的壁垒。\n\n怀疑的人会说这有什么联系吗？我们代码里的一大块是在做其它语言很难做到的事情，发布的软件做了很多竞争对手的软件没法做到的事情。也许这其中有联系。我鼓励你顺着这条线索再走走。拄着拐杖的跛老头也许还有更多去了解。\n\n**<span>Aikido for Startups</span>**\n\n<span>创业公司的合气道</span>\n\n但是我不期望能让任何人（过了<span>25</span>岁）去学<span>Lisp</span>。这篇文章的目的不是要改变谁的思想，而是让那些有兴趣用<span>Lisp</span>的人更加确信－这些人知道<span>Lisp</span>很强大，但是因为它应用不广泛而有所顾虑。在竞争中，这是个优势。如果你的竞争对手不了解，<span>Lisp</span>的力量会加倍。\n\n如果你想在创业公司里用<span>Lisp</span>，不用担心它不流行。你应当期望保持现状。事实也如此。程序设计语言的天性就是让人们乐于用它。计算机硬件的发展比个人习惯的发展快得多，程序设计的实践通常比处理器的进步落后<span>10</span>～<span>20</span>年。在<span>MIT</span>，他们<span>60'</span>就开始用高级语言写程序了，但是很多公司到了<span>80'</span>还在用机器语言。我打赌，很多人会一直用机器语言写下去，直到有一天，处理器换成了<span>RISC</span>指令集－就像急着下班的酒吧服务员急着关门一样，端掉这些人的饭碗。\n\n通常，技术进步很快。但是程序设计语言不同：它不只是技术，它是程序员思考的工具。语言是技术和信仰的混合体<span>[6]</span>。于是，位于中间的语言（也就是中级程序员用的那些语言）动得跟冰山一样慢。<span>60'</span>由<span>Lisp</span>引入的垃圾回收功能，现在开始被接受。词法闭包，由<span>Lisp</span>在<span>70'</span>引入的，现在其它语言还没有广泛采纳。<span>60'</span>中<span>Lisp</span>引入的宏，现在还是处女地。\n\n很明显，中间的语言族有着巨大的惯性。我不认为你能和这个力量对抗。相反，你要向合气道的选手学习：以彼之道，还治彼身。\n\n如果你在大公司工作，这不太容易。你很难说你的服秃顶上司同意用<span>Lisp</span>写东西，他刚才才读到另一种语言新鲜出炉（就像<span>Ada</span>二十年前那样），正要征服世界。但是你要是为创业公司工作，没有秃顶老板干涉，你就能像我们那样化解<span>Blub</span>困境，转为自己的优势：你可以用那些黏糊在中间语言的竞争者不能采用的技术。\n\n如果你为创业公司工作，这儿有个估量对手的妙招：读读他们的招聘职位列表。他们网站上其它的东西无非是些股票图片和乏味的说明，但是招聘职位却必须反映他们要找的人，否则会引来一堆无关的求职者。\n\n在<span>Viaweb</span>工作的时候，我读了不少职位描述。大约每个月都有一个新的竞争对手加入这个行当。检查了他们的在线<span>Demo</span>后，我做的第一件事就是看看他们的招聘页。过了几年，我就知道要当心哪家。工作描述里要是<span>IT</span>类的成分越多，这家公司就越不构成威胁。对我们最安全的就是那些要求<span>Oracle</span>经验的，永远都不用担心他们。他们要是招聘<span>C++</span>或者<span>Java</span>开发者，也不用担心。但是要是找的是<span>Perl</span>或者<span>Python</span>程序员，就有点威胁了－这公司至少在技术方面是由真正的黑客掌管的。要是当初我看见一家招<span>Lisp</span>黑客的，我一定会忧心忡忡的。\n\n－－－－－\n\n注：\n\n<span>[1] Viaweb</span>一开始有两块：编辑器（用<span>Lisp</span>写的，客户用来建站）和订单系统（用<span>C</span>写的，处理订单）。第一版主要是<span>Lisp,</span>因为订单系统很小。后来增加了两个模块：<span>C</span>写的图片生成器以及<span>Perl</span>写的结算工具。\n\n<span>2003</span>年一月，<span>Yahoo</span>发布了新的编辑器，用<span>C++</span>和<span>Perl</span>写的。也很难讲这程序就不再是用<span>Lisp</span>写的了：因为要把它翻译成<span>C++</span>，他们先得写一个<span>Lisp</span>解释器－页面生成模板的代码据我所知还是<span>Lisp</span>的。（参考<span>Greenspun's Tenth Rule</span>。）\n\n<span>[2] Robert Morris</span>说我没必要那么保密。因为即使竞争对手知道我们用<span>Lisp</span>，他们也不会理解原因的：<span>&rdquo;</span>如果他们足够聪明，那他们应当已经在用<span>Lisp</span>了。<span>&ldquo;</span>\n\n<span>[3]&nbsp;</span>所有语言在图灵相等这一层上是一样强大的。但是这和程序员的意思不一样。（没人想在图灵机上写程序。）程序员在意的语言的能力也许不能形式化的定义，但一种解释就是，你想要在弱的语言里的要某种强语言的功能，就只能用弱语言去写一个解释器。如果<span>A</span>语言由一个操作可以把字符串里的空格移走，而<span>B</span>语言没有，这并不意味着<span>B</span>语言弱，因为你可以写个函数来完成这件事。但是要是<span>A</span>支持递归，而<span>B</span>不支持，这你就不好写个库函数来完成了。\n\n<span>[4]&nbsp;</span>对<span>Nerd</span>们的注解：可能是个格，顶尖；形状不重要，这里至少有个偏序关系。\n\n<span>[5]&nbsp;</span>把宏当作一个单独的功能有点误导。实践中，宏的作用通常由其它一些<span>Lisp</span>特性比如词法闭包以及<span>rest</span>参数大大加强。\n\n<span>[6]&nbsp;</span>这样，比较编程语言要么挑起信仰口水战要么就只能在绝对中立的教材里，这只能是人类学的工作了。想追求平静，保护自己的所有的人会避免这个话题。但是，这问题只是一半和信仰相关；还有值得研究的东西，特别是你要设计一个新语言时。\n\n译注：\n\n[1] 翻译时中英混排，完成时提取中文可以用grep:&nbsp;\n\n&nbsp;\n\nfrom:[http://article.yeeyan.org/view/11304/49653](http://article.yeeyan.org/view/11304/49653)","slug":"Beating-the-Average-为什么要学习Lisp-转","published":1,"updated":"2019-02-16T13:03:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wqw0000t2zs6n69obwn","content":"<p><span><span>出类拔萃</span></span></p>\n<p>by Paul Graham</p>\n<p>April 2001, rev. April 2003</p>\n<p>（这篇文章改自<span>2001</span>年给<span>Franz</span>开发者论坛的演讲）</p>\n<p><span>1995</span>年夏天，我和我的朋友<span>Robert Morris</span>创办了一个公司叫<span>Viaweb.&nbsp;</span>我们的计划是写一个在线商店的建站软件。当时这个软件的新颖之处是它在我们的服务器端运行，用网页作为用户界面。</p>\n<p>当然，很多人当年也有同样的想法，但就我所知，<span>Viaweb</span>是第一款基于<span>web</span>的应用。我们很喜欢这个新想法，并以此为公司命名：<span>Viaweb</span>，因为我们的软件不是桌面软件而是通过网络来运行的。</p>\n<p>关于这个软件，另一件特别之处就是它主要用<span>Lisp</span>写就。它是面向大众用户的<span>Lisp</span>程序的先锋，在此之前<span>Lisp</span>几乎都是用在大学和实验室的象牙塔里。<span>[1]</span></p>\n<p><strong><span>The Secret Weapon</span></strong></p>\n<p><span>秘密武器</span></p>\n<p><span>Eric Raymond</span>写过一篇文章<span>&ldquo;</span>如何成为黑客<span>&rdquo;</span>，文中他教导黑客学前班的同学如何选择语言。他建议以<span>Python</span>和<span>Java</span>起步－因为容易学。严肃的黑客要修改<span>Unix</span>就得学<span>C</span>语言。最后，真正严肃的黑客应该考虑学习<span>Lisp:</span></p>\n<p><span>&nbsp;&ldquo;</span>悟道时那种深刻的醍醐灌顶的感受是<span>Lisp</span>值得学习的一个原因；这个体验会让你在后面的岁月里成为更好的程序员－即使你<span>&nbsp;&nbsp;</span>不常用<span>Lisp</span>写程序。<span>&rdquo;</span></p>\n<p>这和常听到的学习拉丁语的论调很类似。学了不会帮你找到工作（语言学教授除外），但它会训练提高你的大脑，让你在用诸如英语之类的语言写作时能够得心应手。</p>\n<p>但是，等一下。这个比喻并不普遍适用。学习拉丁语找不着工作是因为没人说拉丁语。如果你用拉丁语写作，没人能理解你。但是<span>Lisp</span>是计算机语言，计算机可不挑剔程序员用什么语言。</p>\n<p>如果像他说的，<span>Lisp</span>能让你成为更好的程序员，为啥不用呢？如果一个画家弄了一杆能让他下笔犹如神的画笔，在我看来，他画啥画都想用的，不是吗？我不是要取笑<span>Eric Raymond</span>。总的来讲，他的建议很好。他关于<span>Lisp</span>的说法基本是传统观点。但是这个传统观点自相矛盾：<span>Lisp</span>会让你成为更好的程序员，但你不会去用它。</p>\n<p>为什么不呢？毕竟编程语言只是工具。如果<span>Lisp</span>写的程序更好的话，你就应该用它。如果用它写得烂，那谁还稀罕呢？</p>\n<p>这不只是理论上的问题。软件行业竞争残酷－优胜劣汰。其他条件相同，软件写的又快又好公司会把对手挤垮。当你开始创业时，会对这一点深有体会。创业公司常处于要么盆满钵满要么一穷二白的位置。你最终要么赚翻，要么潦倒。如果你对技术押错宝了，竞争对手就会来灭掉你。</p>\n<p><span>Robert</span>和我都精于<span>Lisp</span>，我们没有理由不相信自己的直觉而弃用<span>Lisp.&nbsp;</span>我们知道其他人都在用<span>C++</span>和<span>Perl</span>写软件。我们也知道这没啥大不了的。如果你选择那样的技术，就要在<span>Windows</span>上跑。选择技术时，必须忽略其他人在用什么，只考虑什么能工作得最好。</p>\n<p>这在创业公司里更为适用。大公司里，你可以像其他所有大公司一样做事。但是创业公司里，你不能亦步亦趋。我不认为很多人意识到这一点了（即使是创业公司里的家伙们）。</p>\n<p>大公司每年平均增长<span>10%</span>。所以你要是掌管一个大公司的话，你按照大公司的通用做事方式，你也就种瓜得瓜，种豆得豆－得到<span>10%</span>的增长。</p>\n<p>创业公司里的情况也一样。如果你按照大多数创业公司的方式去做事，你也就只能期望业绩达到平均水平。这里的问题在于，平均水平意味着你要关门大吉。创业公司的成活率是大大低于<span>50%</span>的。所以，如果你开公司，最好有点与众不同。否则，麻烦就大了。</p>\n<p><span>1995</span>年那会，我们知道一个竞争者尚未参透的秘密（现在也有好多蒙在鼓里呢）：如果你的软件在服务器端运行，就可以用任何你想用的语言。要是写桌面应用，很强势的一个观点就是要用操作系统的语言写应用。十年前，写应用这意味着用<span>C</span>语言写。但是，对于基于<span>Web</span>的软件，而你又有语言和操作系统的源码时，你可以用任何想用的语言。</p>\n<p>然而，语言选择的自由是把双刃剑。现在你可以选了，你得思考选哪一个。那些拒绝变化的鸵鸟公司危险了：它们的对手可没有把头埋进沙子。</p>\n<p>你会选哪个语言呢？我们选择<span>Lisp.&nbsp;</span>很重要的一点就是，这个市场上快速开发很重要。我们都白手起家，一个公司要是能比对手更早的做完新特性就很有优势。我们知道<span>Lisp</span>用于快速开发相当合适，而基于服务器的应用会放大这个优势－因为软件写完就可以立即发布。</p>\n<p>如果其他公司不想用<span>Lisp,&nbsp;</span>真好。这在技术上会让我们有一个优势，能帮上忙的来者不拒。当我们创立<span>Viaweb</span>时，我们没有商业经验，不懂得市场推广，招聘员工，融资或者吸引用户。我们几个甚至都没工作过。我们唯一玩的转的就是写软件。我们寄希望于此。软件开发方面的任何优势，我们都不会放过。</p>\n<p>你可以说采用<span>Lisp</span>是一个试验。我们的算盘是这样打的：如果我们用<span>Lisp</span>，我们功能会开发的比对手快，也可以做一些他们做不到的事情。<span>Lisp</span>很高层，我们就不需要大的开发组，我们的开销就很小。如果行得通，我们就能提供物美价廉的产品，还能盈利。最终，赢得所有用户，我们的对手则失掉用户最终关门。这就是我们当时希望的过程。</p>\n<p>试验的结果如何？居然行得通。我们最终遇见了很多竞争者，<span>20</span>～<span>30</span>个吧，但没有一个能和我们针尖对麦芒。我们服务器上跑着一个<span>&ldquo;</span>所见即所得<span>&rdquo;</span>的在线商店编辑器，用起来却和桌面应用没啥差别。我们的对手们用的是<span>CGI</span>脚本。功能上我们总能先他们一步。有时，绝望中的对手想增加几个我们没有的功能。但是<span>Lisp</span>的开发周期很快，我们可以在他们发布软文宣传的一两天之内就复制一个新功能。当记者们读到他们的公关稿然后打电话给我们来问时，我们也有这个功能了。</p>\n<p>我们的竞争对手也许觉得我们有什么秘密武器－能够读到他们脑子里的计划。实际上我们没有，比他们想的要简单。没人泄密他们的新功能，我们只是比任何人预期的开发速度更快而已。</p>\n<p>我九岁时看过一部<span>The Day of the Jackal,&nbsp;</span>由<span>Frederick Forsyth</span>执导<span>.&nbsp;</span>主角是个刺客，要去刺杀法国总统。他必须通过警察，上到一个公寓能够俯瞰总统的行车路线。他乔装成一个跛老头，警察根本没有注意到他。</p>\n<p>我们的秘密武器也差不多。我们用一个怪异的人工智能语言写软件，语法难看，充斥着括号。很多年以来，对<span>Lisp</span>的这种描述让我很不自在。现在，却成了我们的优势。商业上，拥有一项对手根本不懂的技术是无价的，正如战争一样，出其不意和厉兵秣马一样重要。</p>\n<p>嗯，我有点窘：开发<span>Viaweb</span>时，公开场合我对<span>Lisp</span>只字未提。我们不向媒体说，如果你在网站上搜，也就只能找到我简历里提到的两本书。这是有意为之。如果他们不知道或者不关心我们用什么开发，我也乐于保持现状。<span>[2]</span></p>\n<p>理解我们技术最好的是我们的客户。他们不关心<span>Viaweb</span>用什么写的，但是他们注意到软件跑得很好。几分钟就能建好一个漂亮的在线商店。然后，口碑就传开了，用户越来越多。<span>1997</span>年底时，我们有<span>500</span>个用户。六个月后，<span>Yahoo</span>买我们时，有了<span>1070</span>个用户。今天，成了<span>Yahoo Store</span>的<span>Viaweb</span>还统治着市场，是<span>Yahoo</span>产品线中很能盈利的一员。那些由<span>Viaweb</span>建成的商店成了<span>Yahoo Shopping</span>的基础。我<span>1999</span>年离开<span>Yahoo</span>，我不知道用户数量的具体数字，但是最近一次听到的是大约<span>20</span>，<span>000.</span></p>\n<p><strong><span>The Blub Paradox</span></strong></p>\n<p><strong><span>Blub</span></strong><span>困境</span></p>\n<p><span>Lisp</span>到底强在哪儿？如果<span>Lisp</span>真那么棒，为啥没人用呢？听起来文绉绉的问题，实际上答案很直接。<span>Lisp</span>很棒不是因为某些痴迷者才能看到的品质，而是因为它就是所有语言中最强大的。没有普及的原因是选择编程语言不仅仅是个技术问题，而且是思维习惯－再没有比思维习惯改变得更慢得东西了。当然，这两个答案都需要解释。</p>\n<p>我以一个不那么惊世骇俗的论断开始：编程语言的能力各有千秋。</p>\n<p>高级语言比机器语言强大－这是个不争的事实。如今大多数程序员都赞成<span>&rdquo;</span>通常不要用机器语言写程序<span>&ldquo;</span>的观点。相反，你应当用高级语言，然后用编译器把程序编成机器语言。这个想法已经为硬件设计所采纳：自<span>80</span>年代起，指令集就专为编译器设计而不那么考虑我们程序员了。</p>\n<p>人人都知道你的程序要是全用机器语言写就是个错误。但是另外一个原则却不为人熟知：如果你要从一堆语言里挑一个出来（其他条件都相同的情况下），要是不选择最强大的－这也是个错误。<span>[3]</span></p>\n<p>这个原则也有很多例外。如果你的程序要和另外一个用某种语言写的程序打交道，那么通常新程序采用同样的语言是个好选择。如果你的程序只是要干点简单的活，比如数据处理或者位操作之类的，你可以用稍微低级一点的语言，还能带来速度上的优势。如果你写一个试验原型，你最好找库函数能满足要求的随便什么语言。但是大体来讲，对于应用软件，你需要用最强大的（也不太慢的）语言，其他的选择都是错误－这一定程度上和用机器语言写程序是一码事。</p>\n<p>你知道机器语言很低级。但是，至少某种社会共识认为高级语言通常被认为是一样强大的。但事实并非如此。<span>&ldquo;</span>高级语言<span>&rdquo;</span>这个技术词汇实际上没有表明任何确定的东西。并没有一个位于机器语言和高级语言之间的分水岭。所有语言都位于一个由不同抽象能力构成的谱系<span>[4]</span>之中：从最强大的语言到机器语言，位置反映着语言本身的能力的差别。</p>\n<p>拿<span>Cobol</span>来说，它是个高级语言－因为它能被编译成机器语言。真有人会跳出来辩护说<span>Cobol</span>和<span>Python</span>一样强吗？它要比<span>Python</span>更接近机器语言。</p>\n<p>或者<span>Perl4</span>又如何呢？<span>Perl4</span>到<span>Perl5</span>之间，词法闭包被加进来了。大多数<span>Perl</span>黑客都同意<span>Perl5</span>比<span>Perl4</span>更强了。但是，一旦你同意这一点，你也就同意了一个高级语言比另一个更强大。直接的推论就是，除了特殊情况，你应当用最强大的语言。</p>\n<p>然而现实中这个想法很少能实现它的结论。过了一定的年龄，程序员很少再会主动的更换语言了。他们手上碰巧用起来的随便什么语言，都被奉为圭臬。</p>\n<p>程序员对于喜好的语言偏爱有加，不能自拔。我不打算伤任何人的感情，所以解释观点时，我用一个虚构的语言：<span>Blub</span>。<span>Blub</span>位于抽象谱系的中间，它不是最高级的语言，但也比<span>Cobol</span>和机器语言强。</p>\n<p>实际上，我们虚构的<span>Blub</span>程序员不会用机器码或者<span>Cobol</span>：当然他们不会去写机器码－那是编译器该干的事情。对于<span>Cobol</span>，他们纳闷那些人是怎么用这语言干活的－<span>&nbsp;Cobol</span>连<span>x</span>功能都没有（<span>x</span>是一个<span>Blub</span>的功能）。</p>\n<p>只要我们的<span>Blub</span>程序员朝下看，他就知道在朝下看－比<span>Blub</span>弱的语言一眼就能看出来，因为它们缺少一些<span>Blub</span>的功能。但是如果向上看，他不会意识到。他认为所看到的都是些怪异的语言。他也许会觉得看到的语言都和<span>Blub</span>差不多，只是花哨的东西太多。<span>Blub</span>对他就够好了－因为，他用<span>Blub</span>思考。</p>\n<p>当我们切换到使用更高级的语言的程序员的视角，我们会发现他朝下会看到<span>Blub</span>：你怎么能用<span>Blub</span>干活呢？它连<span>y</span>功能都没有哎。</p>\n<p>推理一下，只有理解最强大的语言的程序员才能一览众山，看到所有语言能力间的差别。（这也许就是<span>Eric Raymond</span>说<span>Lisp</span>能让你成为一个更好的程序员的意思。）你不能相信其他人的观点，因为<span>Blub</span>困境：他们对自己碰巧用上的语言很满意，因为这语言描绘了他们思考程序的方式。</p>\n<p>我从自己的经验里知道这一点，高中时我用<span>Basic</span>写程序。这语言甚至都不支持递归。现在难以想象写程序不用递归。可那时，我可不稀罕。我用<span>Basic</span>思考，我写得很顺，我所触及皆以掌握。</p>\n<p><span>Eric Raymond</span>所推荐的<span>5</span>种语言位于能力谱系的不同位置。它们的相对位置如何讨论起来比较敏感。我要说的是，我认为<span>Lisp</span>最高。要支持我的观点，我要告诉你一样其它<span>4</span>种语言都没有的东西：离了宏，你咋能编程呢？<span>[5]</span></p>\n<p>很多语言都有叫做宏的东西。但是<span>Lisp</span>的宏独树一帜。信不信由你，宏和括号联系紧密。<span>Lisp</span>的设计者把那一堆括号加进来可不是为了标新立异。对于<span>Blub</span>程序员，<span>Lisp</span>看起来很怪。但是那些括号事出有因。它们是<span>Lisp</span>与其它语言本质区别的外在表现。</p>\n<p><span>Lisp</span>代码由<span>Lisp</span>数据对象构成。不是在像<span>&rdquo;</span>源码文件由字符构成<span>&ldquo;</span>或者<span>&rdquo;</span>字符串也是该语言支持的数据类型之一<span>&ldquo;</span>这样的浅显的层次上：在由解析器读进内存后，<span>Lisp</span>代码就由你能遍历的数据结构构成了。</p>\n<p>如果你了解编译器的工作原理，其实解析器干的活不多：要说<span>Lisp</span>的语法奇怪，还不如说<span>Lisp</span>没有语法。你写程序实际上是在写语法树－而其它语言需要编译器生成这种内部表示。你的程序完全可以存取这些语法树。你可以写程序去操作它。在<span>Lisp</span>里，这些程序叫做宏。它们是写程序的程序。</p>\n<p>写程序的程序？你哪天才能用得到啊？如果你用<span>Cobol</span>思考，不常用。而用<span>Lisp</span>思考的话，答案就是：天天都用。这里要是我能举个例子说明就好了。但是这样对于不懂<span>Lisp</span>的人就是在废话了；要是从头到尾讲明白这里篇幅也不够，在<span>Ansi Common Lisp</span>里我的进度很快，但也到<span>160</span>页才开始讲宏。</p>\n<p>但我想给一点有说服力的论据。<span>Viaweb</span>的编辑器代码里有<span>20</span>～<span>25%</span>的宏。宏比普通的<span>Lisp</span>程序难写，不该用的时候用就是画蛇添足。所以我们代码里的每个宏都有用。这意味着<span>20</span>～<span>25%</span>的代码是其它语言没法容易做到的。然而，挑剔的<span>Blub</span>程序员也许会找找我所声称的<span>Lisp</span>的神秘力量，这一堆宏应该能让他们迷惑不已。我们写这些宏不是为了自娱自乐－我们是个小创业公司，我们必须疯狂写程序，这样才能与竞争对手之间构筑技术上的壁垒。</p>\n<p>怀疑的人会说这有什么联系吗？我们代码里的一大块是在做其它语言很难做到的事情，发布的软件做了很多竞争对手的软件没法做到的事情。也许这其中有联系。我鼓励你顺着这条线索再走走。拄着拐杖的跛老头也许还有更多去了解。</p>\n<p><strong><span>Aikido for Startups</span></strong></p>\n<p><span>创业公司的合气道</span></p>\n<p>但是我不期望能让任何人（过了<span>25</span>岁）去学<span>Lisp</span>。这篇文章的目的不是要改变谁的思想，而是让那些有兴趣用<span>Lisp</span>的人更加确信－这些人知道<span>Lisp</span>很强大，但是因为它应用不广泛而有所顾虑。在竞争中，这是个优势。如果你的竞争对手不了解，<span>Lisp</span>的力量会加倍。</p>\n<p>如果你想在创业公司里用<span>Lisp</span>，不用担心它不流行。你应当期望保持现状。事实也如此。程序设计语言的天性就是让人们乐于用它。计算机硬件的发展比个人习惯的发展快得多，程序设计的实践通常比处理器的进步落后<span>10</span>～<span>20</span>年。在<span>MIT</span>，他们<span>60’</span>就开始用高级语言写程序了，但是很多公司到了<span>80’</span>还在用机器语言。我打赌，很多人会一直用机器语言写下去，直到有一天，处理器换成了<span>RISC</span>指令集－就像急着下班的酒吧服务员急着关门一样，端掉这些人的饭碗。</p>\n<p>通常，技术进步很快。但是程序设计语言不同：它不只是技术，它是程序员思考的工具。语言是技术和信仰的混合体<span>[6]</span>。于是，位于中间的语言（也就是中级程序员用的那些语言）动得跟冰山一样慢。<span>60’</span>由<span>Lisp</span>引入的垃圾回收功能，现在开始被接受。词法闭包，由<span>Lisp</span>在<span>70’</span>引入的，现在其它语言还没有广泛采纳。<span>60’</span>中<span>Lisp</span>引入的宏，现在还是处女地。</p>\n<p>很明显，中间的语言族有着巨大的惯性。我不认为你能和这个力量对抗。相反，你要向合气道的选手学习：以彼之道，还治彼身。</p>\n<p>如果你在大公司工作，这不太容易。你很难说你的服秃顶上司同意用<span>Lisp</span>写东西，他刚才才读到另一种语言新鲜出炉（就像<span>Ada</span>二十年前那样），正要征服世界。但是你要是为创业公司工作，没有秃顶老板干涉，你就能像我们那样化解<span>Blub</span>困境，转为自己的优势：你可以用那些黏糊在中间语言的竞争者不能采用的技术。</p>\n<p>如果你为创业公司工作，这儿有个估量对手的妙招：读读他们的招聘职位列表。他们网站上其它的东西无非是些股票图片和乏味的说明，但是招聘职位却必须反映他们要找的人，否则会引来一堆无关的求职者。</p>\n<p>在<span>Viaweb</span>工作的时候，我读了不少职位描述。大约每个月都有一个新的竞争对手加入这个行当。检查了他们的在线<span>Demo</span>后，我做的第一件事就是看看他们的招聘页。过了几年，我就知道要当心哪家。工作描述里要是<span>IT</span>类的成分越多，这家公司就越不构成威胁。对我们最安全的就是那些要求<span>Oracle</span>经验的，永远都不用担心他们。他们要是招聘<span>C++</span>或者<span>Java</span>开发者，也不用担心。但是要是找的是<span>Perl</span>或者<span>Python</span>程序员，就有点威胁了－这公司至少在技术方面是由真正的黑客掌管的。要是当初我看见一家招<span>Lisp</span>黑客的，我一定会忧心忡忡的。</p>\n<p>－－－－－</p>\n<p>注：</p>\n<p><span>[1] Viaweb</span>一开始有两块：编辑器（用<span>Lisp</span>写的，客户用来建站）和订单系统（用<span>C</span>写的，处理订单）。第一版主要是<span>Lisp,</span>因为订单系统很小。后来增加了两个模块：<span>C</span>写的图片生成器以及<span>Perl</span>写的结算工具。</p>\n<p><span>2003</span>年一月，<span>Yahoo</span>发布了新的编辑器，用<span>C++</span>和<span>Perl</span>写的。也很难讲这程序就不再是用<span>Lisp</span>写的了：因为要把它翻译成<span>C++</span>，他们先得写一个<span>Lisp</span>解释器－页面生成模板的代码据我所知还是<span>Lisp</span>的。（参考<span>Greenspun’s Tenth Rule</span>。）</p>\n<p><span>[2] Robert Morris</span>说我没必要那么保密。因为即使竞争对手知道我们用<span>Lisp</span>，他们也不会理解原因的：<span>&rdquo;</span>如果他们足够聪明，那他们应当已经在用<span>Lisp</span>了。<span>&ldquo;</span></p>\n<p><span>[3]&nbsp;</span>所有语言在图灵相等这一层上是一样强大的。但是这和程序员的意思不一样。（没人想在图灵机上写程序。）程序员在意的语言的能力也许不能形式化的定义，但一种解释就是，你想要在弱的语言里的要某种强语言的功能，就只能用弱语言去写一个解释器。如果<span>A</span>语言由一个操作可以把字符串里的空格移走，而<span>B</span>语言没有，这并不意味着<span>B</span>语言弱，因为你可以写个函数来完成这件事。但是要是<span>A</span>支持递归，而<span>B</span>不支持，这你就不好写个库函数来完成了。</p>\n<p><span>[4]&nbsp;</span>对<span>Nerd</span>们的注解：可能是个格，顶尖；形状不重要，这里至少有个偏序关系。</p>\n<p><span>[5]&nbsp;</span>把宏当作一个单独的功能有点误导。实践中，宏的作用通常由其它一些<span>Lisp</span>特性比如词法闭包以及<span>rest</span>参数大大加强。</p>\n<p><span>[6]&nbsp;</span>这样，比较编程语言要么挑起信仰口水战要么就只能在绝对中立的教材里，这只能是人类学的工作了。想追求平静，保护自己的所有的人会避免这个话题。但是，这问题只是一半和信仰相关；还有值得研究的东西，特别是你要设计一个新语言时。</p>\n<p>译注：</p>\n<p>[1] 翻译时中英混排，完成时提取中文可以用grep:&nbsp;</p>\n<p>&nbsp;</p>\n<p>from:<a href=\"http://article.yeeyan.org/view/11304/49653\" target=\"_blank\" rel=\"noopener\">http://article.yeeyan.org/view/11304/49653</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><span><span>出类拔萃</span></span></p>\n<p>by Paul Graham</p>\n<p>April 2001, rev. April 2003</p>\n<p>（这篇文章改自<span>2001</span>年给<span>Franz</span>开发者论坛的演讲）</p>\n<p><span>1995</span>年夏天，我和我的朋友<span>Robert Morris</span>创办了一个公司叫<span>Viaweb.&nbsp;</span>我们的计划是写一个在线商店的建站软件。当时这个软件的新颖之处是它在我们的服务器端运行，用网页作为用户界面。</p>\n<p>当然，很多人当年也有同样的想法，但就我所知，<span>Viaweb</span>是第一款基于<span>web</span>的应用。我们很喜欢这个新想法，并以此为公司命名：<span>Viaweb</span>，因为我们的软件不是桌面软件而是通过网络来运行的。</p>\n<p>关于这个软件，另一件特别之处就是它主要用<span>Lisp</span>写就。它是面向大众用户的<span>Lisp</span>程序的先锋，在此之前<span>Lisp</span>几乎都是用在大学和实验室的象牙塔里。<span>[1]</span></p>\n<p><strong><span>The Secret Weapon</span></strong></p>\n<p><span>秘密武器</span></p>\n<p><span>Eric Raymond</span>写过一篇文章<span>&ldquo;</span>如何成为黑客<span>&rdquo;</span>，文中他教导黑客学前班的同学如何选择语言。他建议以<span>Python</span>和<span>Java</span>起步－因为容易学。严肃的黑客要修改<span>Unix</span>就得学<span>C</span>语言。最后，真正严肃的黑客应该考虑学习<span>Lisp:</span></p>\n<p><span>&nbsp;&ldquo;</span>悟道时那种深刻的醍醐灌顶的感受是<span>Lisp</span>值得学习的一个原因；这个体验会让你在后面的岁月里成为更好的程序员－即使你<span>&nbsp;&nbsp;</span>不常用<span>Lisp</span>写程序。<span>&rdquo;</span></p>\n<p>这和常听到的学习拉丁语的论调很类似。学了不会帮你找到工作（语言学教授除外），但它会训练提高你的大脑，让你在用诸如英语之类的语言写作时能够得心应手。</p>\n<p>但是，等一下。这个比喻并不普遍适用。学习拉丁语找不着工作是因为没人说拉丁语。如果你用拉丁语写作，没人能理解你。但是<span>Lisp</span>是计算机语言，计算机可不挑剔程序员用什么语言。</p>\n<p>如果像他说的，<span>Lisp</span>能让你成为更好的程序员，为啥不用呢？如果一个画家弄了一杆能让他下笔犹如神的画笔，在我看来，他画啥画都想用的，不是吗？我不是要取笑<span>Eric Raymond</span>。总的来讲，他的建议很好。他关于<span>Lisp</span>的说法基本是传统观点。但是这个传统观点自相矛盾：<span>Lisp</span>会让你成为更好的程序员，但你不会去用它。</p>\n<p>为什么不呢？毕竟编程语言只是工具。如果<span>Lisp</span>写的程序更好的话，你就应该用它。如果用它写得烂，那谁还稀罕呢？</p>\n<p>这不只是理论上的问题。软件行业竞争残酷－优胜劣汰。其他条件相同，软件写的又快又好公司会把对手挤垮。当你开始创业时，会对这一点深有体会。创业公司常处于要么盆满钵满要么一穷二白的位置。你最终要么赚翻，要么潦倒。如果你对技术押错宝了，竞争对手就会来灭掉你。</p>\n<p><span>Robert</span>和我都精于<span>Lisp</span>，我们没有理由不相信自己的直觉而弃用<span>Lisp.&nbsp;</span>我们知道其他人都在用<span>C++</span>和<span>Perl</span>写软件。我们也知道这没啥大不了的。如果你选择那样的技术，就要在<span>Windows</span>上跑。选择技术时，必须忽略其他人在用什么，只考虑什么能工作得最好。</p>\n<p>这在创业公司里更为适用。大公司里，你可以像其他所有大公司一样做事。但是创业公司里，你不能亦步亦趋。我不认为很多人意识到这一点了（即使是创业公司里的家伙们）。</p>\n<p>大公司每年平均增长<span>10%</span>。所以你要是掌管一个大公司的话，你按照大公司的通用做事方式，你也就种瓜得瓜，种豆得豆－得到<span>10%</span>的增长。</p>\n<p>创业公司里的情况也一样。如果你按照大多数创业公司的方式去做事，你也就只能期望业绩达到平均水平。这里的问题在于，平均水平意味着你要关门大吉。创业公司的成活率是大大低于<span>50%</span>的。所以，如果你开公司，最好有点与众不同。否则，麻烦就大了。</p>\n<p><span>1995</span>年那会，我们知道一个竞争者尚未参透的秘密（现在也有好多蒙在鼓里呢）：如果你的软件在服务器端运行，就可以用任何你想用的语言。要是写桌面应用，很强势的一个观点就是要用操作系统的语言写应用。十年前，写应用这意味着用<span>C</span>语言写。但是，对于基于<span>Web</span>的软件，而你又有语言和操作系统的源码时，你可以用任何想用的语言。</p>\n<p>然而，语言选择的自由是把双刃剑。现在你可以选了，你得思考选哪一个。那些拒绝变化的鸵鸟公司危险了：它们的对手可没有把头埋进沙子。</p>\n<p>你会选哪个语言呢？我们选择<span>Lisp.&nbsp;</span>很重要的一点就是，这个市场上快速开发很重要。我们都白手起家，一个公司要是能比对手更早的做完新特性就很有优势。我们知道<span>Lisp</span>用于快速开发相当合适，而基于服务器的应用会放大这个优势－因为软件写完就可以立即发布。</p>\n<p>如果其他公司不想用<span>Lisp,&nbsp;</span>真好。这在技术上会让我们有一个优势，能帮上忙的来者不拒。当我们创立<span>Viaweb</span>时，我们没有商业经验，不懂得市场推广，招聘员工，融资或者吸引用户。我们几个甚至都没工作过。我们唯一玩的转的就是写软件。我们寄希望于此。软件开发方面的任何优势，我们都不会放过。</p>\n<p>你可以说采用<span>Lisp</span>是一个试验。我们的算盘是这样打的：如果我们用<span>Lisp</span>，我们功能会开发的比对手快，也可以做一些他们做不到的事情。<span>Lisp</span>很高层，我们就不需要大的开发组，我们的开销就很小。如果行得通，我们就能提供物美价廉的产品，还能盈利。最终，赢得所有用户，我们的对手则失掉用户最终关门。这就是我们当时希望的过程。</p>\n<p>试验的结果如何？居然行得通。我们最终遇见了很多竞争者，<span>20</span>～<span>30</span>个吧，但没有一个能和我们针尖对麦芒。我们服务器上跑着一个<span>&ldquo;</span>所见即所得<span>&rdquo;</span>的在线商店编辑器，用起来却和桌面应用没啥差别。我们的对手们用的是<span>CGI</span>脚本。功能上我们总能先他们一步。有时，绝望中的对手想增加几个我们没有的功能。但是<span>Lisp</span>的开发周期很快，我们可以在他们发布软文宣传的一两天之内就复制一个新功能。当记者们读到他们的公关稿然后打电话给我们来问时，我们也有这个功能了。</p>\n<p>我们的竞争对手也许觉得我们有什么秘密武器－能够读到他们脑子里的计划。实际上我们没有，比他们想的要简单。没人泄密他们的新功能，我们只是比任何人预期的开发速度更快而已。</p>\n<p>我九岁时看过一部<span>The Day of the Jackal,&nbsp;</span>由<span>Frederick Forsyth</span>执导<span>.&nbsp;</span>主角是个刺客，要去刺杀法国总统。他必须通过警察，上到一个公寓能够俯瞰总统的行车路线。他乔装成一个跛老头，警察根本没有注意到他。</p>\n<p>我们的秘密武器也差不多。我们用一个怪异的人工智能语言写软件，语法难看，充斥着括号。很多年以来，对<span>Lisp</span>的这种描述让我很不自在。现在，却成了我们的优势。商业上，拥有一项对手根本不懂的技术是无价的，正如战争一样，出其不意和厉兵秣马一样重要。</p>\n<p>嗯，我有点窘：开发<span>Viaweb</span>时，公开场合我对<span>Lisp</span>只字未提。我们不向媒体说，如果你在网站上搜，也就只能找到我简历里提到的两本书。这是有意为之。如果他们不知道或者不关心我们用什么开发，我也乐于保持现状。<span>[2]</span></p>\n<p>理解我们技术最好的是我们的客户。他们不关心<span>Viaweb</span>用什么写的，但是他们注意到软件跑得很好。几分钟就能建好一个漂亮的在线商店。然后，口碑就传开了，用户越来越多。<span>1997</span>年底时，我们有<span>500</span>个用户。六个月后，<span>Yahoo</span>买我们时，有了<span>1070</span>个用户。今天，成了<span>Yahoo Store</span>的<span>Viaweb</span>还统治着市场，是<span>Yahoo</span>产品线中很能盈利的一员。那些由<span>Viaweb</span>建成的商店成了<span>Yahoo Shopping</span>的基础。我<span>1999</span>年离开<span>Yahoo</span>，我不知道用户数量的具体数字，但是最近一次听到的是大约<span>20</span>，<span>000.</span></p>\n<p><strong><span>The Blub Paradox</span></strong></p>\n<p><strong><span>Blub</span></strong><span>困境</span></p>\n<p><span>Lisp</span>到底强在哪儿？如果<span>Lisp</span>真那么棒，为啥没人用呢？听起来文绉绉的问题，实际上答案很直接。<span>Lisp</span>很棒不是因为某些痴迷者才能看到的品质，而是因为它就是所有语言中最强大的。没有普及的原因是选择编程语言不仅仅是个技术问题，而且是思维习惯－再没有比思维习惯改变得更慢得东西了。当然，这两个答案都需要解释。</p>\n<p>我以一个不那么惊世骇俗的论断开始：编程语言的能力各有千秋。</p>\n<p>高级语言比机器语言强大－这是个不争的事实。如今大多数程序员都赞成<span>&rdquo;</span>通常不要用机器语言写程序<span>&ldquo;</span>的观点。相反，你应当用高级语言，然后用编译器把程序编成机器语言。这个想法已经为硬件设计所采纳：自<span>80</span>年代起，指令集就专为编译器设计而不那么考虑我们程序员了。</p>\n<p>人人都知道你的程序要是全用机器语言写就是个错误。但是另外一个原则却不为人熟知：如果你要从一堆语言里挑一个出来（其他条件都相同的情况下），要是不选择最强大的－这也是个错误。<span>[3]</span></p>\n<p>这个原则也有很多例外。如果你的程序要和另外一个用某种语言写的程序打交道，那么通常新程序采用同样的语言是个好选择。如果你的程序只是要干点简单的活，比如数据处理或者位操作之类的，你可以用稍微低级一点的语言，还能带来速度上的优势。如果你写一个试验原型，你最好找库函数能满足要求的随便什么语言。但是大体来讲，对于应用软件，你需要用最强大的（也不太慢的）语言，其他的选择都是错误－这一定程度上和用机器语言写程序是一码事。</p>\n<p>你知道机器语言很低级。但是，至少某种社会共识认为高级语言通常被认为是一样强大的。但事实并非如此。<span>&ldquo;</span>高级语言<span>&rdquo;</span>这个技术词汇实际上没有表明任何确定的东西。并没有一个位于机器语言和高级语言之间的分水岭。所有语言都位于一个由不同抽象能力构成的谱系<span>[4]</span>之中：从最强大的语言到机器语言，位置反映着语言本身的能力的差别。</p>\n<p>拿<span>Cobol</span>来说，它是个高级语言－因为它能被编译成机器语言。真有人会跳出来辩护说<span>Cobol</span>和<span>Python</span>一样强吗？它要比<span>Python</span>更接近机器语言。</p>\n<p>或者<span>Perl4</span>又如何呢？<span>Perl4</span>到<span>Perl5</span>之间，词法闭包被加进来了。大多数<span>Perl</span>黑客都同意<span>Perl5</span>比<span>Perl4</span>更强了。但是，一旦你同意这一点，你也就同意了一个高级语言比另一个更强大。直接的推论就是，除了特殊情况，你应当用最强大的语言。</p>\n<p>然而现实中这个想法很少能实现它的结论。过了一定的年龄，程序员很少再会主动的更换语言了。他们手上碰巧用起来的随便什么语言，都被奉为圭臬。</p>\n<p>程序员对于喜好的语言偏爱有加，不能自拔。我不打算伤任何人的感情，所以解释观点时，我用一个虚构的语言：<span>Blub</span>。<span>Blub</span>位于抽象谱系的中间，它不是最高级的语言，但也比<span>Cobol</span>和机器语言强。</p>\n<p>实际上，我们虚构的<span>Blub</span>程序员不会用机器码或者<span>Cobol</span>：当然他们不会去写机器码－那是编译器该干的事情。对于<span>Cobol</span>，他们纳闷那些人是怎么用这语言干活的－<span>&nbsp;Cobol</span>连<span>x</span>功能都没有（<span>x</span>是一个<span>Blub</span>的功能）。</p>\n<p>只要我们的<span>Blub</span>程序员朝下看，他就知道在朝下看－比<span>Blub</span>弱的语言一眼就能看出来，因为它们缺少一些<span>Blub</span>的功能。但是如果向上看，他不会意识到。他认为所看到的都是些怪异的语言。他也许会觉得看到的语言都和<span>Blub</span>差不多，只是花哨的东西太多。<span>Blub</span>对他就够好了－因为，他用<span>Blub</span>思考。</p>\n<p>当我们切换到使用更高级的语言的程序员的视角，我们会发现他朝下会看到<span>Blub</span>：你怎么能用<span>Blub</span>干活呢？它连<span>y</span>功能都没有哎。</p>\n<p>推理一下，只有理解最强大的语言的程序员才能一览众山，看到所有语言能力间的差别。（这也许就是<span>Eric Raymond</span>说<span>Lisp</span>能让你成为一个更好的程序员的意思。）你不能相信其他人的观点，因为<span>Blub</span>困境：他们对自己碰巧用上的语言很满意，因为这语言描绘了他们思考程序的方式。</p>\n<p>我从自己的经验里知道这一点，高中时我用<span>Basic</span>写程序。这语言甚至都不支持递归。现在难以想象写程序不用递归。可那时，我可不稀罕。我用<span>Basic</span>思考，我写得很顺，我所触及皆以掌握。</p>\n<p><span>Eric Raymond</span>所推荐的<span>5</span>种语言位于能力谱系的不同位置。它们的相对位置如何讨论起来比较敏感。我要说的是，我认为<span>Lisp</span>最高。要支持我的观点，我要告诉你一样其它<span>4</span>种语言都没有的东西：离了宏，你咋能编程呢？<span>[5]</span></p>\n<p>很多语言都有叫做宏的东西。但是<span>Lisp</span>的宏独树一帜。信不信由你，宏和括号联系紧密。<span>Lisp</span>的设计者把那一堆括号加进来可不是为了标新立异。对于<span>Blub</span>程序员，<span>Lisp</span>看起来很怪。但是那些括号事出有因。它们是<span>Lisp</span>与其它语言本质区别的外在表现。</p>\n<p><span>Lisp</span>代码由<span>Lisp</span>数据对象构成。不是在像<span>&rdquo;</span>源码文件由字符构成<span>&ldquo;</span>或者<span>&rdquo;</span>字符串也是该语言支持的数据类型之一<span>&ldquo;</span>这样的浅显的层次上：在由解析器读进内存后，<span>Lisp</span>代码就由你能遍历的数据结构构成了。</p>\n<p>如果你了解编译器的工作原理，其实解析器干的活不多：要说<span>Lisp</span>的语法奇怪，还不如说<span>Lisp</span>没有语法。你写程序实际上是在写语法树－而其它语言需要编译器生成这种内部表示。你的程序完全可以存取这些语法树。你可以写程序去操作它。在<span>Lisp</span>里，这些程序叫做宏。它们是写程序的程序。</p>\n<p>写程序的程序？你哪天才能用得到啊？如果你用<span>Cobol</span>思考，不常用。而用<span>Lisp</span>思考的话，答案就是：天天都用。这里要是我能举个例子说明就好了。但是这样对于不懂<span>Lisp</span>的人就是在废话了；要是从头到尾讲明白这里篇幅也不够，在<span>Ansi Common Lisp</span>里我的进度很快，但也到<span>160</span>页才开始讲宏。</p>\n<p>但我想给一点有说服力的论据。<span>Viaweb</span>的编辑器代码里有<span>20</span>～<span>25%</span>的宏。宏比普通的<span>Lisp</span>程序难写，不该用的时候用就是画蛇添足。所以我们代码里的每个宏都有用。这意味着<span>20</span>～<span>25%</span>的代码是其它语言没法容易做到的。然而，挑剔的<span>Blub</span>程序员也许会找找我所声称的<span>Lisp</span>的神秘力量，这一堆宏应该能让他们迷惑不已。我们写这些宏不是为了自娱自乐－我们是个小创业公司，我们必须疯狂写程序，这样才能与竞争对手之间构筑技术上的壁垒。</p>\n<p>怀疑的人会说这有什么联系吗？我们代码里的一大块是在做其它语言很难做到的事情，发布的软件做了很多竞争对手的软件没法做到的事情。也许这其中有联系。我鼓励你顺着这条线索再走走。拄着拐杖的跛老头也许还有更多去了解。</p>\n<p><strong><span>Aikido for Startups</span></strong></p>\n<p><span>创业公司的合气道</span></p>\n<p>但是我不期望能让任何人（过了<span>25</span>岁）去学<span>Lisp</span>。这篇文章的目的不是要改变谁的思想，而是让那些有兴趣用<span>Lisp</span>的人更加确信－这些人知道<span>Lisp</span>很强大，但是因为它应用不广泛而有所顾虑。在竞争中，这是个优势。如果你的竞争对手不了解，<span>Lisp</span>的力量会加倍。</p>\n<p>如果你想在创业公司里用<span>Lisp</span>，不用担心它不流行。你应当期望保持现状。事实也如此。程序设计语言的天性就是让人们乐于用它。计算机硬件的发展比个人习惯的发展快得多，程序设计的实践通常比处理器的进步落后<span>10</span>～<span>20</span>年。在<span>MIT</span>，他们<span>60’</span>就开始用高级语言写程序了，但是很多公司到了<span>80’</span>还在用机器语言。我打赌，很多人会一直用机器语言写下去，直到有一天，处理器换成了<span>RISC</span>指令集－就像急着下班的酒吧服务员急着关门一样，端掉这些人的饭碗。</p>\n<p>通常，技术进步很快。但是程序设计语言不同：它不只是技术，它是程序员思考的工具。语言是技术和信仰的混合体<span>[6]</span>。于是，位于中间的语言（也就是中级程序员用的那些语言）动得跟冰山一样慢。<span>60’</span>由<span>Lisp</span>引入的垃圾回收功能，现在开始被接受。词法闭包，由<span>Lisp</span>在<span>70’</span>引入的，现在其它语言还没有广泛采纳。<span>60’</span>中<span>Lisp</span>引入的宏，现在还是处女地。</p>\n<p>很明显，中间的语言族有着巨大的惯性。我不认为你能和这个力量对抗。相反，你要向合气道的选手学习：以彼之道，还治彼身。</p>\n<p>如果你在大公司工作，这不太容易。你很难说你的服秃顶上司同意用<span>Lisp</span>写东西，他刚才才读到另一种语言新鲜出炉（就像<span>Ada</span>二十年前那样），正要征服世界。但是你要是为创业公司工作，没有秃顶老板干涉，你就能像我们那样化解<span>Blub</span>困境，转为自己的优势：你可以用那些黏糊在中间语言的竞争者不能采用的技术。</p>\n<p>如果你为创业公司工作，这儿有个估量对手的妙招：读读他们的招聘职位列表。他们网站上其它的东西无非是些股票图片和乏味的说明，但是招聘职位却必须反映他们要找的人，否则会引来一堆无关的求职者。</p>\n<p>在<span>Viaweb</span>工作的时候，我读了不少职位描述。大约每个月都有一个新的竞争对手加入这个行当。检查了他们的在线<span>Demo</span>后，我做的第一件事就是看看他们的招聘页。过了几年，我就知道要当心哪家。工作描述里要是<span>IT</span>类的成分越多，这家公司就越不构成威胁。对我们最安全的就是那些要求<span>Oracle</span>经验的，永远都不用担心他们。他们要是招聘<span>C++</span>或者<span>Java</span>开发者，也不用担心。但是要是找的是<span>Perl</span>或者<span>Python</span>程序员，就有点威胁了－这公司至少在技术方面是由真正的黑客掌管的。要是当初我看见一家招<span>Lisp</span>黑客的，我一定会忧心忡忡的。</p>\n<p>－－－－－</p>\n<p>注：</p>\n<p><span>[1] Viaweb</span>一开始有两块：编辑器（用<span>Lisp</span>写的，客户用来建站）和订单系统（用<span>C</span>写的，处理订单）。第一版主要是<span>Lisp,</span>因为订单系统很小。后来增加了两个模块：<span>C</span>写的图片生成器以及<span>Perl</span>写的结算工具。</p>\n<p><span>2003</span>年一月，<span>Yahoo</span>发布了新的编辑器，用<span>C++</span>和<span>Perl</span>写的。也很难讲这程序就不再是用<span>Lisp</span>写的了：因为要把它翻译成<span>C++</span>，他们先得写一个<span>Lisp</span>解释器－页面生成模板的代码据我所知还是<span>Lisp</span>的。（参考<span>Greenspun’s Tenth Rule</span>。）</p>\n<p><span>[2] Robert Morris</span>说我没必要那么保密。因为即使竞争对手知道我们用<span>Lisp</span>，他们也不会理解原因的：<span>&rdquo;</span>如果他们足够聪明，那他们应当已经在用<span>Lisp</span>了。<span>&ldquo;</span></p>\n<p><span>[3]&nbsp;</span>所有语言在图灵相等这一层上是一样强大的。但是这和程序员的意思不一样。（没人想在图灵机上写程序。）程序员在意的语言的能力也许不能形式化的定义，但一种解释就是，你想要在弱的语言里的要某种强语言的功能，就只能用弱语言去写一个解释器。如果<span>A</span>语言由一个操作可以把字符串里的空格移走，而<span>B</span>语言没有，这并不意味着<span>B</span>语言弱，因为你可以写个函数来完成这件事。但是要是<span>A</span>支持递归，而<span>B</span>不支持，这你就不好写个库函数来完成了。</p>\n<p><span>[4]&nbsp;</span>对<span>Nerd</span>们的注解：可能是个格，顶尖；形状不重要，这里至少有个偏序关系。</p>\n<p><span>[5]&nbsp;</span>把宏当作一个单独的功能有点误导。实践中，宏的作用通常由其它一些<span>Lisp</span>特性比如词法闭包以及<span>rest</span>参数大大加强。</p>\n<p><span>[6]&nbsp;</span>这样，比较编程语言要么挑起信仰口水战要么就只能在绝对中立的教材里，这只能是人类学的工作了。想追求平静，保护自己的所有的人会避免这个话题。但是，这问题只是一半和信仰相关；还有值得研究的东西，特别是你要设计一个新语言时。</p>\n<p>译注：</p>\n<p>[1] 翻译时中英混排，完成时提取中文可以用grep:&nbsp;</p>\n<p>&nbsp;</p>\n<p>from:<a href=\"http://article.yeeyan.org/view/11304/49653\" target=\"_blank\" rel=\"noopener\">http://article.yeeyan.org/view/11304/49653</a></p>\n"},{"title":"svn+tp-link+花生壳搭建外网服务器","date":"2011-08-10T14:59:00.000Z","_content":"\n### &nbsp;\n\n### 1.准备工作\n\n1.下载svn客户端和svn服务器\n\n可以去[http://subversion.apache.org/packages.html](http://subversion.apache.org/packages.html) 找到自己平台的客户端和服务器。\n\n因为笔者的平台是windows，所以选择了[TortoiseSVN](http://tortoisesvn.net/)和[Win32Svn](http://sourceforge.net/projects/win32svn/)。\n\n2.安装[花生壳](http://www.oray.com/peanuthull/)\n\n去官网下载花生壳软件，并申请护照，就可以得到一个二级域名，这里就不累述了。\n\n### 2.网络的搭建\n\n由于笔者的网络是通过路由器联网，所以需要将路由的端口映射到内网的ip。针对tp-link路由，具体的步骤是：\n\n1.进入管理员页面。\n\n2.设置IP与MAC地址绑定。当然这项也可以不设，不过因为内外IP会变，所以可能每次都要设置，很麻烦。\n\n3.设置虚拟服务器。将端口号映射到自己的ip地址。\n\n[![image](http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254263582.png \"image\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254256746.png)\n\n此处设置端口号为3690 是因为svnserve默认使用的是3690端口。\n\n4.通过花生壳设置DDNS，填入之前申请到的花生壳用户名和地址。\n\n[![image](http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254321069.png \"image\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254301758.png)\n\nNOTE：如果登录不了，一般有两个解决方法：1.刷新路由的韧体。2.选择另外一个服务提供者。\n\n5.登入花生壳\n\n在本机登录花生壳。如果看到花生壳软件的右下方有一个ip地址和自己路由的ip地址一致的话，那么就表明配置成功了。如果不一样，可能需要等待一会，因为DDNS的设置需要一些时间。\n\n*\n\n### 3.svn的配置\n\n1.创建代码库\n\n可以通过两种方式：\n\n(a).安装完[TortoiseSVN](http://tortoisesvn.net/)后，在鼠标右键的快捷方式下，就会有一个create repository here的选项，在一个空文件夹下，执行此条命令就会自动创建一个repository。\n\n(b).在[Win32Svn](http://sourceforge.net/projects/win32svn/)安装目录的bin文件夹下，找到svnadmin可执行档，键入：\n\n> svnadmin create &lt;_folder path_&gt;\n\n关于代码库更详细的配置方式，可以参考：[http://blog.163.com/cp7618@yeah/blog/static/70234777201108105751174/](http://blog.163.com/cp7618@yeah/blog/static/70234777201108105751174/)\n\n2.导入项目\n\n具体的步骤可以参考《Subversion 1.6 权威指南》。\n\n### 4.运行svn\n\n在[Win32Svn](http://sourceforge.net/projects/win32svn/)安装目录的bin文件夹下，找到svnserve，键入：\n\n> <span color=\"#4b4b4b\" style=\"color: #4b4b4b;\">svnserve &ndash;d &ndash;r &lt;repository path&gt; </span>--listen-port 3690\n\n### 5.远程访问\n\n在远程的PC上，打开[TortoiseSVN](http://tortoisesvn.net/)，输入svn://&lt;花生壳提供的免费域名&gt;即可访问到共享的项目。","source":"_posts/svn-tp-link-花生壳搭建外网服务器.md","raw":"---\ntitle: svn+tp-link+花生壳搭建外网服务器\ntags: []\ndate: 2011-08-10 22:59:00\n---\n\n### &nbsp;\n\n### 1.准备工作\n\n1.下载svn客户端和svn服务器\n\n可以去[http://subversion.apache.org/packages.html](http://subversion.apache.org/packages.html) 找到自己平台的客户端和服务器。\n\n因为笔者的平台是windows，所以选择了[TortoiseSVN](http://tortoisesvn.net/)和[Win32Svn](http://sourceforge.net/projects/win32svn/)。\n\n2.安装[花生壳](http://www.oray.com/peanuthull/)\n\n去官网下载花生壳软件，并申请护照，就可以得到一个二级域名，这里就不累述了。\n\n### 2.网络的搭建\n\n由于笔者的网络是通过路由器联网，所以需要将路由的端口映射到内网的ip。针对tp-link路由，具体的步骤是：\n\n1.进入管理员页面。\n\n2.设置IP与MAC地址绑定。当然这项也可以不设，不过因为内外IP会变，所以可能每次都要设置，很麻烦。\n\n3.设置虚拟服务器。将端口号映射到自己的ip地址。\n\n[![image](http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254263582.png \"image\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254256746.png)\n\n此处设置端口号为3690 是因为svnserve默认使用的是3690端口。\n\n4.通过花生壳设置DDNS，填入之前申请到的花生壳用户名和地址。\n\n[![image](http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254321069.png \"image\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254301758.png)\n\nNOTE：如果登录不了，一般有两个解决方法：1.刷新路由的韧体。2.选择另外一个服务提供者。\n\n5.登入花生壳\n\n在本机登录花生壳。如果看到花生壳软件的右下方有一个ip地址和自己路由的ip地址一致的话，那么就表明配置成功了。如果不一样，可能需要等待一会，因为DDNS的设置需要一些时间。\n\n*\n\n### 3.svn的配置\n\n1.创建代码库\n\n可以通过两种方式：\n\n(a).安装完[TortoiseSVN](http://tortoisesvn.net/)后，在鼠标右键的快捷方式下，就会有一个create repository here的选项，在一个空文件夹下，执行此条命令就会自动创建一个repository。\n\n(b).在[Win32Svn](http://sourceforge.net/projects/win32svn/)安装目录的bin文件夹下，找到svnadmin可执行档，键入：\n\n> svnadmin create &lt;_folder path_&gt;\n\n关于代码库更详细的配置方式，可以参考：[http://blog.163.com/cp7618@yeah/blog/static/70234777201108105751174/](http://blog.163.com/cp7618@yeah/blog/static/70234777201108105751174/)\n\n2.导入项目\n\n具体的步骤可以参考《Subversion 1.6 权威指南》。\n\n### 4.运行svn\n\n在[Win32Svn](http://sourceforge.net/projects/win32svn/)安装目录的bin文件夹下，找到svnserve，键入：\n\n> <span color=\"#4b4b4b\" style=\"color: #4b4b4b;\">svnserve &ndash;d &ndash;r &lt;repository path&gt; </span>--listen-port 3690\n\n### 5.远程访问\n\n在远程的PC上，打开[TortoiseSVN](http://tortoisesvn.net/)，输入svn://&lt;花生壳提供的免费域名&gt;即可访问到共享的项目。","slug":"svn-tp-link-花生壳搭建外网服务器","published":1,"updated":"2019-02-16T13:03:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr00001t2zs5pe4uttx","content":"<h3 id=\"nbsp\"><a href=\"#nbsp\" class=\"headerlink\" title=\"&nbsp;\"></a>&nbsp;</h3><h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h3><p>1.下载svn客户端和svn服务器</p>\n<p>可以去<a href=\"http://subversion.apache.org/packages.html\" target=\"_blank\" rel=\"noopener\">http://subversion.apache.org/packages.html</a> 找到自己平台的客户端和服务器。</p>\n<p>因为笔者的平台是windows，所以选择了<a href=\"http://tortoisesvn.net/\" target=\"_blank\" rel=\"noopener\">TortoiseSVN</a>和<a href=\"http://sourceforge.net/projects/win32svn/\" target=\"_blank\" rel=\"noopener\">Win32Svn</a>。</p>\n<p>2.安装<a href=\"http://www.oray.com/peanuthull/\" target=\"_blank\" rel=\"noopener\">花生壳</a></p>\n<p>去官网下载花生壳软件，并申请护照，就可以得到一个二级域名，这里就不累述了。</p>\n<h3 id=\"2-网络的搭建\"><a href=\"#2-网络的搭建\" class=\"headerlink\" title=\"2.网络的搭建\"></a>2.网络的搭建</h3><p>由于笔者的网络是通过路由器联网，所以需要将路由的端口映射到内网的ip。针对tp-link路由，具体的步骤是：</p>\n<p>1.进入管理员页面。</p>\n<p>2.设置IP与MAC地址绑定。当然这项也可以不设，不过因为内外IP会变，所以可能每次都要设置，很麻烦。</p>\n<p>3.设置虚拟服务器。将端口号映射到自己的ip地址。</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254256746.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254263582.png\" alt=\"image\" title=\"image\"></a></p>\n<p>此处设置端口号为3690 是因为svnserve默认使用的是3690端口。</p>\n<p>4.通过花生壳设置DDNS，填入之前申请到的花生壳用户名和地址。</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254301758.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254321069.png\" alt=\"image\" title=\"image\"></a></p>\n<p>NOTE：如果登录不了，一般有两个解决方法：1.刷新路由的韧体。2.选择另外一个服务提供者。</p>\n<p>5.登入花生壳</p>\n<p>在本机登录花生壳。如果看到花生壳软件的右下方有一个ip地址和自己路由的ip地址一致的话，那么就表明配置成功了。如果不一样，可能需要等待一会，因为DDNS的设置需要一些时间。</p>\n<p>*</p>\n<h3 id=\"3-svn的配置\"><a href=\"#3-svn的配置\" class=\"headerlink\" title=\"3.svn的配置\"></a>3.svn的配置</h3><p>1.创建代码库</p>\n<p>可以通过两种方式：</p>\n<p>(a).安装完<a href=\"http://tortoisesvn.net/\" target=\"_blank\" rel=\"noopener\">TortoiseSVN</a>后，在鼠标右键的快捷方式下，就会有一个create repository here的选项，在一个空文件夹下，执行此条命令就会自动创建一个repository。</p>\n<p>(b).在<a href=\"http://sourceforge.net/projects/win32svn/\" target=\"_blank\" rel=\"noopener\">Win32Svn</a>安装目录的bin文件夹下，找到svnadmin可执行档，键入：</p>\n<blockquote>\n<p>svnadmin create &lt;<em>folder path</em>&gt;</p>\n</blockquote>\n<p>关于代码库更详细的配置方式，可以参考：<a href=\"http://blog.163.com/cp7618@yeah/blog/static/70234777201108105751174/\" target=\"_blank\" rel=\"noopener\">http://blog.163.com/cp7618@yeah/blog/static/70234777201108105751174/</a></p>\n<p>2.导入项目</p>\n<p>具体的步骤可以参考《Subversion 1.6 权威指南》。</p>\n<h3 id=\"4-运行svn\"><a href=\"#4-运行svn\" class=\"headerlink\" title=\"4.运行svn\"></a>4.运行svn</h3><p>在<a href=\"http://sourceforge.net/projects/win32svn/\" target=\"_blank\" rel=\"noopener\">Win32Svn</a>安装目录的bin文件夹下，找到svnserve，键入：</p>\n<blockquote>\n<p><span color=\"#4b4b4b\" style=\"color: #4b4b4b;\">svnserve &ndash;d &ndash;r &lt;repository path&gt; </span>–listen-port 3690</p>\n</blockquote>\n<h3 id=\"5-远程访问\"><a href=\"#5-远程访问\" class=\"headerlink\" title=\"5.远程访问\"></a>5.远程访问</h3><p>在远程的PC上，打开<a href=\"http://tortoisesvn.net/\" target=\"_blank\" rel=\"noopener\">TortoiseSVN</a>，输入svn://&lt;花生壳提供的免费域名&gt;即可访问到共享的项目。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nbsp\"><a href=\"#nbsp\" class=\"headerlink\" title=\"&nbsp;\"></a>&nbsp;</h3><h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h3><p>1.下载svn客户端和svn服务器</p>\n<p>可以去<a href=\"http://subversion.apache.org/packages.html\" target=\"_blank\" rel=\"noopener\">http://subversion.apache.org/packages.html</a> 找到自己平台的客户端和服务器。</p>\n<p>因为笔者的平台是windows，所以选择了<a href=\"http://tortoisesvn.net/\" target=\"_blank\" rel=\"noopener\">TortoiseSVN</a>和<a href=\"http://sourceforge.net/projects/win32svn/\" target=\"_blank\" rel=\"noopener\">Win32Svn</a>。</p>\n<p>2.安装<a href=\"http://www.oray.com/peanuthull/\" target=\"_blank\" rel=\"noopener\">花生壳</a></p>\n<p>去官网下载花生壳软件，并申请护照，就可以得到一个二级域名，这里就不累述了。</p>\n<h3 id=\"2-网络的搭建\"><a href=\"#2-网络的搭建\" class=\"headerlink\" title=\"2.网络的搭建\"></a>2.网络的搭建</h3><p>由于笔者的网络是通过路由器联网，所以需要将路由的端口映射到内网的ip。针对tp-link路由，具体的步骤是：</p>\n<p>1.进入管理员页面。</p>\n<p>2.设置IP与MAC地址绑定。当然这项也可以不设，不过因为内外IP会变，所以可能每次都要设置，很麻烦。</p>\n<p>3.设置虚拟服务器。将端口号映射到自己的ip地址。</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254256746.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254263582.png\" alt=\"image\" title=\"image\"></a></p>\n<p>此处设置端口号为3690 是因为svnserve默认使用的是3690端口。</p>\n<p>4.通过花生壳设置DDNS，填入之前申请到的花生壳用户名和地址。</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254301758.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/201108/201108102254321069.png\" alt=\"image\" title=\"image\"></a></p>\n<p>NOTE：如果登录不了，一般有两个解决方法：1.刷新路由的韧体。2.选择另外一个服务提供者。</p>\n<p>5.登入花生壳</p>\n<p>在本机登录花生壳。如果看到花生壳软件的右下方有一个ip地址和自己路由的ip地址一致的话，那么就表明配置成功了。如果不一样，可能需要等待一会，因为DDNS的设置需要一些时间。</p>\n<p>*</p>\n<h3 id=\"3-svn的配置\"><a href=\"#3-svn的配置\" class=\"headerlink\" title=\"3.svn的配置\"></a>3.svn的配置</h3><p>1.创建代码库</p>\n<p>可以通过两种方式：</p>\n<p>(a).安装完<a href=\"http://tortoisesvn.net/\" target=\"_blank\" rel=\"noopener\">TortoiseSVN</a>后，在鼠标右键的快捷方式下，就会有一个create repository here的选项，在一个空文件夹下，执行此条命令就会自动创建一个repository。</p>\n<p>(b).在<a href=\"http://sourceforge.net/projects/win32svn/\" target=\"_blank\" rel=\"noopener\">Win32Svn</a>安装目录的bin文件夹下，找到svnadmin可执行档，键入：</p>\n<blockquote>\n<p>svnadmin create &lt;<em>folder path</em>&gt;</p>\n</blockquote>\n<p>关于代码库更详细的配置方式，可以参考：<a href=\"http://blog.163.com/cp7618@yeah/blog/static/70234777201108105751174/\" target=\"_blank\" rel=\"noopener\">http://blog.163.com/cp7618@yeah/blog/static/70234777201108105751174/</a></p>\n<p>2.导入项目</p>\n<p>具体的步骤可以参考《Subversion 1.6 权威指南》。</p>\n<h3 id=\"4-运行svn\"><a href=\"#4-运行svn\" class=\"headerlink\" title=\"4.运行svn\"></a>4.运行svn</h3><p>在<a href=\"http://sourceforge.net/projects/win32svn/\" target=\"_blank\" rel=\"noopener\">Win32Svn</a>安装目录的bin文件夹下，找到svnserve，键入：</p>\n<blockquote>\n<p><span color=\"#4b4b4b\" style=\"color: #4b4b4b;\">svnserve &ndash;d &ndash;r &lt;repository path&gt; </span>–listen-port 3690</p>\n</blockquote>\n<h3 id=\"5-远程访问\"><a href=\"#5-远程访问\" class=\"headerlink\" title=\"5.远程访问\"></a>5.远程访问</h3><p>在远程的PC上，打开<a href=\"http://tortoisesvn.net/\" target=\"_blank\" rel=\"noopener\">TortoiseSVN</a>，输入svn://&lt;花生壳提供的免费域名&gt;即可访问到共享的项目。</p>\n"},{"title":"QT中拖拽的实现（附示例代码）","date":"2010-10-10T10:22:00.000Z","_content":"\nQT中的Drag and Drop的详细介绍参见：[http://doc.qt.nokia.com/4.0/dnd.html](http://doc.qt.nokia.com/4.0/dnd.html)\n\n下面主要介绍一下Drag and Drop的Demo([下载](http://u.115.com/file/f5a4c1ed9c))，先附上一份效果图：\n\n[![未命名图片](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87_thumb.png \"未命名图片\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87_2.png) \n\n&nbsp;\n\n这是一个拼图的Demo，左边是原图，右边是打散的图，拖动小方格可以实现不同的方格内的图片交换，此外程序还支持手动拖入原图片。\n\n代码中主要的类是一个**DragWidget**。\n\n它实现了以下几个方法。\n\n*   void dragEnterEvent(QDragEnterEvent *dragEvent);\nvoid dragLeaveEvent(QDragLeaveEvent *dragEvent);\nvoid dragMoveEvent(QDragMoveEvent *dragEvent);\nvoid dropEvent(QDropEvent *dragEvent);\nvoid mousePressEvent(QMouseEvent *mouseEvent);\n\nDrag执行的流程是： \n\nDrag是从drag-&gt;exec()开始的，此时将开启进入一个新的事件循环，然后在拖动的过程中会在下面三个事件中交替： \n\n&nbsp;\n\n[![DragCircle](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/DragCircle_thumb.png \"DragCircle\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/DragCircle_2.png)\n\n其中DragEnter是有拖动进入该Widget时触发的，对应的DragLeave则是拖动离开时触发的，而DragMove就是鼠标拖动的时候触发的。\n\n最后当鼠标释放的时候将触发dragEvent，此时将决定拖拽的结果。\n\n回头看一下Drag的触发，和大多数系统一样，一个Drag可能是从控件外触发的，即将外部的数据拖入，也可以是从控件内部触发，即手动生成一个QDrag对象。在示例代码中，这两种方式都会有接触。\n\n&nbsp;\n\n再聊聊拖动的机制，其实拖动就是将一处的数据移动或者复制到另外一处，在QT中拖动所承载的数据使用QMimeData表示的，它可以用来表示许多**Mime Type**的集合。一个Mime Type即有format和data两部分组成，format即指示了如何解析对应的data。更详细的定义可以参考：[http://en.wikipedia.org/wiki/MIME](http://en.wikipedia.org/wiki/MIME)。\n\n&nbsp;\n\n最后简单地介绍一些重要的代码片段\n\nDragWidget中使用三个数组来表示对于的数据：\n\n> QList&lt;QPixmap&gt; mImgList;&nbsp;&nbsp; <span style=\"color: #ff0000;\">//image per block\n> </span>QList&lt;QRect&gt;&nbsp;&nbsp; mPieceList; <span style=\"color: #ff0000;\">//position per block</span> \n> QList&lt;QPoint&gt;&nbsp; mPosList;&nbsp;&nbsp; <span style=\"color: #ff0000;\">//correct per image</span>\n\nvoid mousePressEvent(QMouseEvent *mouseEvent);\n\n&nbsp;\n\n```cpp\nQPoint point = mPosList[find];\nQPixmap image = mImgList[find];\nQRect rect = mHighlightRect;\nmPieceList.removeAt(find);//.remove(mHighlightRect);\nmImgList.removeAt(find);\nmPosList.removeAt(find);\nif (checkMatch(rect, point))\n     --mInPlace;\nQByteArray data;\nQDataStream stream(&data, QIODevice::WriteOnly);\nstream << image << point;\nQDrag* drag = new QDrag(this);\nQMimeData* mimeData = new QMimeData;\nmimeData->setData(\"application/x-dragitemdata\", data);\ndrag->setMimeData(mimeData);\ndrag->setPixmap(image);\ndrag->setHotSpot(mouseEvent->pos() - mHighlightRect.topLeft());\nif (0 == drag->exec(Qt::MoveAction)){\n```\n\n&nbsp;\n\n在mousePress的时候开启一个Drag，定义一个自己的Mime Type-&gt;&ldquo;application/x-dragitemdata&rdquo;，将需要的数据打包进去。 \n\n```cpp\nif (dragEvent->mimeData()->hasFormat(\"application/x-dragitemdata\"))\n{\n        QRect targetRect = targetBlock(dragEvent->pos());\n        QByteArray data = dragEvent->mimeData()->data(\"application/x-dragitemdata\");\n        QDataStream stream(data);\n        QPixmap image;\n        QPoint point;\n        stream >> image >> point;\n        mImgList.append(image);\n        mPieceList.append(targetRect);\n        mPosList.append(point);\n        if (checkMatch(targetRect, point))\n            ++mInPlace;\n```\n\n&nbsp;\n\n在drop消息中对数据进行解包，并判断是否放置到了合适的位置。","source":"_posts/QT中拖拽的实现（附示例代码）.md","raw":"---\ntitle: QT中拖拽的实现（附示例代码）\ntags: []\ndate: 2010-10-10 18:22:00\n---\n\nQT中的Drag and Drop的详细介绍参见：[http://doc.qt.nokia.com/4.0/dnd.html](http://doc.qt.nokia.com/4.0/dnd.html)\n\n下面主要介绍一下Drag and Drop的Demo([下载](http://u.115.com/file/f5a4c1ed9c))，先附上一份效果图：\n\n[![未命名图片](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87_thumb.png \"未命名图片\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87_2.png) \n\n&nbsp;\n\n这是一个拼图的Demo，左边是原图，右边是打散的图，拖动小方格可以实现不同的方格内的图片交换，此外程序还支持手动拖入原图片。\n\n代码中主要的类是一个**DragWidget**。\n\n它实现了以下几个方法。\n\n*   void dragEnterEvent(QDragEnterEvent *dragEvent);\nvoid dragLeaveEvent(QDragLeaveEvent *dragEvent);\nvoid dragMoveEvent(QDragMoveEvent *dragEvent);\nvoid dropEvent(QDropEvent *dragEvent);\nvoid mousePressEvent(QMouseEvent *mouseEvent);\n\nDrag执行的流程是： \n\nDrag是从drag-&gt;exec()开始的，此时将开启进入一个新的事件循环，然后在拖动的过程中会在下面三个事件中交替： \n\n&nbsp;\n\n[![DragCircle](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/DragCircle_thumb.png \"DragCircle\")](http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/DragCircle_2.png)\n\n其中DragEnter是有拖动进入该Widget时触发的，对应的DragLeave则是拖动离开时触发的，而DragMove就是鼠标拖动的时候触发的。\n\n最后当鼠标释放的时候将触发dragEvent，此时将决定拖拽的结果。\n\n回头看一下Drag的触发，和大多数系统一样，一个Drag可能是从控件外触发的，即将外部的数据拖入，也可以是从控件内部触发，即手动生成一个QDrag对象。在示例代码中，这两种方式都会有接触。\n\n&nbsp;\n\n再聊聊拖动的机制，其实拖动就是将一处的数据移动或者复制到另外一处，在QT中拖动所承载的数据使用QMimeData表示的，它可以用来表示许多**Mime Type**的集合。一个Mime Type即有format和data两部分组成，format即指示了如何解析对应的data。更详细的定义可以参考：[http://en.wikipedia.org/wiki/MIME](http://en.wikipedia.org/wiki/MIME)。\n\n&nbsp;\n\n最后简单地介绍一些重要的代码片段\n\nDragWidget中使用三个数组来表示对于的数据：\n\n> QList&lt;QPixmap&gt; mImgList;&nbsp;&nbsp; <span style=\"color: #ff0000;\">//image per block\n> </span>QList&lt;QRect&gt;&nbsp;&nbsp; mPieceList; <span style=\"color: #ff0000;\">//position per block</span> \n> QList&lt;QPoint&gt;&nbsp; mPosList;&nbsp;&nbsp; <span style=\"color: #ff0000;\">//correct per image</span>\n\nvoid mousePressEvent(QMouseEvent *mouseEvent);\n\n&nbsp;\n\n```cpp\nQPoint point = mPosList[find];\nQPixmap image = mImgList[find];\nQRect rect = mHighlightRect;\nmPieceList.removeAt(find);//.remove(mHighlightRect);\nmImgList.removeAt(find);\nmPosList.removeAt(find);\nif (checkMatch(rect, point))\n     --mInPlace;\nQByteArray data;\nQDataStream stream(&data, QIODevice::WriteOnly);\nstream << image << point;\nQDrag* drag = new QDrag(this);\nQMimeData* mimeData = new QMimeData;\nmimeData->setData(\"application/x-dragitemdata\", data);\ndrag->setMimeData(mimeData);\ndrag->setPixmap(image);\ndrag->setHotSpot(mouseEvent->pos() - mHighlightRect.topLeft());\nif (0 == drag->exec(Qt::MoveAction)){\n```\n\n&nbsp;\n\n在mousePress的时候开启一个Drag，定义一个自己的Mime Type-&gt;&ldquo;application/x-dragitemdata&rdquo;，将需要的数据打包进去。 \n\n```cpp\nif (dragEvent->mimeData()->hasFormat(\"application/x-dragitemdata\"))\n{\n        QRect targetRect = targetBlock(dragEvent->pos());\n        QByteArray data = dragEvent->mimeData()->data(\"application/x-dragitemdata\");\n        QDataStream stream(data);\n        QPixmap image;\n        QPoint point;\n        stream >> image >> point;\n        mImgList.append(image);\n        mPieceList.append(targetRect);\n        mPosList.append(point);\n        if (checkMatch(targetRect, point))\n            ++mInPlace;\n```\n\n&nbsp;\n\n在drop消息中对数据进行解包，并判断是否放置到了合适的位置。","slug":"QT中拖拽的实现（附示例代码）","published":1,"updated":"2019-02-22T14:05:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr20002t2zstgxg5vbx","content":"<p>QT中的Drag and Drop的详细介绍参见：<a href=\"http://doc.qt.nokia.com/4.0/dnd.html\" target=\"_blank\" rel=\"noopener\">http://doc.qt.nokia.com/4.0/dnd.html</a></p>\n<p>下面主要介绍一下Drag and Drop的Demo(<a href=\"http://u.115.com/file/f5a4c1ed9c\" target=\"_blank\" rel=\"noopener\">下载</a>)，先附上一份效果图：</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87_thumb.png\" alt=\"未命名图片\" title=\"未命名图片\"></a> </p>\n<p>&nbsp;</p>\n<p>这是一个拼图的Demo，左边是原图，右边是打散的图，拖动小方格可以实现不同的方格内的图片交换，此外程序还支持手动拖入原图片。</p>\n<p>代码中主要的类是一个<strong>DragWidget</strong>。</p>\n<p>它实现了以下几个方法。</p>\n<ul>\n<li>void dragEnterEvent(QDragEnterEvent <em>dragEvent);<br>void dragLeaveEvent(QDragLeaveEvent </em>dragEvent);<br>void dragMoveEvent(QDragMoveEvent <em>dragEvent);<br>void dropEvent(QDropEvent </em>dragEvent);<br>void mousePressEvent(QMouseEvent *mouseEvent);</li>\n</ul>\n<p>Drag执行的流程是： </p>\n<p>Drag是从drag-&gt;exec()开始的，此时将开启进入一个新的事件循环，然后在拖动的过程中会在下面三个事件中交替： </p>\n<p>&nbsp;</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/DragCircle_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/DragCircle_thumb.png\" alt=\"DragCircle\" title=\"DragCircle\"></a></p>\n<p>其中DragEnter是有拖动进入该Widget时触发的，对应的DragLeave则是拖动离开时触发的，而DragMove就是鼠标拖动的时候触发的。</p>\n<p>最后当鼠标释放的时候将触发dragEvent，此时将决定拖拽的结果。</p>\n<p>回头看一下Drag的触发，和大多数系统一样，一个Drag可能是从控件外触发的，即将外部的数据拖入，也可以是从控件内部触发，即手动生成一个QDrag对象。在示例代码中，这两种方式都会有接触。</p>\n<p>&nbsp;</p>\n<p>再聊聊拖动的机制，其实拖动就是将一处的数据移动或者复制到另外一处，在QT中拖动所承载的数据使用QMimeData表示的，它可以用来表示许多<strong>Mime Type</strong>的集合。一个Mime Type即有format和data两部分组成，format即指示了如何解析对应的data。更详细的定义可以参考：<a href=\"http://en.wikipedia.org/wiki/MIME\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/MIME</a>。</p>\n<p>&nbsp;</p>\n<p>最后简单地介绍一些重要的代码片段</p>\n<p>DragWidget中使用三个数组来表示对于的数据：</p>\n<blockquote>\n<p>QList&lt;QPixmap&gt; mImgList;&nbsp;&nbsp; <span style=\"color: #ff0000;\">//image per block<br></span>QList&lt;QRect&gt;&nbsp;&nbsp; mPieceList; <span style=\"color: #ff0000;\">//position per block</span><br>QList&lt;QPoint&gt;&nbsp; mPosList;&nbsp;&nbsp; <span style=\"color: #ff0000;\">//correct per image</span></p>\n</blockquote>\n<p>void mousePressEvent(QMouseEvent *mouseEvent);</p>\n<p>&nbsp;</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QPoint point = mPosList[find];</span><br><span class=\"line\">QPixmap image = mImgList[find];</span><br><span class=\"line\">QRect rect = mHighlightRect;</span><br><span class=\"line\">mPieceList.removeAt(find);<span class=\"comment\">//.remove(mHighlightRect);</span></span><br><span class=\"line\">mImgList.removeAt(find);</span><br><span class=\"line\">mPosList.removeAt(find);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (checkMatch(rect, point))</span><br><span class=\"line\">     --mInPlace;</span><br><span class=\"line\">QByteArray data;</span><br><span class=\"line\"><span class=\"function\">QDataStream <span class=\"title\">stream</span><span class=\"params\">(&amp;data, QIODevice::WriteOnly)</span></span>;</span><br><span class=\"line\">stream &lt;&lt; image &lt;&lt; point;</span><br><span class=\"line\">QDrag* drag = <span class=\"keyword\">new</span> QDrag(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">QMimeData* mimeData = <span class=\"keyword\">new</span> QMimeData;</span><br><span class=\"line\">mimeData-&gt;setData(<span class=\"string\">\"application/x-dragitemdata\"</span>, data);</span><br><span class=\"line\">drag-&gt;setMimeData(mimeData);</span><br><span class=\"line\">drag-&gt;setPixmap(image);</span><br><span class=\"line\">drag-&gt;setHotSpot(mouseEvent-&gt;pos() - mHighlightRect.topLeft());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">0</span> == drag-&gt;exec(Qt::MoveAction))&#123;</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>在mousePress的时候开启一个Drag，定义一个自己的Mime Type-&gt;&ldquo;application/x-dragitemdata&rdquo;，将需要的数据打包进去。 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (dragEvent-&gt;mimeData()-&gt;hasFormat(<span class=\"string\">\"application/x-dragitemdata\"</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        QRect targetRect = targetBlock(dragEvent-&gt;pos());</span><br><span class=\"line\">        QByteArray data = dragEvent-&gt;mimeData()-&gt;data(<span class=\"string\">\"application/x-dragitemdata\"</span>);</span><br><span class=\"line\">        <span class=\"function\">QDataStream <span class=\"title\">stream</span><span class=\"params\">(data)</span></span>;</span><br><span class=\"line\">        QPixmap image;</span><br><span class=\"line\">        QPoint point;</span><br><span class=\"line\">        stream &gt;&gt; image &gt;&gt; point;</span><br><span class=\"line\">        mImgList.append(image);</span><br><span class=\"line\">        mPieceList.append(targetRect);</span><br><span class=\"line\">        mPosList.append(point);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkMatch(targetRect, point))</span><br><span class=\"line\">            ++mInPlace;</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>在drop消息中对数据进行解包，并判断是否放置到了合适的位置。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>QT中的Drag and Drop的详细介绍参见：<a href=\"http://doc.qt.nokia.com/4.0/dnd.html\" target=\"_blank\" rel=\"noopener\">http://doc.qt.nokia.com/4.0/dnd.html</a></p>\n<p>下面主要介绍一下Drag and Drop的Demo(<a href=\"http://u.115.com/file/f5a4c1ed9c\" target=\"_blank\" rel=\"noopener\">下载</a>)，先附上一份效果图：</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/%E6%9C%AA%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87_thumb.png\" alt=\"未命名图片\" title=\"未命名图片\"></a> </p>\n<p>&nbsp;</p>\n<p>这是一个拼图的Demo，左边是原图，右边是打散的图，拖动小方格可以实现不同的方格内的图片交换，此外程序还支持手动拖入原图片。</p>\n<p>代码中主要的类是一个<strong>DragWidget</strong>。</p>\n<p>它实现了以下几个方法。</p>\n<ul>\n<li>void dragEnterEvent(QDragEnterEvent <em>dragEvent);<br>void dragLeaveEvent(QDragLeaveEvent </em>dragEvent);<br>void dragMoveEvent(QDragMoveEvent <em>dragEvent);<br>void dropEvent(QDropEvent </em>dragEvent);<br>void mousePressEvent(QMouseEvent *mouseEvent);</li>\n</ul>\n<p>Drag执行的流程是： </p>\n<p>Drag是从drag-&gt;exec()开始的，此时将开启进入一个新的事件循环，然后在拖动的过程中会在下面三个事件中交替： </p>\n<p>&nbsp;</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/DragCircle_2.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images.cnblogs.com/cnblogs_com/chinese-zmm/WindowsLiveWriter/QT_F546/DragCircle_thumb.png\" alt=\"DragCircle\" title=\"DragCircle\"></a></p>\n<p>其中DragEnter是有拖动进入该Widget时触发的，对应的DragLeave则是拖动离开时触发的，而DragMove就是鼠标拖动的时候触发的。</p>\n<p>最后当鼠标释放的时候将触发dragEvent，此时将决定拖拽的结果。</p>\n<p>回头看一下Drag的触发，和大多数系统一样，一个Drag可能是从控件外触发的，即将外部的数据拖入，也可以是从控件内部触发，即手动生成一个QDrag对象。在示例代码中，这两种方式都会有接触。</p>\n<p>&nbsp;</p>\n<p>再聊聊拖动的机制，其实拖动就是将一处的数据移动或者复制到另外一处，在QT中拖动所承载的数据使用QMimeData表示的，它可以用来表示许多<strong>Mime Type</strong>的集合。一个Mime Type即有format和data两部分组成，format即指示了如何解析对应的data。更详细的定义可以参考：<a href=\"http://en.wikipedia.org/wiki/MIME\" target=\"_blank\" rel=\"noopener\">http://en.wikipedia.org/wiki/MIME</a>。</p>\n<p>&nbsp;</p>\n<p>最后简单地介绍一些重要的代码片段</p>\n<p>DragWidget中使用三个数组来表示对于的数据：</p>\n<blockquote>\n<p>QList&lt;QPixmap&gt; mImgList;&nbsp;&nbsp; <span style=\"color: #ff0000;\">//image per block<br></span>QList&lt;QRect&gt;&nbsp;&nbsp; mPieceList; <span style=\"color: #ff0000;\">//position per block</span><br>QList&lt;QPoint&gt;&nbsp; mPosList;&nbsp;&nbsp; <span style=\"color: #ff0000;\">//correct per image</span></p>\n</blockquote>\n<p>void mousePressEvent(QMouseEvent *mouseEvent);</p>\n<p>&nbsp;</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QPoint point = mPosList[find];</span><br><span class=\"line\">QPixmap image = mImgList[find];</span><br><span class=\"line\">QRect rect = mHighlightRect;</span><br><span class=\"line\">mPieceList.removeAt(find);<span class=\"comment\">//.remove(mHighlightRect);</span></span><br><span class=\"line\">mImgList.removeAt(find);</span><br><span class=\"line\">mPosList.removeAt(find);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (checkMatch(rect, point))</span><br><span class=\"line\">     --mInPlace;</span><br><span class=\"line\">QByteArray data;</span><br><span class=\"line\"><span class=\"function\">QDataStream <span class=\"title\">stream</span><span class=\"params\">(&amp;data, QIODevice::WriteOnly)</span></span>;</span><br><span class=\"line\">stream &lt;&lt; image &lt;&lt; point;</span><br><span class=\"line\">QDrag* drag = <span class=\"keyword\">new</span> QDrag(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">QMimeData* mimeData = <span class=\"keyword\">new</span> QMimeData;</span><br><span class=\"line\">mimeData-&gt;setData(<span class=\"string\">\"application/x-dragitemdata\"</span>, data);</span><br><span class=\"line\">drag-&gt;setMimeData(mimeData);</span><br><span class=\"line\">drag-&gt;setPixmap(image);</span><br><span class=\"line\">drag-&gt;setHotSpot(mouseEvent-&gt;pos() - mHighlightRect.topLeft());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">0</span> == drag-&gt;exec(Qt::MoveAction))&#123;</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>在mousePress的时候开启一个Drag，定义一个自己的Mime Type-&gt;&ldquo;application/x-dragitemdata&rdquo;，将需要的数据打包进去。 </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (dragEvent-&gt;mimeData()-&gt;hasFormat(<span class=\"string\">\"application/x-dragitemdata\"</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        QRect targetRect = targetBlock(dragEvent-&gt;pos());</span><br><span class=\"line\">        QByteArray data = dragEvent-&gt;mimeData()-&gt;data(<span class=\"string\">\"application/x-dragitemdata\"</span>);</span><br><span class=\"line\">        <span class=\"function\">QDataStream <span class=\"title\">stream</span><span class=\"params\">(data)</span></span>;</span><br><span class=\"line\">        QPixmap image;</span><br><span class=\"line\">        QPoint point;</span><br><span class=\"line\">        stream &gt;&gt; image &gt;&gt; point;</span><br><span class=\"line\">        mImgList.append(image);</span><br><span class=\"line\">        mPieceList.append(targetRect);</span><br><span class=\"line\">        mPosList.append(point);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkMatch(targetRect, point))</span><br><span class=\"line\">            ++mInPlace;</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>在drop消息中对数据进行解包，并判断是否放置到了合适的位置。</p>\n"},{"title":"QT项目性能调优小记","date":"2016-05-30T14:53:00.000Z","_content":"\n最近的项目用到了QT 5.5，项目在运行过程中出现了一段时间CPU占用率持续25%，并频繁断网的情况，遂决定对项目性能进行优化。\n\n优化工具也是VS2010自带的性能分析工具，具体的使用方法参见：[http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html](http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html \"http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html\")\n\n其中可以选择‘just my code’过滤出自己编写的代码。\n\n通过性能分析工具可以找到占用CPU时间较多的函数，然后按照占有时间多少进行优化>再分析>再优化的步骤，多次优化后，将CPU占用率降到了2%以下。下面将对性能优化提升较大的几个优化步骤进行记录： \n\n### 1.优化字符串格式化方法。\n\n项目中有将QByteArray中的二进制数如&rdquo;123&rdquo;格式化成&rdquo;31, 32, 33&rdquo;的功能，使用的代码如下：\n\n```cpp\nQByteArray msg = xxx\n\nQString  str;\n\nforeach (quint8 b, msg)\n\n{\n\n    str.append(QString().sprintf(“%02X”, b));\n\n}\n```\n\n当msg中包含6，7w个字符时，在lz酷睿2代i5的机器上，这段代码需要执行4到5s，因为其中的QString会调用new函数6，7w此，对性能影响极大。优化后的代码如下：\n\n```cpp\nQString  buildString(const QByteArray& ba)\n\n{\n\n\tstatic const char ascii[] = {‘0’, ‘1’, \t‘2’,‘3’,‘4’,‘5’,‘6’,‘7’,‘8’,‘9’,‘A’,‘B’,‘C’,‘D’,\t‘E’,‘F’};\n\n\tQString buf;\n\n\tbuf.resize(ba.length() * 3);\n\n\tint i = 0;\n\n\tforeach (quint8 b, ba)\n\t{\n\n    \tbuf[i] = ascii[b >> 4];\n\n    \tbuf[i + 1] =ascii[b & 0xF];\n\n    \tbuf[i + 2] = ‘, ’;\n\n    \ti += 3;\n\t}\n\n\tif (i > 0)\n\n    \ti –= 3;\n\n\tbuf[i] = ‘\\0’;\n\n\treturn buf;\n\n}\n```\n\n&nbsp;\n\n重新运行后，CPU耗时120ms左右，性能提升了几十倍。\n\n### 2.优化界面刷新\n\n在界面功能中有一处表格显示的功能，显示接收到的数据，在原始的代码中，当接收到一条数据，填充到表格上时，就调用一次表格scrollTo方法，当1s接收到2，3百条数据时，就会调用2，3此scrollTo方法，直接导致了界面频繁更新。\n\n优化的方法是，考虑到人眼的观察能力，将刷新频率即scrollTo的函数调用固定为1s一次，减少了2，3百此的界面重绘，降低了CUP负载。\n\n### 3.优化更新时戳功能\n\n项目中有一处更新时戳的功能，记录某些状态是否已经超时，原始代码中通过QDateTime记录时戳，当数据到来时会调用QDateTime：：currentDateTime更新时戳，当有大量数据到来时会频繁更新时戳，通过性能分析发现此处调用总CPU使用率的7%。考虑该时戳只需要统计时间间隔，遂优化后改用time.h中的clock函数打时戳，该函数返回至程序启动的毫秒数。再次进行性能分析显示此处调用降到CPU使用率的0.23%，性能提升明显。\n\n### 4.优化数据库操作\n\n项目中有一处数据库记录update操作，将QByteArray更新到数据库中，程序中使用了QT中的储存过程API，将QByteArray变量绑定到QSqlQuery对象上，参考代码如下：\n\n```cpp\nQSqlQuery query(db);\n\nQByteArray data;\n\nquery.prepare(“update table set data = ? where id = ?”);\n\nquery.bindValue(0, data);\n\nquery.bindValue(1, id);\n```\n\n&nbsp;\n\n其中data中包含6，7w个数据，其中发现程序在query.bindValue(data)上耗时最多，打印日志发现该data中的内容必定为可显示的ascii，遂将代码改为\n\n```cpp\nquery.bindValue(0, QString(data));\n```\n\n&nbsp;\n\n减少了QByteArray转换成QString的时间。\n\n### 5.其他\n\n其他优化还包括数据结构的调整，包括将2，3百条数据的数组改成map结构储存等。\n\n&nbsp;\n\n## 总结\n\n当然对软件的优化还是用遵循相应的原则，比如不要过早优化，在项目的初期以代码的稳定性，可读性，可扩展性为主要目标，只有当代码的性能不能满足需求时再进行适当的优化。因为往往对代码的优化会牺牲以上三个特效，所以在软件开发过程中，经常需要平衡这些特性。\n","source":"_posts/QT项目性能调优小记.md","raw":"---\ntitle: QT项目性能调优小记\ntags: []\ndate: 2016-05-30 22:53:00\n---\n\n最近的项目用到了QT 5.5，项目在运行过程中出现了一段时间CPU占用率持续25%，并频繁断网的情况，遂决定对项目性能进行优化。\n\n优化工具也是VS2010自带的性能分析工具，具体的使用方法参见：[http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html](http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html \"http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html\")\n\n其中可以选择‘just my code’过滤出自己编写的代码。\n\n通过性能分析工具可以找到占用CPU时间较多的函数，然后按照占有时间多少进行优化>再分析>再优化的步骤，多次优化后，将CPU占用率降到了2%以下。下面将对性能优化提升较大的几个优化步骤进行记录： \n\n### 1.优化字符串格式化方法。\n\n项目中有将QByteArray中的二进制数如&rdquo;123&rdquo;格式化成&rdquo;31, 32, 33&rdquo;的功能，使用的代码如下：\n\n```cpp\nQByteArray msg = xxx\n\nQString  str;\n\nforeach (quint8 b, msg)\n\n{\n\n    str.append(QString().sprintf(“%02X”, b));\n\n}\n```\n\n当msg中包含6，7w个字符时，在lz酷睿2代i5的机器上，这段代码需要执行4到5s，因为其中的QString会调用new函数6，7w此，对性能影响极大。优化后的代码如下：\n\n```cpp\nQString  buildString(const QByteArray& ba)\n\n{\n\n\tstatic const char ascii[] = {‘0’, ‘1’, \t‘2’,‘3’,‘4’,‘5’,‘6’,‘7’,‘8’,‘9’,‘A’,‘B’,‘C’,‘D’,\t‘E’,‘F’};\n\n\tQString buf;\n\n\tbuf.resize(ba.length() * 3);\n\n\tint i = 0;\n\n\tforeach (quint8 b, ba)\n\t{\n\n    \tbuf[i] = ascii[b >> 4];\n\n    \tbuf[i + 1] =ascii[b & 0xF];\n\n    \tbuf[i + 2] = ‘, ’;\n\n    \ti += 3;\n\t}\n\n\tif (i > 0)\n\n    \ti –= 3;\n\n\tbuf[i] = ‘\\0’;\n\n\treturn buf;\n\n}\n```\n\n&nbsp;\n\n重新运行后，CPU耗时120ms左右，性能提升了几十倍。\n\n### 2.优化界面刷新\n\n在界面功能中有一处表格显示的功能，显示接收到的数据，在原始的代码中，当接收到一条数据，填充到表格上时，就调用一次表格scrollTo方法，当1s接收到2，3百条数据时，就会调用2，3此scrollTo方法，直接导致了界面频繁更新。\n\n优化的方法是，考虑到人眼的观察能力，将刷新频率即scrollTo的函数调用固定为1s一次，减少了2，3百此的界面重绘，降低了CUP负载。\n\n### 3.优化更新时戳功能\n\n项目中有一处更新时戳的功能，记录某些状态是否已经超时，原始代码中通过QDateTime记录时戳，当数据到来时会调用QDateTime：：currentDateTime更新时戳，当有大量数据到来时会频繁更新时戳，通过性能分析发现此处调用总CPU使用率的7%。考虑该时戳只需要统计时间间隔，遂优化后改用time.h中的clock函数打时戳，该函数返回至程序启动的毫秒数。再次进行性能分析显示此处调用降到CPU使用率的0.23%，性能提升明显。\n\n### 4.优化数据库操作\n\n项目中有一处数据库记录update操作，将QByteArray更新到数据库中，程序中使用了QT中的储存过程API，将QByteArray变量绑定到QSqlQuery对象上，参考代码如下：\n\n```cpp\nQSqlQuery query(db);\n\nQByteArray data;\n\nquery.prepare(“update table set data = ? where id = ?”);\n\nquery.bindValue(0, data);\n\nquery.bindValue(1, id);\n```\n\n&nbsp;\n\n其中data中包含6，7w个数据，其中发现程序在query.bindValue(data)上耗时最多，打印日志发现该data中的内容必定为可显示的ascii，遂将代码改为\n\n```cpp\nquery.bindValue(0, QString(data));\n```\n\n&nbsp;\n\n减少了QByteArray转换成QString的时间。\n\n### 5.其他\n\n其他优化还包括数据结构的调整，包括将2，3百条数据的数组改成map结构储存等。\n\n&nbsp;\n\n## 总结\n\n当然对软件的优化还是用遵循相应的原则，比如不要过早优化，在项目的初期以代码的稳定性，可读性，可扩展性为主要目标，只有当代码的性能不能满足需求时再进行适当的优化。因为往往对代码的优化会牺牲以上三个特效，所以在软件开发过程中，经常需要平衡这些特性。\n","slug":"QT项目性能调优小记","published":1,"updated":"2019-02-22T13:10:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr30003t2zsd0d9yy0q","content":"<p>最近的项目用到了QT 5.5，项目在运行过程中出现了一段时间CPU占用率持续25%，并频繁断网的情况，遂决定对项目性能进行优化。</p>\n<p>优化工具也是VS2010自带的性能分析工具，具体的使用方法参见：<a href=\"http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html\" title=\"http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html</a></p>\n<p>其中可以选择‘just my code’过滤出自己编写的代码。</p>\n<p>通过性能分析工具可以找到占用CPU时间较多的函数，然后按照占有时间多少进行优化&gt;再分析&gt;再优化的步骤，多次优化后，将CPU占用率降到了2%以下。下面将对性能优化提升较大的几个优化步骤进行记录： </p>\n<h3 id=\"1-优化字符串格式化方法。\"><a href=\"#1-优化字符串格式化方法。\" class=\"headerlink\" title=\"1.优化字符串格式化方法。\"></a>1.优化字符串格式化方法。</h3><p>项目中有将QByteArray中的二进制数如&rdquo;123&rdquo;格式化成&rdquo;31, 32, 33&rdquo;的功能，使用的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QByteArray msg = xxx</span><br><span class=\"line\"></span><br><span class=\"line\">QString  str;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach (quint8 b, msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    str.append(QString().<span class=\"built_in\">sprintf</span>(“%<span class=\"number\">02</span>X”, b));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当msg中包含6，7w个字符时，在lz酷睿2代i5的机器上，这段代码需要执行4到5s，因为其中的QString会调用new函数6，7w此，对性能影响极大。优化后的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QString  <span class=\"title\">buildString</span><span class=\"params\">(<span class=\"keyword\">const</span> QByteArray&amp; ba)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> ascii[] = &#123;‘<span class=\"number\">0</span>’, ‘<span class=\"number\">1</span>’, \t‘<span class=\"number\">2</span>’,‘<span class=\"number\">3</span>’,‘<span class=\"number\">4</span>’,‘<span class=\"number\">5</span>’,‘<span class=\"number\">6</span>’,‘<span class=\"number\">7</span>’,‘<span class=\"number\">8</span>’,‘<span class=\"number\">9</span>’,‘A’,‘B’,‘C’,‘D’,\t‘E’,‘F’&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQString buf;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf.resize(ba.length() * <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tforeach (quint8 b, ba)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    \tbuf[i] = ascii[b &gt;&gt; <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    \tbuf[i + <span class=\"number\">1</span>] =ascii[b &amp; <span class=\"number\">0xF</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    \tbuf[i + <span class=\"number\">2</span>] = ‘, ’;</span><br><span class=\"line\"></span><br><span class=\"line\">    \ti += <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    \ti –= <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf[i] = ‘\\<span class=\"number\">0</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> buf;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>重新运行后，CPU耗时120ms左右，性能提升了几十倍。</p>\n<h3 id=\"2-优化界面刷新\"><a href=\"#2-优化界面刷新\" class=\"headerlink\" title=\"2.优化界面刷新\"></a>2.优化界面刷新</h3><p>在界面功能中有一处表格显示的功能，显示接收到的数据，在原始的代码中，当接收到一条数据，填充到表格上时，就调用一次表格scrollTo方法，当1s接收到2，3百条数据时，就会调用2，3此scrollTo方法，直接导致了界面频繁更新。</p>\n<p>优化的方法是，考虑到人眼的观察能力，将刷新频率即scrollTo的函数调用固定为1s一次，减少了2，3百此的界面重绘，降低了CUP负载。</p>\n<h3 id=\"3-优化更新时戳功能\"><a href=\"#3-优化更新时戳功能\" class=\"headerlink\" title=\"3.优化更新时戳功能\"></a>3.优化更新时戳功能</h3><p>项目中有一处更新时戳的功能，记录某些状态是否已经超时，原始代码中通过QDateTime记录时戳，当数据到来时会调用QDateTime：：currentDateTime更新时戳，当有大量数据到来时会频繁更新时戳，通过性能分析发现此处调用总CPU使用率的7%。考虑该时戳只需要统计时间间隔，遂优化后改用time.h中的clock函数打时戳，该函数返回至程序启动的毫秒数。再次进行性能分析显示此处调用降到CPU使用率的0.23%，性能提升明显。</p>\n<h3 id=\"4-优化数据库操作\"><a href=\"#4-优化数据库操作\" class=\"headerlink\" title=\"4.优化数据库操作\"></a>4.优化数据库操作</h3><p>项目中有一处数据库记录update操作，将QByteArray更新到数据库中，程序中使用了QT中的储存过程API，将QByteArray变量绑定到QSqlQuery对象上，参考代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QSqlQuery <span class=\"title\">query</span><span class=\"params\">(db)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QByteArray data;</span><br><span class=\"line\"></span><br><span class=\"line\">query.prepare(“update table <span class=\"built_in\">set</span> data = ? where id = ?”);</span><br><span class=\"line\"></span><br><span class=\"line\">query.bindValue(<span class=\"number\">0</span>, data);</span><br><span class=\"line\"></span><br><span class=\"line\">query.bindValue(<span class=\"number\">1</span>, id);</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>其中data中包含6，7w个数据，其中发现程序在query.bindValue(data)上耗时最多，打印日志发现该data中的内容必定为可显示的ascii，遂将代码改为</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query.bindValue(<span class=\"number\">0</span>, QString(data));</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>减少了QByteArray转换成QString的时间。</p>\n<h3 id=\"5-其他\"><a href=\"#5-其他\" class=\"headerlink\" title=\"5.其他\"></a>5.其他</h3><p>其他优化还包括数据结构的调整，包括将2，3百条数据的数组改成map结构储存等。</p>\n<p>&nbsp;</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然对软件的优化还是用遵循相应的原则，比如不要过早优化，在项目的初期以代码的稳定性，可读性，可扩展性为主要目标，只有当代码的性能不能满足需求时再进行适当的优化。因为往往对代码的优化会牺牲以上三个特效，所以在软件开发过程中，经常需要平衡这些特性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的项目用到了QT 5.5，项目在运行过程中出现了一段时间CPU占用率持续25%，并频繁断网的情况，遂决定对项目性能进行优化。</p>\n<p>优化工具也是VS2010自带的性能分析工具，具体的使用方法参见：<a href=\"http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html\" title=\"http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/smark/archive/2011/10/12/2208039.html</a></p>\n<p>其中可以选择‘just my code’过滤出自己编写的代码。</p>\n<p>通过性能分析工具可以找到占用CPU时间较多的函数，然后按照占有时间多少进行优化&gt;再分析&gt;再优化的步骤，多次优化后，将CPU占用率降到了2%以下。下面将对性能优化提升较大的几个优化步骤进行记录： </p>\n<h3 id=\"1-优化字符串格式化方法。\"><a href=\"#1-优化字符串格式化方法。\" class=\"headerlink\" title=\"1.优化字符串格式化方法。\"></a>1.优化字符串格式化方法。</h3><p>项目中有将QByteArray中的二进制数如&rdquo;123&rdquo;格式化成&rdquo;31, 32, 33&rdquo;的功能，使用的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QByteArray msg = xxx</span><br><span class=\"line\"></span><br><span class=\"line\">QString  str;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach (quint8 b, msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    str.append(QString().<span class=\"built_in\">sprintf</span>(“%<span class=\"number\">02</span>X”, b));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当msg中包含6，7w个字符时，在lz酷睿2代i5的机器上，这段代码需要执行4到5s，因为其中的QString会调用new函数6，7w此，对性能影响极大。优化后的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QString  <span class=\"title\">buildString</span><span class=\"params\">(<span class=\"keyword\">const</span> QByteArray&amp; ba)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> ascii[] = &#123;‘<span class=\"number\">0</span>’, ‘<span class=\"number\">1</span>’, \t‘<span class=\"number\">2</span>’,‘<span class=\"number\">3</span>’,‘<span class=\"number\">4</span>’,‘<span class=\"number\">5</span>’,‘<span class=\"number\">6</span>’,‘<span class=\"number\">7</span>’,‘<span class=\"number\">8</span>’,‘<span class=\"number\">9</span>’,‘A’,‘B’,‘C’,‘D’,\t‘E’,‘F’&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQString buf;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf.resize(ba.length() * <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tforeach (quint8 b, ba)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    \tbuf[i] = ascii[b &gt;&gt; <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    \tbuf[i + <span class=\"number\">1</span>] =ascii[b &amp; <span class=\"number\">0xF</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    \tbuf[i + <span class=\"number\">2</span>] = ‘, ’;</span><br><span class=\"line\"></span><br><span class=\"line\">    \ti += <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    \ti –= <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf[i] = ‘\\<span class=\"number\">0</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> buf;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>重新运行后，CPU耗时120ms左右，性能提升了几十倍。</p>\n<h3 id=\"2-优化界面刷新\"><a href=\"#2-优化界面刷新\" class=\"headerlink\" title=\"2.优化界面刷新\"></a>2.优化界面刷新</h3><p>在界面功能中有一处表格显示的功能，显示接收到的数据，在原始的代码中，当接收到一条数据，填充到表格上时，就调用一次表格scrollTo方法，当1s接收到2，3百条数据时，就会调用2，3此scrollTo方法，直接导致了界面频繁更新。</p>\n<p>优化的方法是，考虑到人眼的观察能力，将刷新频率即scrollTo的函数调用固定为1s一次，减少了2，3百此的界面重绘，降低了CUP负载。</p>\n<h3 id=\"3-优化更新时戳功能\"><a href=\"#3-优化更新时戳功能\" class=\"headerlink\" title=\"3.优化更新时戳功能\"></a>3.优化更新时戳功能</h3><p>项目中有一处更新时戳的功能，记录某些状态是否已经超时，原始代码中通过QDateTime记录时戳，当数据到来时会调用QDateTime：：currentDateTime更新时戳，当有大量数据到来时会频繁更新时戳，通过性能分析发现此处调用总CPU使用率的7%。考虑该时戳只需要统计时间间隔，遂优化后改用time.h中的clock函数打时戳，该函数返回至程序启动的毫秒数。再次进行性能分析显示此处调用降到CPU使用率的0.23%，性能提升明显。</p>\n<h3 id=\"4-优化数据库操作\"><a href=\"#4-优化数据库操作\" class=\"headerlink\" title=\"4.优化数据库操作\"></a>4.优化数据库操作</h3><p>项目中有一处数据库记录update操作，将QByteArray更新到数据库中，程序中使用了QT中的储存过程API，将QByteArray变量绑定到QSqlQuery对象上，参考代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QSqlQuery <span class=\"title\">query</span><span class=\"params\">(db)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QByteArray data;</span><br><span class=\"line\"></span><br><span class=\"line\">query.prepare(“update table <span class=\"built_in\">set</span> data = ? where id = ?”);</span><br><span class=\"line\"></span><br><span class=\"line\">query.bindValue(<span class=\"number\">0</span>, data);</span><br><span class=\"line\"></span><br><span class=\"line\">query.bindValue(<span class=\"number\">1</span>, id);</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>其中data中包含6，7w个数据，其中发现程序在query.bindValue(data)上耗时最多，打印日志发现该data中的内容必定为可显示的ascii，遂将代码改为</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query.bindValue(<span class=\"number\">0</span>, QString(data));</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>减少了QByteArray转换成QString的时间。</p>\n<h3 id=\"5-其他\"><a href=\"#5-其他\" class=\"headerlink\" title=\"5.其他\"></a>5.其他</h3><p>其他优化还包括数据结构的调整，包括将2，3百条数据的数组改成map结构储存等。</p>\n<p>&nbsp;</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然对软件的优化还是用遵循相应的原则，比如不要过早优化，在项目的初期以代码的稳定性，可读性，可扩展性为主要目标，只有当代码的性能不能满足需求时再进行适当的优化。因为往往对代码的优化会牺牲以上三个特效，所以在软件开发过程中，经常需要平衡这些特性。</p>\n"},{"title":"Windows下HG服务器的搭建","date":"2015-08-28T15:41:00.000Z","_content":"\n### 1.环境和所需工具安装\n\n1\\. 安装python-2.7.9.exe\n\n2\\. 安装mercurial-3.2.3.win32-py2.7.exe\n\n3\\. 安装mercurial-3.2.3-x86.msi\n\n4\\. 安装tortoisehg-3.3.2-x64或者tortoisehg-3.3.2-x86\n\n5\\. 安装windows iis\n\n### 2.操作步骤\n\n1\\. 搭建网站，新建文件夹D:/hgweb\n\n2\\. 在 IIS 中新建一个网站，名称是 hgweb，物理路径指向上一步的D:/hgweb\n\n3\\. 在 IIS 中选择刚才新建的网站，右侧的功能视图中选择 &ldquo;处理程序映射&rdquo;，如下图\n\n[![clip_image002](http://images0.cnblogs.com/blog/28698/201508/282339444377946.gif \"clip_image002\")](http://images0.cnblogs.com/blog/28698/201508/282339437033088.gif)\n\n[![clip_image004](http://images0.cnblogs.com/blog/28698/201508/282339451562332.gif \"clip_image004\")](http://images0.cnblogs.com/blog/28698/201508/282339447811518.gif)\n\nIIS 7.0以上的写法\n\n[![clip_image005](http://images0.cnblogs.com/blog/28698/201508/282339456877661.jpg \"clip_image005\")](http://images0.cnblogs.com/blog/28698/201508/282339454065875.jpg)\n\nIIS 6.0的写法\n\n4\\. 在D:\\hgweb下新建一个文本文件, 重命名为test.cgi (注意连同扩展名一起修改) , 编辑其内容如下:\n\nprint 'Status: 200 OK'\n\nprint 'Content-Type: text/html'\n\nprint\n\nprint '&lt;html&gt;&lt;body&gt;&lt;h1&gt;It Works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;'\n\n保存, 然后在IIS中浏览test.cgi:\n\nurl: [http://localhost/hg/test.cgi](http://localhost/hg/test.cgi)\n\n界面:\n\n[![clip_image006](http://images0.cnblogs.com/blog/28698/201508/282339465944806.jpg \"clip_image006\")](http://images0.cnblogs.com/blog/28698/201508/282339462506532.jpg)\n\n如果能看到上述界面, 说明初期配置成功,继续.\n\n如果提示HTTP 错误 404.2 - Not Found\n\n由于 Web 服务器上的&ldquo;ISAPI 和 CGI 限制&rdquo;列表设置，无法提供您请求的页面\n\n打开IIS管理器, 定位到服务器级别, 在其功能列表中找到ISAPI and CGI restrictions, 如图:\n\n[![clip_image007](http://images0.cnblogs.com/blog/28698/201508/282339472199163.jpg \"clip_image007\")](http://images0.cnblogs.com/blog/28698/201508/282339469534148.jpg)\n\n双击打开, 里面必须存在如下图所示的行:\n\n[![clip_image008](http://images0.cnblogs.com/blog/28698/201508/282339479226778.jpg \"clip_image008\")](http://images0.cnblogs.com/blog/28698/201508/282339476404992.jpg)\n\n如果不存在则按点击右侧的&rdquo;add&rdquo;, 按下图填写:\n\n[![clip_image009](http://images0.cnblogs.com/blog/28698/201508/282339485153893.jpg \"clip_image009\")](http://images0.cnblogs.com/blog/28698/201508/282339482033863.jpg)\n\n如果已存在, 但是被禁用, 将其启用即可.\n\n完成后重试打开test.cgi, 应该可以看到it works字样.\n\n5\\. 在D:\\hgweb目录下新建一个文本文件, 重命名为hgweb.cgi, 编辑其内容为以下几句话:\n\n```bash\n#!/usr/bin/env python\n\n#\n\n# An example hgweb CGI script, edit as necessary\n\n# See also http://mercurial.selenic.com/wiki/PublishingRepositories\n\n# Path to repo or hgweb config to serve (see 'hg help hgweb')\n\nconfig = \"D:/hgweb/hgweb.config\"\n\n# Uncomment and adjust if Mercurial is not installed system-wide:\n\n#import sys; sys.path.insert(0, \"/path/to/python/lib\")\n\n# Uncomment to send python tracebacks to the browser if an error occurs:\n\n#import cgitb; cgitb.enable()\n\nfrom mercurial import demandimport; demandimport.enable()\n\nfrom mercurial.hgweb import hgweb, wsgicgi\n\napplication = hgweb(config)\n\nwsgicgi.launch(application)\n```\n\n然后再在D:\\Mercurial下新建一个文本文件, 重命名为hgweb.config, 不需要写入任何内容, 即可尝试浏览[http://localhost:8080 /hgweb.cgi](http://localhost/hg/hgweb.cgi) . 应该能看到如下界面:\n\n[![clip_image010](http://images0.cnblogs.com/blog/28698/201508/282339491408250.jpg \"clip_image010\")](http://images0.cnblogs.com/blog/28698/201508/282339488904707.jpg)\n\n6\\. 修改hgweb.config\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"568\">\n\n[paths]\n\n/Repositories/ = E:/myweb/*\n\n[web]\n\nbaseurl = /hgweb.cgi\n\nallow_push = *\n\npush_ssl = false\n\n</td>\n</tr>\n</tbody>\n</table>\n\n7\\. 创建代码仓库\n\n在D:/hgweb下面创建test文件夹，在文件夹中执行创建hg create\n\n[![clip_image012](http://images0.cnblogs.com/blog/28698/201508/282339496563107.jpg \"clip_image012\")](http://images0.cnblogs.com/blog/28698/201508/282339493902793.jpg)\n\n再次访问hgweb.cgi，可以看到如下图的画面：\n\n[![clip_image014](http://images0.cnblogs.com/blog/28698/201508/282339501878436.jpg \"clip_image014\")](http://images0.cnblogs.com/blog/28698/201508/282339499066650.jpg)\n\n8\\. 同步\n\n在要同步的电脑上输入hg clone\n\n[![clip_image016](http://images0.cnblogs.com/blog/28698/201508/282339507507307.jpg \"clip_image016\")](http://images0.cnblogs.com/blog/28698/201508/282339504846993.jpg)\n\n9\\. 提交代码\n\n修改文件后，在设置中将用户名设置为提交用户名\n\n[![clip_image018](http://images0.cnblogs.com/blog/28698/201508/282339513752665.jpg \"clip_image018\")](http://images0.cnblogs.com/blog/28698/201508/282339510945580.jpg)","source":"_posts/Windows下HG服务器的搭建.md","raw":"---\ntitle: Windows下HG服务器的搭建\ntags: []\ndate: 2015-08-28 23:41:00\n---\n\n### 1.环境和所需工具安装\n\n1\\. 安装python-2.7.9.exe\n\n2\\. 安装mercurial-3.2.3.win32-py2.7.exe\n\n3\\. 安装mercurial-3.2.3-x86.msi\n\n4\\. 安装tortoisehg-3.3.2-x64或者tortoisehg-3.3.2-x86\n\n5\\. 安装windows iis\n\n### 2.操作步骤\n\n1\\. 搭建网站，新建文件夹D:/hgweb\n\n2\\. 在 IIS 中新建一个网站，名称是 hgweb，物理路径指向上一步的D:/hgweb\n\n3\\. 在 IIS 中选择刚才新建的网站，右侧的功能视图中选择 &ldquo;处理程序映射&rdquo;，如下图\n\n[![clip_image002](http://images0.cnblogs.com/blog/28698/201508/282339444377946.gif \"clip_image002\")](http://images0.cnblogs.com/blog/28698/201508/282339437033088.gif)\n\n[![clip_image004](http://images0.cnblogs.com/blog/28698/201508/282339451562332.gif \"clip_image004\")](http://images0.cnblogs.com/blog/28698/201508/282339447811518.gif)\n\nIIS 7.0以上的写法\n\n[![clip_image005](http://images0.cnblogs.com/blog/28698/201508/282339456877661.jpg \"clip_image005\")](http://images0.cnblogs.com/blog/28698/201508/282339454065875.jpg)\n\nIIS 6.0的写法\n\n4\\. 在D:\\hgweb下新建一个文本文件, 重命名为test.cgi (注意连同扩展名一起修改) , 编辑其内容如下:\n\nprint 'Status: 200 OK'\n\nprint 'Content-Type: text/html'\n\nprint\n\nprint '&lt;html&gt;&lt;body&gt;&lt;h1&gt;It Works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;'\n\n保存, 然后在IIS中浏览test.cgi:\n\nurl: [http://localhost/hg/test.cgi](http://localhost/hg/test.cgi)\n\n界面:\n\n[![clip_image006](http://images0.cnblogs.com/blog/28698/201508/282339465944806.jpg \"clip_image006\")](http://images0.cnblogs.com/blog/28698/201508/282339462506532.jpg)\n\n如果能看到上述界面, 说明初期配置成功,继续.\n\n如果提示HTTP 错误 404.2 - Not Found\n\n由于 Web 服务器上的&ldquo;ISAPI 和 CGI 限制&rdquo;列表设置，无法提供您请求的页面\n\n打开IIS管理器, 定位到服务器级别, 在其功能列表中找到ISAPI and CGI restrictions, 如图:\n\n[![clip_image007](http://images0.cnblogs.com/blog/28698/201508/282339472199163.jpg \"clip_image007\")](http://images0.cnblogs.com/blog/28698/201508/282339469534148.jpg)\n\n双击打开, 里面必须存在如下图所示的行:\n\n[![clip_image008](http://images0.cnblogs.com/blog/28698/201508/282339479226778.jpg \"clip_image008\")](http://images0.cnblogs.com/blog/28698/201508/282339476404992.jpg)\n\n如果不存在则按点击右侧的&rdquo;add&rdquo;, 按下图填写:\n\n[![clip_image009](http://images0.cnblogs.com/blog/28698/201508/282339485153893.jpg \"clip_image009\")](http://images0.cnblogs.com/blog/28698/201508/282339482033863.jpg)\n\n如果已存在, 但是被禁用, 将其启用即可.\n\n完成后重试打开test.cgi, 应该可以看到it works字样.\n\n5\\. 在D:\\hgweb目录下新建一个文本文件, 重命名为hgweb.cgi, 编辑其内容为以下几句话:\n\n```bash\n#!/usr/bin/env python\n\n#\n\n# An example hgweb CGI script, edit as necessary\n\n# See also http://mercurial.selenic.com/wiki/PublishingRepositories\n\n# Path to repo or hgweb config to serve (see 'hg help hgweb')\n\nconfig = \"D:/hgweb/hgweb.config\"\n\n# Uncomment and adjust if Mercurial is not installed system-wide:\n\n#import sys; sys.path.insert(0, \"/path/to/python/lib\")\n\n# Uncomment to send python tracebacks to the browser if an error occurs:\n\n#import cgitb; cgitb.enable()\n\nfrom mercurial import demandimport; demandimport.enable()\n\nfrom mercurial.hgweb import hgweb, wsgicgi\n\napplication = hgweb(config)\n\nwsgicgi.launch(application)\n```\n\n然后再在D:\\Mercurial下新建一个文本文件, 重命名为hgweb.config, 不需要写入任何内容, 即可尝试浏览[http://localhost:8080 /hgweb.cgi](http://localhost/hg/hgweb.cgi) . 应该能看到如下界面:\n\n[![clip_image010](http://images0.cnblogs.com/blog/28698/201508/282339491408250.jpg \"clip_image010\")](http://images0.cnblogs.com/blog/28698/201508/282339488904707.jpg)\n\n6\\. 修改hgweb.config\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"568\">\n\n[paths]\n\n/Repositories/ = E:/myweb/*\n\n[web]\n\nbaseurl = /hgweb.cgi\n\nallow_push = *\n\npush_ssl = false\n\n</td>\n</tr>\n</tbody>\n</table>\n\n7\\. 创建代码仓库\n\n在D:/hgweb下面创建test文件夹，在文件夹中执行创建hg create\n\n[![clip_image012](http://images0.cnblogs.com/blog/28698/201508/282339496563107.jpg \"clip_image012\")](http://images0.cnblogs.com/blog/28698/201508/282339493902793.jpg)\n\n再次访问hgweb.cgi，可以看到如下图的画面：\n\n[![clip_image014](http://images0.cnblogs.com/blog/28698/201508/282339501878436.jpg \"clip_image014\")](http://images0.cnblogs.com/blog/28698/201508/282339499066650.jpg)\n\n8\\. 同步\n\n在要同步的电脑上输入hg clone\n\n[![clip_image016](http://images0.cnblogs.com/blog/28698/201508/282339507507307.jpg \"clip_image016\")](http://images0.cnblogs.com/blog/28698/201508/282339504846993.jpg)\n\n9\\. 提交代码\n\n修改文件后，在设置中将用户名设置为提交用户名\n\n[![clip_image018](http://images0.cnblogs.com/blog/28698/201508/282339513752665.jpg \"clip_image018\")](http://images0.cnblogs.com/blog/28698/201508/282339510945580.jpg)","slug":"Windows下HG服务器的搭建","published":1,"updated":"2019-02-22T14:08:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr40004t2zsupi97us4","content":"<h3 id=\"1-环境和所需工具安装\"><a href=\"#1-环境和所需工具安装\" class=\"headerlink\" title=\"1.环境和所需工具安装\"></a>1.环境和所需工具安装</h3><p>1. 安装python-2.7.9.exe</p>\n<p>2. 安装mercurial-3.2.3.win32-py2.7.exe</p>\n<p>3. 安装mercurial-3.2.3-x86.msi</p>\n<p>4. 安装tortoisehg-3.3.2-x64或者tortoisehg-3.3.2-x86</p>\n<p>5. 安装windows iis</p>\n<h3 id=\"2-操作步骤\"><a href=\"#2-操作步骤\" class=\"headerlink\" title=\"2.操作步骤\"></a>2.操作步骤</h3><p>1. 搭建网站，新建文件夹D:/hgweb</p>\n<p>2. 在 IIS 中新建一个网站，名称是 hgweb，物理路径指向上一步的D:/hgweb</p>\n<p>3. 在 IIS 中选择刚才新建的网站，右侧的功能视图中选择 &ldquo;处理程序映射&rdquo;，如下图</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339437033088.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339444377946.gif\" alt=\"clip_image002\" title=\"clip_image002\"></a></p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339447811518.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339451562332.gif\" alt=\"clip_image004\" title=\"clip_image004\"></a></p>\n<p>IIS 7.0以上的写法</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339454065875.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339456877661.jpg\" alt=\"clip_image005\" title=\"clip_image005\"></a></p>\n<p>IIS 6.0的写法</p>\n<p>4. 在D:\\hgweb下新建一个文本文件, 重命名为test.cgi (注意连同扩展名一起修改) , 编辑其内容如下:</p>\n<p>print ‘Status: 200 OK’</p>\n<p>print ‘Content-Type: text/html’</p>\n<p>print</p>\n<p>print ‘&lt;html&gt;&lt;body&gt;&lt;h1&gt;It Works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;’</p>\n<p>保存, 然后在IIS中浏览test.cgi:</p>\n<p>url: <a href=\"http://localhost/hg/test.cgi\" target=\"_blank\" rel=\"noopener\">http://localhost/hg/test.cgi</a></p>\n<p>界面:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339462506532.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339465944806.jpg\" alt=\"clip_image006\" title=\"clip_image006\"></a></p>\n<p>如果能看到上述界面, 说明初期配置成功,继续.</p>\n<p>如果提示HTTP 错误 404.2 - Not Found</p>\n<p>由于 Web 服务器上的&ldquo;ISAPI 和 CGI 限制&rdquo;列表设置，无法提供您请求的页面</p>\n<p>打开IIS管理器, 定位到服务器级别, 在其功能列表中找到ISAPI and CGI restrictions, 如图:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339469534148.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339472199163.jpg\" alt=\"clip_image007\" title=\"clip_image007\"></a></p>\n<p>双击打开, 里面必须存在如下图所示的行:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339476404992.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339479226778.jpg\" alt=\"clip_image008\" title=\"clip_image008\"></a></p>\n<p>如果不存在则按点击右侧的&rdquo;add&rdquo;, 按下图填写:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339482033863.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339485153893.jpg\" alt=\"clip_image009\" title=\"clip_image009\"></a></p>\n<p>如果已存在, 但是被禁用, 将其启用即可.</p>\n<p>完成后重试打开test.cgi, 应该可以看到it works字样.</p>\n<p>5. 在D:\\hgweb目录下新建一个文本文件, 重命名为hgweb.cgi, 编辑其内容为以下几句话:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># An example hgweb CGI script, edit as necessary</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># See also http://mercurial.selenic.com/wiki/PublishingRepositories</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Path to repo or hgweb config to serve (see 'hg help hgweb')</span></span><br><span class=\"line\"></span><br><span class=\"line\">config = <span class=\"string\">\"D:/hgweb/hgweb.config\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment and adjust if Mercurial is not installed system-wide:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#import sys; sys.path.insert(0, \"/path/to/python/lib\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment to send python tracebacks to the browser if an error occurs:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#import cgitb; cgitb.enable()</span></span><br><span class=\"line\"></span><br><span class=\"line\">from mercurial import demandimport; demandimport.enable()</span><br><span class=\"line\"></span><br><span class=\"line\">from mercurial.hgweb import hgweb, wsgicgi</span><br><span class=\"line\"></span><br><span class=\"line\">application = hgweb(config)</span><br><span class=\"line\"></span><br><span class=\"line\">wsgicgi.launch(application)</span><br></pre></td></tr></table></figure>\n<p>然后再在D:\\Mercurial下新建一个文本文件, 重命名为hgweb.config, 不需要写入任何内容, 即可尝试浏览<a href=\"http://localhost/hg/hgweb.cgi\" target=\"_blank\" rel=\"noopener\">http://localhost:8080 /hgweb.cgi</a> . 应该能看到如下界面:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339488904707.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339491408250.jpg\" alt=\"clip_image010\" title=\"clip_image010\"></a></p>\n<p>6. 修改hgweb.config</p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"><br><tbody><br><tr><br><td valign=\"top\" width=\"568\"><br><br>[paths]<br><br>/Repositories/ = E:/myweb/<em><br><br>[web]<br><br>baseurl = /hgweb.cgi<br><br>allow_push = </em><br><br>push_ssl = false<br><br></td><br></tr><br></tbody><br></table>\n\n<p>7. 创建代码仓库</p>\n<p>在D:/hgweb下面创建test文件夹，在文件夹中执行创建hg create</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339493902793.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339496563107.jpg\" alt=\"clip_image012\" title=\"clip_image012\"></a></p>\n<p>再次访问hgweb.cgi，可以看到如下图的画面：</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339499066650.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339501878436.jpg\" alt=\"clip_image014\" title=\"clip_image014\"></a></p>\n<p>8. 同步</p>\n<p>在要同步的电脑上输入hg clone</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339504846993.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339507507307.jpg\" alt=\"clip_image016\" title=\"clip_image016\"></a></p>\n<p>9. 提交代码</p>\n<p>修改文件后，在设置中将用户名设置为提交用户名</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339510945580.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339513752665.jpg\" alt=\"clip_image018\" title=\"clip_image018\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-环境和所需工具安装\"><a href=\"#1-环境和所需工具安装\" class=\"headerlink\" title=\"1.环境和所需工具安装\"></a>1.环境和所需工具安装</h3><p>1. 安装python-2.7.9.exe</p>\n<p>2. 安装mercurial-3.2.3.win32-py2.7.exe</p>\n<p>3. 安装mercurial-3.2.3-x86.msi</p>\n<p>4. 安装tortoisehg-3.3.2-x64或者tortoisehg-3.3.2-x86</p>\n<p>5. 安装windows iis</p>\n<h3 id=\"2-操作步骤\"><a href=\"#2-操作步骤\" class=\"headerlink\" title=\"2.操作步骤\"></a>2.操作步骤</h3><p>1. 搭建网站，新建文件夹D:/hgweb</p>\n<p>2. 在 IIS 中新建一个网站，名称是 hgweb，物理路径指向上一步的D:/hgweb</p>\n<p>3. 在 IIS 中选择刚才新建的网站，右侧的功能视图中选择 &ldquo;处理程序映射&rdquo;，如下图</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339437033088.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339444377946.gif\" alt=\"clip_image002\" title=\"clip_image002\"></a></p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339447811518.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339451562332.gif\" alt=\"clip_image004\" title=\"clip_image004\"></a></p>\n<p>IIS 7.0以上的写法</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339454065875.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339456877661.jpg\" alt=\"clip_image005\" title=\"clip_image005\"></a></p>\n<p>IIS 6.0的写法</p>\n<p>4. 在D:\\hgweb下新建一个文本文件, 重命名为test.cgi (注意连同扩展名一起修改) , 编辑其内容如下:</p>\n<p>print ‘Status: 200 OK’</p>\n<p>print ‘Content-Type: text/html’</p>\n<p>print</p>\n<p>print ‘&lt;html&gt;&lt;body&gt;&lt;h1&gt;It Works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;’</p>\n<p>保存, 然后在IIS中浏览test.cgi:</p>\n<p>url: <a href=\"http://localhost/hg/test.cgi\" target=\"_blank\" rel=\"noopener\">http://localhost/hg/test.cgi</a></p>\n<p>界面:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339462506532.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339465944806.jpg\" alt=\"clip_image006\" title=\"clip_image006\"></a></p>\n<p>如果能看到上述界面, 说明初期配置成功,继续.</p>\n<p>如果提示HTTP 错误 404.2 - Not Found</p>\n<p>由于 Web 服务器上的&ldquo;ISAPI 和 CGI 限制&rdquo;列表设置，无法提供您请求的页面</p>\n<p>打开IIS管理器, 定位到服务器级别, 在其功能列表中找到ISAPI and CGI restrictions, 如图:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339469534148.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339472199163.jpg\" alt=\"clip_image007\" title=\"clip_image007\"></a></p>\n<p>双击打开, 里面必须存在如下图所示的行:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339476404992.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339479226778.jpg\" alt=\"clip_image008\" title=\"clip_image008\"></a></p>\n<p>如果不存在则按点击右侧的&rdquo;add&rdquo;, 按下图填写:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339482033863.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339485153893.jpg\" alt=\"clip_image009\" title=\"clip_image009\"></a></p>\n<p>如果已存在, 但是被禁用, 将其启用即可.</p>\n<p>完成后重试打开test.cgi, 应该可以看到it works字样.</p>\n<p>5. 在D:\\hgweb目录下新建一个文本文件, 重命名为hgweb.cgi, 编辑其内容为以下几句话:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># An example hgweb CGI script, edit as necessary</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># See also http://mercurial.selenic.com/wiki/PublishingRepositories</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Path to repo or hgweb config to serve (see 'hg help hgweb')</span></span><br><span class=\"line\"></span><br><span class=\"line\">config = <span class=\"string\">\"D:/hgweb/hgweb.config\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment and adjust if Mercurial is not installed system-wide:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#import sys; sys.path.insert(0, \"/path/to/python/lib\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Uncomment to send python tracebacks to the browser if an error occurs:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#import cgitb; cgitb.enable()</span></span><br><span class=\"line\"></span><br><span class=\"line\">from mercurial import demandimport; demandimport.enable()</span><br><span class=\"line\"></span><br><span class=\"line\">from mercurial.hgweb import hgweb, wsgicgi</span><br><span class=\"line\"></span><br><span class=\"line\">application = hgweb(config)</span><br><span class=\"line\"></span><br><span class=\"line\">wsgicgi.launch(application)</span><br></pre></td></tr></table></figure>\n<p>然后再在D:\\Mercurial下新建一个文本文件, 重命名为hgweb.config, 不需要写入任何内容, 即可尝试浏览<a href=\"http://localhost/hg/hgweb.cgi\" target=\"_blank\" rel=\"noopener\">http://localhost:8080 /hgweb.cgi</a> . 应该能看到如下界面:</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339488904707.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339491408250.jpg\" alt=\"clip_image010\" title=\"clip_image010\"></a></p>\n<p>6. 修改hgweb.config</p>\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"><br><tbody><br><tr><br><td valign=\"top\" width=\"568\"><br><br>[paths]<br><br>/Repositories/ = E:/myweb/<em><br><br>[web]<br><br>baseurl = /hgweb.cgi<br><br>allow_push = </em><br><br>push_ssl = false<br><br></td><br></tr><br></tbody><br></table>\n\n<p>7. 创建代码仓库</p>\n<p>在D:/hgweb下面创建test文件夹，在文件夹中执行创建hg create</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339493902793.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339496563107.jpg\" alt=\"clip_image012\" title=\"clip_image012\"></a></p>\n<p>再次访问hgweb.cgi，可以看到如下图的画面：</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339499066650.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339501878436.jpg\" alt=\"clip_image014\" title=\"clip_image014\"></a></p>\n<p>8. 同步</p>\n<p>在要同步的电脑上输入hg clone</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339504846993.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339507507307.jpg\" alt=\"clip_image016\" title=\"clip_image016\"></a></p>\n<p>9. 提交代码</p>\n<p>修改文件后，在设置中将用户名设置为提交用户名</p>\n<p><a href=\"http://images0.cnblogs.com/blog/28698/201508/282339510945580.jpg\" target=\"_blank\" rel=\"noopener\"><img src=\"http://images0.cnblogs.com/blog/28698/201508/282339513752665.jpg\" alt=\"clip_image018\" title=\"clip_image018\"></a></p>\n"},{"title":"从QDataStream向QByteArray中写入数据时的注意点（QT）","date":"2010-05-29T02:19:00.000Z","_content":"\n最近发现从QDataStream向QByteArray中写入数据常常是写不进去的，通过查看QT的源码:\n\n```cpp\nQDataStream &operator>>(QDataStream &in, QByteArray &ba)\n{\n    ba.clear();\n    quint32 len;\n    in >> len;\n    if (len == 0xffffffff)\n        return in;\n\n    const quint32 Step = 1024 * 1024;\n    quint32 allocated = 0;\n\n    do {\n        int blockSize = qMin(Step, len - allocated);\n        ba.resize(allocated + blockSize);\n        if (in.readRawData(ba.data() + allocated, blockSize) != blockSize) {\n            ba.clear();\n            in.setStatus(QDataStream::ReadPastEnd);\n            return in;\n        }\n        allocated += blockSize;\n    } while (allocated < len);\n\n    return in;\n}\n```\n\n发现原来其中有一句：\n\n```cpp\nif (in.readRawData(ba.data() + allocated, blockSize) != blockSize) {\n```\n\n它检查读入的数据是不是整数个blockSize，如果不是，那么下面它会将QByteArray清空：\n\n```cpp\nba.clear();\n```\n\n所以如果想从QDataStream读入数据岛QByteArray中，可以采用下面的方法：\n\n```cpp\nQDataStream &operator>>(QDataStream &in, QByteArray &ba)\n{\n    ba.clear();\n    quint32 len;\n    in >> len;\n    if (len == 0xffffffff)\n        return in;\n\n    const quint32 Step = 1024 * 1024;\n    quint32 allocated = 0;\n\n    do {\n        int blockSize = qMin(Step, len - allocated);\n        ba.resize(allocated + blockSize);\n        if (in.readRawData(ba.data() + allocated, blockSize) < blockSize) {\n            return in;\n        }\n        allocated += blockSize;\n    } while (allocated < len);\n\n    return in;\n}\n```\n\n最后回过头来看一下将QByteArray写入QDataStream的方法\n\n```cpp\nQDataStream &operator<<(QDataStream &out, const QByteArray &ba)\n{\n    if (ba.isNull() && out.version() >= 6) {\n        out << (quint32)0xffffffff;\n        return out;\n    }\n    return out.writeBytes(ba, ba.size());\n}\n```\n\n其实是将QByteArray中所有的数据都写入QDatStream中，并没有扩展QByteArray的大小到blockSize，\n\n所以针对这种情况，我们在使用QDataStream向QByteArray中读写数据的时候，需要手动将QByteArray\n\n扩展到blockSize(1024*1024)大小。","source":"_posts/从QDataStream向QByteArray中写入数据时的注意点（QT）.md","raw":"---\ntitle: 从QDataStream向QByteArray中写入数据时的注意点（QT）\ntags: []\ndate: 2010-05-29 10:19:00\n---\n\n最近发现从QDataStream向QByteArray中写入数据常常是写不进去的，通过查看QT的源码:\n\n```cpp\nQDataStream &operator>>(QDataStream &in, QByteArray &ba)\n{\n    ba.clear();\n    quint32 len;\n    in >> len;\n    if (len == 0xffffffff)\n        return in;\n\n    const quint32 Step = 1024 * 1024;\n    quint32 allocated = 0;\n\n    do {\n        int blockSize = qMin(Step, len - allocated);\n        ba.resize(allocated + blockSize);\n        if (in.readRawData(ba.data() + allocated, blockSize) != blockSize) {\n            ba.clear();\n            in.setStatus(QDataStream::ReadPastEnd);\n            return in;\n        }\n        allocated += blockSize;\n    } while (allocated < len);\n\n    return in;\n}\n```\n\n发现原来其中有一句：\n\n```cpp\nif (in.readRawData(ba.data() + allocated, blockSize) != blockSize) {\n```\n\n它检查读入的数据是不是整数个blockSize，如果不是，那么下面它会将QByteArray清空：\n\n```cpp\nba.clear();\n```\n\n所以如果想从QDataStream读入数据岛QByteArray中，可以采用下面的方法：\n\n```cpp\nQDataStream &operator>>(QDataStream &in, QByteArray &ba)\n{\n    ba.clear();\n    quint32 len;\n    in >> len;\n    if (len == 0xffffffff)\n        return in;\n\n    const quint32 Step = 1024 * 1024;\n    quint32 allocated = 0;\n\n    do {\n        int blockSize = qMin(Step, len - allocated);\n        ba.resize(allocated + blockSize);\n        if (in.readRawData(ba.data() + allocated, blockSize) < blockSize) {\n            return in;\n        }\n        allocated += blockSize;\n    } while (allocated < len);\n\n    return in;\n}\n```\n\n最后回过头来看一下将QByteArray写入QDataStream的方法\n\n```cpp\nQDataStream &operator<<(QDataStream &out, const QByteArray &ba)\n{\n    if (ba.isNull() && out.version() >= 6) {\n        out << (quint32)0xffffffff;\n        return out;\n    }\n    return out.writeBytes(ba, ba.size());\n}\n```\n\n其实是将QByteArray中所有的数据都写入QDatStream中，并没有扩展QByteArray的大小到blockSize，\n\n所以针对这种情况，我们在使用QDataStream向QByteArray中读写数据的时候，需要手动将QByteArray\n\n扩展到blockSize(1024*1024)大小。","slug":"从QDataStream向QByteArray中写入数据时的注意点（QT）","published":1,"updated":"2019-02-22T13:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr50005t2zssrdh2pup","content":"<p>最近发现从QDataStream向QByteArray中写入数据常常是写不进去的，通过查看QT的源码:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QDataStream &amp;<span class=\"keyword\">operator</span>&gt;&gt;(QDataStream &amp;in, QByteArray &amp;ba)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ba.clear();</span><br><span class=\"line\">    quint32 len;</span><br><span class=\"line\">    in &gt;&gt; len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0xffffffff</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> quint32 Step = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">    quint32 allocated = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> blockSize = qMin(Step, len - allocated);</span><br><span class=\"line\">        ba.resize(allocated + blockSize);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in.readRawData(ba.data() + allocated, blockSize) != blockSize) &#123;</span><br><span class=\"line\">            ba.clear();</span><br><span class=\"line\">            in.setStatus(QDataStream::ReadPastEnd);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        allocated += blockSize;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (allocated &lt; len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现原来其中有一句：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (in.readRawData(ba.data() + allocated, blockSize) != blockSize) &#123;</span><br></pre></td></tr></table></figure>\n<p>它检查读入的数据是不是整数个blockSize，如果不是，那么下面它会将QByteArray清空：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ba.clear();</span><br></pre></td></tr></table></figure>\n<p>所以如果想从QDataStream读入数据岛QByteArray中，可以采用下面的方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QDataStream &amp;<span class=\"keyword\">operator</span>&gt;&gt;(QDataStream &amp;in, QByteArray &amp;ba)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ba.clear();</span><br><span class=\"line\">    quint32 len;</span><br><span class=\"line\">    in &gt;&gt; len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0xffffffff</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> quint32 Step = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">    quint32 allocated = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> blockSize = qMin(Step, len - allocated);</span><br><span class=\"line\">        ba.resize(allocated + blockSize);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in.readRawData(ba.data() + allocated, blockSize) &lt; blockSize) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        allocated += blockSize;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (allocated &lt; len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后回过头来看一下将QByteArray写入QDataStream的方法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QDataStream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(QDataStream &amp;out, <span class=\"keyword\">const</span> QByteArray &amp;ba)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ba.isNull() &amp;&amp; out.version() &gt;= <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">        out &lt;&lt; (quint32)<span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out.writeBytes(ba, ba.size());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实是将QByteArray中所有的数据都写入QDatStream中，并没有扩展QByteArray的大小到blockSize，</p>\n<p>所以针对这种情况，我们在使用QDataStream向QByteArray中读写数据的时候，需要手动将QByteArray</p>\n<p>扩展到blockSize(1024*1024)大小。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近发现从QDataStream向QByteArray中写入数据常常是写不进去的，通过查看QT的源码:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QDataStream &amp;<span class=\"keyword\">operator</span>&gt;&gt;(QDataStream &amp;in, QByteArray &amp;ba)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ba.clear();</span><br><span class=\"line\">    quint32 len;</span><br><span class=\"line\">    in &gt;&gt; len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0xffffffff</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> quint32 Step = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">    quint32 allocated = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> blockSize = qMin(Step, len - allocated);</span><br><span class=\"line\">        ba.resize(allocated + blockSize);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in.readRawData(ba.data() + allocated, blockSize) != blockSize) &#123;</span><br><span class=\"line\">            ba.clear();</span><br><span class=\"line\">            in.setStatus(QDataStream::ReadPastEnd);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        allocated += blockSize;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (allocated &lt; len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现原来其中有一句：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (in.readRawData(ba.data() + allocated, blockSize) != blockSize) &#123;</span><br></pre></td></tr></table></figure>\n<p>它检查读入的数据是不是整数个blockSize，如果不是，那么下面它会将QByteArray清空：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ba.clear();</span><br></pre></td></tr></table></figure>\n<p>所以如果想从QDataStream读入数据岛QByteArray中，可以采用下面的方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QDataStream &amp;<span class=\"keyword\">operator</span>&gt;&gt;(QDataStream &amp;in, QByteArray &amp;ba)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ba.clear();</span><br><span class=\"line\">    quint32 len;</span><br><span class=\"line\">    in &gt;&gt; len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0xffffffff</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> quint32 Step = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">    quint32 allocated = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> blockSize = qMin(Step, len - allocated);</span><br><span class=\"line\">        ba.resize(allocated + blockSize);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in.readRawData(ba.data() + allocated, blockSize) &lt; blockSize) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        allocated += blockSize;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (allocated &lt; len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后回过头来看一下将QByteArray写入QDataStream的方法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QDataStream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(QDataStream &amp;out, <span class=\"keyword\">const</span> QByteArray &amp;ba)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ba.isNull() &amp;&amp; out.version() &gt;= <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">        out &lt;&lt; (quint32)<span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out.writeBytes(ba, ba.size());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实是将QByteArray中所有的数据都写入QDatStream中，并没有扩展QByteArray的大小到blockSize，</p>\n<p>所以针对这种情况，我们在使用QDataStream向QByteArray中读写数据的时候，需要手动将QByteArray</p>\n<p>扩展到blockSize(1024*1024)大小。</p>\n"},{"title":"浏览器扩展系列————在WPF中定制WebBrowser快捷菜单","date":"2009-02-23T04:44:00.000Z","_content":"\n关于如何定制菜单可以参考codeproject上的这篇文章：[http://www.codeproject.com/KB/books/0764549146_8.aspx?fid=13574&df=90&mpp=25&noise=3&sort=Position&view=Quick&fr=26#xx0xx](http://www.codeproject.com/KB/books/0764549146_8.aspx?fid=13574&df=90&mpp=25&noise=3&sort=Position&view=Quick&fr=26#xx0xx)\n\n本文主要讲述如何在这篇文章中的ShowContextMenu方法中弹出自己的ContextMenu。\n\n先来看看在WinForm中是如何实现的：\n\n```csharp\npublic void ShowContextMenu(\n\n            MsHtmlCustomization.ContextMenuTarget dwContext,\n\n            ref MsHtmlCustomization.POINT pPoint,\n\n            MsHtmlCustomization.IOleCommandTarget pCommandTarget,\n\n            object HTMLTagElement)\n\n{\n\n  Point p = new Point(pPoint.x, pPoint.y);\n\n  p = PointToClient(p);\n\n  myCustomContextMenu.Show(this, p);  //myCustomContextMenu是一个System.Windows.Forms.ContextMenu对象。\n\n  const int Ok = 0;\n\n  throw new COMException(\"\", Ok); // return HRESULT = S_OK, so MsHtml\n\n \n\n// doesn’t display its own menu\n``` \n```  \n\n先来看看网上一般的实现方法：\n\nmyHostBrowser.ContextMenu.PlacementTarget = this;//this即自己的Windows对象，它实现了IDocHostUIHandler接口。\n\nmyHostBrowser.ContextMenu.IsOpen = true;\n\n通过此方法可以实现自己控制弹出菜单，比如在某个控件上左击弹出快捷菜单的功能。但是针对这里的WebBrowser控件来说情况就有些不同了，应为WebBrowser是对系统的Internet explorer对象进行了封装，使其处理所有的事件，所以介于WinForm和WPF对ContextMenu对象实现的不同，比如WinForm实现ContextMenu对象的Show方法时，它把菜单的显示委托给了底层的Usr32函数：\n\n```csharp\n[DllImport(\"user32.dll\", CharSet=CharSet.Auto, ExactSpelling=true)]\n\npublic static extern bool TrackPopupMenuEx(HandleRef hmenu, int fuFlags, int x, int y, HandleRef hwnd, NativeMethods.TPMPARAMS tpm);\n```\n\n而WPF实现的ContextMenu则采用了新的方法，所以在网上可以看到不少讲解利用ContextMenu实现嵌入许多控件的方法，以丰富其功能的文章。\n\n所以造成的结果就是在ShowContextMenu中弹出WPF的ContextMenu时，第一次可以弹出正确的菜单，但第二次在WebBrowser中右击时菜单会消失，但ShowContextMenu将不会被触发。而在第三次右击时菜单才会弹出。\n\n那我想到的就是将WinForm中的ContextMenu嵌入到WPF中使用，这是只要解决一个问题即可，就是在Show是传入一个Control对象即可，\n\n参考MSDN文章：How to: Enable Visual Styles in a Hybrid Application\n\n```csharp\nSystem.Windows.Forms.TextBox tc;\n\n        private void Window_Loaded(object sender, RoutedEventArgs e)\n\n        {\n\n            System.Windows.Forms.Application.EnableVisualStyles();\n\n \n\n            // Create a WindowsFormsHost element to host\n\n            // the Windows Forms control.\n\n            System.Windows.Forms.Integration.WindowsFormsHost host =\n\n                new System.Windows.Forms.Integration.WindowsFormsHost();\n\n \n\n            // Create a Windows Forms tab control.\n\n            tc = new System.Windows.Forms.TextBox();//此TextBox只是为了显示ContextMenu而构造的一个任意对象。\n\n            // Assign the Windows Forms tab control as the hosted control.\n\n            host.Child = tc;\n\n \n\n            // Assign the host element to the parent Grid element.\n\n            this.grid2.Children.Add(host);\n```\n\n而在**ShowContextMenu**中则写上：\n\n```csharp\nSystem.Windows.Forms.ContextMenu menu = new System.Windows.Forms.ContextMenu();\n\nmenu.MenuItems.Add(new System.Windows.Forms.MenuItem(\"Test\"));\n\nSystem.Drawing.Point p = new System.Drawing.Point(ppt.x, ppt.y);\n\np = tc.PointToClient(p);\n\nmenu.Show(tc, p);\n```\n\n即可显示自己的定制的ContextMenu。","source":"_posts/浏览器扩展系列————在WPF中定制WebBrowser快捷菜单.md","raw":"---\ntitle: 浏览器扩展系列————在WPF中定制WebBrowser快捷菜单\ntags: []\ndate: 2009-02-23 12:44:00\n---\n\n关于如何定制菜单可以参考codeproject上的这篇文章：[http://www.codeproject.com/KB/books/0764549146_8.aspx?fid=13574&df=90&mpp=25&noise=3&sort=Position&view=Quick&fr=26#xx0xx](http://www.codeproject.com/KB/books/0764549146_8.aspx?fid=13574&df=90&mpp=25&noise=3&sort=Position&view=Quick&fr=26#xx0xx)\n\n本文主要讲述如何在这篇文章中的ShowContextMenu方法中弹出自己的ContextMenu。\n\n先来看看在WinForm中是如何实现的：\n\n```csharp\npublic void ShowContextMenu(\n\n            MsHtmlCustomization.ContextMenuTarget dwContext,\n\n            ref MsHtmlCustomization.POINT pPoint,\n\n            MsHtmlCustomization.IOleCommandTarget pCommandTarget,\n\n            object HTMLTagElement)\n\n{\n\n  Point p = new Point(pPoint.x, pPoint.y);\n\n  p = PointToClient(p);\n\n  myCustomContextMenu.Show(this, p);  //myCustomContextMenu是一个System.Windows.Forms.ContextMenu对象。\n\n  const int Ok = 0;\n\n  throw new COMException(\"\", Ok); // return HRESULT = S_OK, so MsHtml\n\n \n\n// doesn’t display its own menu\n``` \n```  \n\n先来看看网上一般的实现方法：\n\nmyHostBrowser.ContextMenu.PlacementTarget = this;//this即自己的Windows对象，它实现了IDocHostUIHandler接口。\n\nmyHostBrowser.ContextMenu.IsOpen = true;\n\n通过此方法可以实现自己控制弹出菜单，比如在某个控件上左击弹出快捷菜单的功能。但是针对这里的WebBrowser控件来说情况就有些不同了，应为WebBrowser是对系统的Internet explorer对象进行了封装，使其处理所有的事件，所以介于WinForm和WPF对ContextMenu对象实现的不同，比如WinForm实现ContextMenu对象的Show方法时，它把菜单的显示委托给了底层的Usr32函数：\n\n```csharp\n[DllImport(\"user32.dll\", CharSet=CharSet.Auto, ExactSpelling=true)]\n\npublic static extern bool TrackPopupMenuEx(HandleRef hmenu, int fuFlags, int x, int y, HandleRef hwnd, NativeMethods.TPMPARAMS tpm);\n```\n\n而WPF实现的ContextMenu则采用了新的方法，所以在网上可以看到不少讲解利用ContextMenu实现嵌入许多控件的方法，以丰富其功能的文章。\n\n所以造成的结果就是在ShowContextMenu中弹出WPF的ContextMenu时，第一次可以弹出正确的菜单，但第二次在WebBrowser中右击时菜单会消失，但ShowContextMenu将不会被触发。而在第三次右击时菜单才会弹出。\n\n那我想到的就是将WinForm中的ContextMenu嵌入到WPF中使用，这是只要解决一个问题即可，就是在Show是传入一个Control对象即可，\n\n参考MSDN文章：How to: Enable Visual Styles in a Hybrid Application\n\n```csharp\nSystem.Windows.Forms.TextBox tc;\n\n        private void Window_Loaded(object sender, RoutedEventArgs e)\n\n        {\n\n            System.Windows.Forms.Application.EnableVisualStyles();\n\n \n\n            // Create a WindowsFormsHost element to host\n\n            // the Windows Forms control.\n\n            System.Windows.Forms.Integration.WindowsFormsHost host =\n\n                new System.Windows.Forms.Integration.WindowsFormsHost();\n\n \n\n            // Create a Windows Forms tab control.\n\n            tc = new System.Windows.Forms.TextBox();//此TextBox只是为了显示ContextMenu而构造的一个任意对象。\n\n            // Assign the Windows Forms tab control as the hosted control.\n\n            host.Child = tc;\n\n \n\n            // Assign the host element to the parent Grid element.\n\n            this.grid2.Children.Add(host);\n```\n\n而在**ShowContextMenu**中则写上：\n\n```csharp\nSystem.Windows.Forms.ContextMenu menu = new System.Windows.Forms.ContextMenu();\n\nmenu.MenuItems.Add(new System.Windows.Forms.MenuItem(\"Test\"));\n\nSystem.Drawing.Point p = new System.Drawing.Point(ppt.x, ppt.y);\n\np = tc.PointToClient(p);\n\nmenu.Show(tc, p);\n```\n\n即可显示自己的定制的ContextMenu。","slug":"浏览器扩展系列————在WPF中定制WebBrowser快捷菜单","published":1,"updated":"2019-02-25T14:51:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr50006t2zsjk2r57ig","content":"<p>关于如何定制菜单可以参考codeproject上的这篇文章：<a href=\"http://www.codeproject.com/KB/books/0764549146_8.aspx?fid=13574&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26#xx0xx\" target=\"_blank\" rel=\"noopener\">http://www.codeproject.com/KB/books/0764549146_8.aspx?fid=13574&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26#xx0xx</a></p>\n<p>本文主要讲述如何在这篇文章中的ShowContextMenu方法中弹出自己的ContextMenu。</p>\n<p>先来看看在WinForm中是如何实现的：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowContextMenu</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            MsHtmlCustomization.ContextMenuTarget dwContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">ref</span> MsHtmlCustomization.POINT pPoint,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            MsHtmlCustomization.IOleCommandTarget pCommandTarget,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">object</span> HTMLTagElement</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  Point p = <span class=\"keyword\">new</span> Point(pPoint.x, pPoint.y);</span><br><span class=\"line\"></span><br><span class=\"line\">  p = PointToClient(p);</span><br><span class=\"line\"></span><br><span class=\"line\">  myCustomContextMenu.Show(<span class=\"keyword\">this</span>, p);  <span class=\"comment\">//myCustomContextMenu是一个System.Windows.Forms.ContextMenu对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Ok = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> COMException(<span class=\"string\">\"\"</span>, Ok); <span class=\"comment\">// return HRESULT = S_OK, so MsHtml</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// doesn’t display its own menu</span></span><br><span class=\"line\">``` </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">先来看看网上一般的实现方法：</span><br><span class=\"line\"></span><br><span class=\"line\">myHostBrowser.ContextMenu.PlacementTarget = <span class=\"keyword\">this</span>;<span class=\"comment\">//this即自己的Windows对象，它实现了IDocHostUIHandler接口。</span></span><br><span class=\"line\"></span><br><span class=\"line\">myHostBrowser.ContextMenu.IsOpen = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">通过此方法可以实现自己控制弹出菜单，比如在某个控件上左击弹出快捷菜单的功能。但是针对这里的WebBrowser控件来说情况就有些不同了，应为WebBrowser是对系统的Internet explorer对象进行了封装，使其处理所有的事件，所以介于WinForm和WPF对ContextMenu对象实现的不同，比如WinForm实现ContextMenu对象的Show方法时，它把菜单的显示委托给了底层的Usr32函数：</span><br><span class=\"line\"></span><br><span class=\"line\">```csharp</span><br><span class=\"line\">[<span class=\"meta\">DllImport(<span class=\"meta-string\">\"user32.dll\"</span>, CharSet=CharSet.Auto, ExactSpelling=true)</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">bool</span> <span class=\"title\">TrackPopupMenuEx</span>(<span class=\"params\">HandleRef hmenu, <span class=\"keyword\">int</span> fuFlags, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, HandleRef hwnd, NativeMethods.TPMPARAMS tpm</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>而WPF实现的ContextMenu则采用了新的方法，所以在网上可以看到不少讲解利用ContextMenu实现嵌入许多控件的方法，以丰富其功能的文章。</p>\n<p>所以造成的结果就是在ShowContextMenu中弹出WPF的ContextMenu时，第一次可以弹出正确的菜单，但第二次在WebBrowser中右击时菜单会消失，但ShowContextMenu将不会被触发。而在第三次右击时菜单才会弹出。</p>\n<p>那我想到的就是将WinForm中的ContextMenu嵌入到WPF中使用，这是只要解决一个问题即可，就是在Show是传入一个Control对象即可，</p>\n<p>参考MSDN文章：How to: Enable Visual Styles in a Hybrid Application</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Windows.Forms.TextBox tc;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Window_Loaded</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.Windows.Forms.Application.EnableVisualStyles();</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create a WindowsFormsHost element to host</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// the Windows Forms control.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.Windows.Forms.Integration.WindowsFormsHost host =</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">new</span> System.Windows.Forms.Integration.WindowsFormsHost();</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create a Windows Forms tab control.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            tc = <span class=\"keyword\">new</span> System.Windows.Forms.TextBox();<span class=\"comment\">//此TextBox只是为了显示ContextMenu而构造的一个任意对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Assign the Windows Forms tab control as the hosted control.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            host.Child = tc;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Assign the host element to the parent Grid element.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.grid2.Children.Add(host);</span><br></pre></td></tr></table></figure>\n<p>而在<strong>ShowContextMenu</strong>中则写上：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Windows.Forms.ContextMenu menu = <span class=\"keyword\">new</span> System.Windows.Forms.ContextMenu();</span><br><span class=\"line\"></span><br><span class=\"line\">menu.MenuItems.Add(<span class=\"keyword\">new</span> System.Windows.Forms.MenuItem(<span class=\"string\">\"Test\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.Drawing.Point p = <span class=\"keyword\">new</span> System.Drawing.Point(ppt.x, ppt.y);</span><br><span class=\"line\"></span><br><span class=\"line\">p = tc.PointToClient(p);</span><br><span class=\"line\"></span><br><span class=\"line\">menu.Show(tc, p);</span><br></pre></td></tr></table></figure>\n<p>即可显示自己的定制的ContextMenu。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于如何定制菜单可以参考codeproject上的这篇文章：<a href=\"http://www.codeproject.com/KB/books/0764549146_8.aspx?fid=13574&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26#xx0xx\" target=\"_blank\" rel=\"noopener\">http://www.codeproject.com/KB/books/0764549146_8.aspx?fid=13574&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26#xx0xx</a></p>\n<p>本文主要讲述如何在这篇文章中的ShowContextMenu方法中弹出自己的ContextMenu。</p>\n<p>先来看看在WinForm中是如何实现的：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowContextMenu</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            MsHtmlCustomization.ContextMenuTarget dwContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">ref</span> MsHtmlCustomization.POINT pPoint,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            MsHtmlCustomization.IOleCommandTarget pCommandTarget,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">object</span> HTMLTagElement</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  Point p = <span class=\"keyword\">new</span> Point(pPoint.x, pPoint.y);</span><br><span class=\"line\"></span><br><span class=\"line\">  p = PointToClient(p);</span><br><span class=\"line\"></span><br><span class=\"line\">  myCustomContextMenu.Show(<span class=\"keyword\">this</span>, p);  <span class=\"comment\">//myCustomContextMenu是一个System.Windows.Forms.ContextMenu对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Ok = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> COMException(<span class=\"string\">\"\"</span>, Ok); <span class=\"comment\">// return HRESULT = S_OK, so MsHtml</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// doesn’t display its own menu</span></span><br><span class=\"line\">``` </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">先来看看网上一般的实现方法：</span><br><span class=\"line\"></span><br><span class=\"line\">myHostBrowser.ContextMenu.PlacementTarget = <span class=\"keyword\">this</span>;<span class=\"comment\">//this即自己的Windows对象，它实现了IDocHostUIHandler接口。</span></span><br><span class=\"line\"></span><br><span class=\"line\">myHostBrowser.ContextMenu.IsOpen = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">通过此方法可以实现自己控制弹出菜单，比如在某个控件上左击弹出快捷菜单的功能。但是针对这里的WebBrowser控件来说情况就有些不同了，应为WebBrowser是对系统的Internet explorer对象进行了封装，使其处理所有的事件，所以介于WinForm和WPF对ContextMenu对象实现的不同，比如WinForm实现ContextMenu对象的Show方法时，它把菜单的显示委托给了底层的Usr32函数：</span><br><span class=\"line\"></span><br><span class=\"line\">```csharp</span><br><span class=\"line\">[<span class=\"meta\">DllImport(<span class=\"meta-string\">\"user32.dll\"</span>, CharSet=CharSet.Auto, ExactSpelling=true)</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">extern</span> <span class=\"keyword\">bool</span> <span class=\"title\">TrackPopupMenuEx</span>(<span class=\"params\">HandleRef hmenu, <span class=\"keyword\">int</span> fuFlags, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, HandleRef hwnd, NativeMethods.TPMPARAMS tpm</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>而WPF实现的ContextMenu则采用了新的方法，所以在网上可以看到不少讲解利用ContextMenu实现嵌入许多控件的方法，以丰富其功能的文章。</p>\n<p>所以造成的结果就是在ShowContextMenu中弹出WPF的ContextMenu时，第一次可以弹出正确的菜单，但第二次在WebBrowser中右击时菜单会消失，但ShowContextMenu将不会被触发。而在第三次右击时菜单才会弹出。</p>\n<p>那我想到的就是将WinForm中的ContextMenu嵌入到WPF中使用，这是只要解决一个问题即可，就是在Show是传入一个Control对象即可，</p>\n<p>参考MSDN文章：How to: Enable Visual Styles in a Hybrid Application</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Windows.Forms.TextBox tc;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Window_Loaded</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.Windows.Forms.Application.EnableVisualStyles();</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create a WindowsFormsHost element to host</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// the Windows Forms control.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.Windows.Forms.Integration.WindowsFormsHost host =</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">new</span> System.Windows.Forms.Integration.WindowsFormsHost();</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create a Windows Forms tab control.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            tc = <span class=\"keyword\">new</span> System.Windows.Forms.TextBox();<span class=\"comment\">//此TextBox只是为了显示ContextMenu而构造的一个任意对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Assign the Windows Forms tab control as the hosted control.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            host.Child = tc;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Assign the host element to the parent Grid element.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.grid2.Children.Add(host);</span><br></pre></td></tr></table></figure>\n<p>而在<strong>ShowContextMenu</strong>中则写上：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Windows.Forms.ContextMenu menu = <span class=\"keyword\">new</span> System.Windows.Forms.ContextMenu();</span><br><span class=\"line\"></span><br><span class=\"line\">menu.MenuItems.Add(<span class=\"keyword\">new</span> System.Windows.Forms.MenuItem(<span class=\"string\">\"Test\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.Drawing.Point p = <span class=\"keyword\">new</span> System.Drawing.Point(ppt.x, ppt.y);</span><br><span class=\"line\"></span><br><span class=\"line\">p = tc.PointToClient(p);</span><br><span class=\"line\"></span><br><span class=\"line\">menu.Show(tc, p);</span><br></pre></td></tr></table></figure>\n<p>即可显示自己的定制的ContextMenu。</p>\n"},{"_content":"首先先看一下效果图：\n\n![](https://images.cnblogs.com/cnblogs_com/chinese-zmm/%E6%88%AA%E5%9B%BE.jpg)\n\n 本实现是基于WPF，VS版本2008 SP1。\n\n 先说一下在Winform中的实现方法：很简单通过设置窗体的opacity来实现，或者还可以设置TransparentKey来实现某种颜色透明。但是在WPF中则如何实现呢？\n\n通过设置窗体的opacity，那么得到结果就是webbrowser整体消失了。因为这里面涉及到WPF中“空域”的问题，相关的文章如下：\n\n[http://blogs.msdn.com/changov/archive/2009/01/19/webbrowser-control-on-transparent-wpf-window.aspx](http://blogs.msdn.com/changov/archive/2009/01/19/webbrowser-control-on-transparent-wpf-window.aspx)\n\n 由此看来通过直接设置透明度的方法是不行了，那么回到原来的问题，“将浏览器窗体背景成透明”，其实这里的透明只是一个视觉上的感觉，就是浏览器中网页的背景和整个窗体的背景想融合就可以。看到这里，各位看官可能已经想到了，将浏览器中页面的背景绘制成被浏览器控件所覆盖出的背景就可以了。确实，我的实现也是依照这种思路走的。\n\n 这里主要用到了两个技术：\n\n1.Mshtml操作网页中元素，通过给body标签添加行为来实现背景的绘制。\n\n```csharp\n[ComVisible(true), Guid(\"0015EC28-C85F-49a8-9B1A-DC91E6345274\"),\n    ClassInterface(ClassInterfaceType.AutoDispatch)]\n    public class MyGadgetBodyBehavior : IElementBehavior, IHTMLPainter\n    {\n        public delegate void SizeChangedEventHandler(SizeChangedEventArgs e);\n        public event SizeChangedEventHandler onSizeChangedEvent;\n        private AppScreenSnapHelper snapHelper;\n```\n\n下面是绘制部分的代码\n\n```csharp\npublic void Draw(RECT rcBounds, RECT rcUpdates, int lDrawFlags, IntPtr hdc, IntPtr pvDrawObject)\n        {\n            Graphics g = Graphics.FromHdc(hdc);\n            Bitmap buffer = new Bitmap(width, height);\n            Graphics gBuffer = Graphics.FromImage(buffer);\n\n            AppScreenSnapHelper.Image image = snapHelper.GetScreenSnap();\n            gBuffer.DrawImage(image.Bitmap, 0, 0);\n            image.Dispose();\n\n            string imageSrc = ((IHTMLElement2)body).currentStyle.backgroundImage;\n            if (!string.IsNullOrEmpty(imageSrc))\n            {\n                Match match = Regex.Match(imageSrc, @\"url\\(\"\"file:///(?<path>.*)\"\"\\)\");\n                if (match.Success)\n                {\n                    imageSrc = match.Groups[\"path\"].Value;\n                    using (Bitmap bitmap = new Bitmap(imageSrc))\n                    {\n                        object obj = ((IHTMLElement2)body).currentStyle.marginLeft;\n                        gBuffer.DrawImage(bitmap, new Rectangle(0, 0, width, height));\n                    }\n                }\n            }\n            g.DrawImage(buffer, rcUpdates.left, rcUpdates.top,\n                      new Rectangle(rcUpdates.left - rcBounds.left,\n                      rcUpdates.top - rcBounds.top, rcUpdates.right - rcUpdates.left,\n                      rcUpdates.bottom - rcUpdates.top), GraphicsUnit.Pixel);\n            buffer.Dispose();\n            gBuffer.Dispose();\n            g.Dispose();\n            \n        }\n```\n2.RenderTargetBitmap类用来给应用程序截图：\n\n```csharp\ninternal Image GetScreenSnap(bool isForceRefresh)\n        {\n            if (CheckPositionAndSize() && !isForceRefresh)\n            {\n                return screenImage;\n            }\n\n            control.Visibility = Visibility.Hidden;\n            RenderTargetBitmap bitmap = new RenderTargetBitmap((int)parentWindow.Width,\n               (int)parentWindow.Width, 96, 96, PixelFormats.Pbgra32);\n            bitmap.Render(parentWindow);\n            BitmapSource bitmapSource = bitmap.CloneCurrentValue();\n            Bitmap newBitmap = ConvertSourceImageToBitmap(bitmapSource);\n            newBitmap = ClipBitmap(newBitmap, new System.Drawing.Rectangle((int)oldPoint.X, (int)oldPoint.Y,\n                ((int)control.Width == 0 ? 1 : (int)control.Width), ((int)control.Height) == 0 ? 1 : (int)control.Height));\n\n            control.Visibility = Visibility.Visible;\n            screenImage = new Image(newBitmap, imagePtr);\n            return screenImage;\n        }\n```\n\n在截图的时候这里使用了一个技巧就是，先将控件隐藏，然后截图，最后恢复控件的显示。 \n\n最后说一下本实现的一些缺陷：\n\n1.   如果将应用程序的背景设置为透明，则浏览器的背景将呈现白色，因为本实现使用的是应用程序的背景来进行截图，如果应用程序背景被透明，则截图得到的也是一张透明的图片，绘制到页面上后并不能达到透明的效果。如果想在这种情况下实现透明，可以考虑对桌面背景进行截图。\n2.  如果网页过大出现滚动条，那么网页中未呈现的部分并不能透明，因为截图只能作用于已经显示的部分。所以本实现用于显示本地控制好大小的html页面有比较好的效果。\n\n具体项目下载如下：\n\n[/Files/chinese-zmm/TransportWebBrowserDemo.rar](http://files.cnblogs.com/chinese-zmm/TransportWebBrowserDemo.rar) ","source":"_posts/浏览器扩展系列————透明浏览器窗口的实现.md","raw":"首先先看一下效果图：\n\n![](https://images.cnblogs.com/cnblogs_com/chinese-zmm/%E6%88%AA%E5%9B%BE.jpg)\n\n 本实现是基于WPF，VS版本2008 SP1。\n\n 先说一下在Winform中的实现方法：很简单通过设置窗体的opacity来实现，或者还可以设置TransparentKey来实现某种颜色透明。但是在WPF中则如何实现呢？\n\n通过设置窗体的opacity，那么得到结果就是webbrowser整体消失了。因为这里面涉及到WPF中“空域”的问题，相关的文章如下：\n\n[http://blogs.msdn.com/changov/archive/2009/01/19/webbrowser-control-on-transparent-wpf-window.aspx](http://blogs.msdn.com/changov/archive/2009/01/19/webbrowser-control-on-transparent-wpf-window.aspx)\n\n 由此看来通过直接设置透明度的方法是不行了，那么回到原来的问题，“将浏览器窗体背景成透明”，其实这里的透明只是一个视觉上的感觉，就是浏览器中网页的背景和整个窗体的背景想融合就可以。看到这里，各位看官可能已经想到了，将浏览器中页面的背景绘制成被浏览器控件所覆盖出的背景就可以了。确实，我的实现也是依照这种思路走的。\n\n 这里主要用到了两个技术：\n\n1.Mshtml操作网页中元素，通过给body标签添加行为来实现背景的绘制。\n\n```csharp\n[ComVisible(true), Guid(\"0015EC28-C85F-49a8-9B1A-DC91E6345274\"),\n    ClassInterface(ClassInterfaceType.AutoDispatch)]\n    public class MyGadgetBodyBehavior : IElementBehavior, IHTMLPainter\n    {\n        public delegate void SizeChangedEventHandler(SizeChangedEventArgs e);\n        public event SizeChangedEventHandler onSizeChangedEvent;\n        private AppScreenSnapHelper snapHelper;\n```\n\n下面是绘制部分的代码\n\n```csharp\npublic void Draw(RECT rcBounds, RECT rcUpdates, int lDrawFlags, IntPtr hdc, IntPtr pvDrawObject)\n        {\n            Graphics g = Graphics.FromHdc(hdc);\n            Bitmap buffer = new Bitmap(width, height);\n            Graphics gBuffer = Graphics.FromImage(buffer);\n\n            AppScreenSnapHelper.Image image = snapHelper.GetScreenSnap();\n            gBuffer.DrawImage(image.Bitmap, 0, 0);\n            image.Dispose();\n\n            string imageSrc = ((IHTMLElement2)body).currentStyle.backgroundImage;\n            if (!string.IsNullOrEmpty(imageSrc))\n            {\n                Match match = Regex.Match(imageSrc, @\"url\\(\"\"file:///(?<path>.*)\"\"\\)\");\n                if (match.Success)\n                {\n                    imageSrc = match.Groups[\"path\"].Value;\n                    using (Bitmap bitmap = new Bitmap(imageSrc))\n                    {\n                        object obj = ((IHTMLElement2)body).currentStyle.marginLeft;\n                        gBuffer.DrawImage(bitmap, new Rectangle(0, 0, width, height));\n                    }\n                }\n            }\n            g.DrawImage(buffer, rcUpdates.left, rcUpdates.top,\n                      new Rectangle(rcUpdates.left - rcBounds.left,\n                      rcUpdates.top - rcBounds.top, rcUpdates.right - rcUpdates.left,\n                      rcUpdates.bottom - rcUpdates.top), GraphicsUnit.Pixel);\n            buffer.Dispose();\n            gBuffer.Dispose();\n            g.Dispose();\n            \n        }\n```\n2.RenderTargetBitmap类用来给应用程序截图：\n\n```csharp\ninternal Image GetScreenSnap(bool isForceRefresh)\n        {\n            if (CheckPositionAndSize() && !isForceRefresh)\n            {\n                return screenImage;\n            }\n\n            control.Visibility = Visibility.Hidden;\n            RenderTargetBitmap bitmap = new RenderTargetBitmap((int)parentWindow.Width,\n               (int)parentWindow.Width, 96, 96, PixelFormats.Pbgra32);\n            bitmap.Render(parentWindow);\n            BitmapSource bitmapSource = bitmap.CloneCurrentValue();\n            Bitmap newBitmap = ConvertSourceImageToBitmap(bitmapSource);\n            newBitmap = ClipBitmap(newBitmap, new System.Drawing.Rectangle((int)oldPoint.X, (int)oldPoint.Y,\n                ((int)control.Width == 0 ? 1 : (int)control.Width), ((int)control.Height) == 0 ? 1 : (int)control.Height));\n\n            control.Visibility = Visibility.Visible;\n            screenImage = new Image(newBitmap, imagePtr);\n            return screenImage;\n        }\n```\n\n在截图的时候这里使用了一个技巧就是，先将控件隐藏，然后截图，最后恢复控件的显示。 \n\n最后说一下本实现的一些缺陷：\n\n1.   如果将应用程序的背景设置为透明，则浏览器的背景将呈现白色，因为本实现使用的是应用程序的背景来进行截图，如果应用程序背景被透明，则截图得到的也是一张透明的图片，绘制到页面上后并不能达到透明的效果。如果想在这种情况下实现透明，可以考虑对桌面背景进行截图。\n2.  如果网页过大出现滚动条，那么网页中未呈现的部分并不能透明，因为截图只能作用于已经显示的部分。所以本实现用于显示本地控制好大小的html页面有比较好的效果。\n\n具体项目下载如下：\n\n[/Files/chinese-zmm/TransportWebBrowserDemo.rar](http://files.cnblogs.com/chinese-zmm/TransportWebBrowserDemo.rar) ","slug":"浏览器扩展系列————透明浏览器窗口的实现","published":1,"date":"2019-02-16T13:03:17.000Z","updated":"2019-02-25T14:59:39.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr60007t2zsea8aamid","content":"<p>首先先看一下效果图：</p>\n<p><img src=\"https://images.cnblogs.com/cnblogs_com/chinese-zmm/%E6%88%AA%E5%9B%BE.jpg\" alt></p>\n<p> 本实现是基于WPF，VS版本2008 SP1。</p>\n<p> 先说一下在Winform中的实现方法：很简单通过设置窗体的opacity来实现，或者还可以设置TransparentKey来实现某种颜色透明。但是在WPF中则如何实现呢？</p>\n<p>通过设置窗体的opacity，那么得到结果就是webbrowser整体消失了。因为这里面涉及到WPF中“空域”的问题，相关的文章如下：</p>\n<p><a href=\"http://blogs.msdn.com/changov/archive/2009/01/19/webbrowser-control-on-transparent-wpf-window.aspx\" target=\"_blank\" rel=\"noopener\">http://blogs.msdn.com/changov/archive/2009/01/19/webbrowser-control-on-transparent-wpf-window.aspx</a></p>\n<p> 由此看来通过直接设置透明度的方法是不行了，那么回到原来的问题，“将浏览器窗体背景成透明”，其实这里的透明只是一个视觉上的感觉，就是浏览器中网页的背景和整个窗体的背景想融合就可以。看到这里，各位看官可能已经想到了，将浏览器中页面的背景绘制成被浏览器控件所覆盖出的背景就可以了。确实，我的实现也是依照这种思路走的。</p>\n<p> 这里主要用到了两个技术：</p>\n<p>1.Mshtml操作网页中元素，通过给body标签添加行为来实现背景的绘制。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ComVisible(true), Guid(<span class=\"meta-string\">\"0015EC28-C85F-49a8-9B1A-DC91E6345274\"</span>),</span></span><br><span class=\"line\"><span class=\"meta\">    ClassInterface(ClassInterfaceType.AutoDispatch)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyGadgetBodyBehavior</span> : <span class=\"title\">IElementBehavior</span>, <span class=\"title\">IHTMLPainter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">SizeChangedEventHandler</span>(<span class=\"params\">SizeChangedEventArgs e</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> SizeChangedEventHandler onSizeChangedEvent;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> AppScreenSnapHelper snapHelper;</span><br></pre></td></tr></table></figure>\n<p>下面是绘制部分的代码</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Draw</span>(<span class=\"params\">RECT rcBounds, RECT rcUpdates, <span class=\"keyword\">int</span> lDrawFlags, IntPtr hdc, IntPtr pvDrawObject</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Graphics g = Graphics.FromHdc(hdc);</span><br><span class=\"line\">            Bitmap buffer = <span class=\"keyword\">new</span> Bitmap(width, height);</span><br><span class=\"line\">            Graphics gBuffer = Graphics.FromImage(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">            AppScreenSnapHelper.Image image = snapHelper.GetScreenSnap();</span><br><span class=\"line\">            gBuffer.DrawImage(image.Bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            image.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">string</span> imageSrc = ((IHTMLElement2)body).currentStyle.backgroundImage;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(imageSrc))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Match match = Regex.Match(imageSrc, <span class=\"string\">@\"url\\(\"\"file:///(?&lt;path&gt;.*)\"\"\\)\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (match.Success)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    imageSrc = match.Groups[<span class=\"string\">\"path\"</span>].Value;</span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (Bitmap bitmap = <span class=\"keyword\">new</span> Bitmap(imageSrc))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">object</span> obj = ((IHTMLElement2)body).currentStyle.marginLeft;</span><br><span class=\"line\">                        gBuffer.DrawImage(bitmap, <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            g.DrawImage(buffer, rcUpdates.left, rcUpdates.top,</span><br><span class=\"line\">                      <span class=\"keyword\">new</span> Rectangle(rcUpdates.left - rcBounds.left,</span><br><span class=\"line\">                      rcUpdates.top - rcBounds.top, rcUpdates.right - rcUpdates.left,</span><br><span class=\"line\">                      rcUpdates.bottom - rcUpdates.top), GraphicsUnit.Pixel);</span><br><span class=\"line\">            buffer.Dispose();</span><br><span class=\"line\">            gBuffer.Dispose();</span><br><span class=\"line\">            g.Dispose();</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>2.RenderTargetBitmap类用来给应用程序截图：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">internal</span> Image <span class=\"title\">GetScreenSnap</span>(<span class=\"params\"><span class=\"keyword\">bool</span> isForceRefresh</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (CheckPositionAndSize() &amp;&amp; !isForceRefresh)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> screenImage;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            control.Visibility = Visibility.Hidden;</span><br><span class=\"line\">            RenderTargetBitmap bitmap = <span class=\"keyword\">new</span> RenderTargetBitmap((<span class=\"keyword\">int</span>)parentWindow.Width,</span><br><span class=\"line\">               (<span class=\"keyword\">int</span>)parentWindow.Width, <span class=\"number\">96</span>, <span class=\"number\">96</span>, PixelFormats.Pbgra32);</span><br><span class=\"line\">            bitmap.Render(parentWindow);</span><br><span class=\"line\">            BitmapSource bitmapSource = bitmap.CloneCurrentValue();</span><br><span class=\"line\">            Bitmap newBitmap = ConvertSourceImageToBitmap(bitmapSource);</span><br><span class=\"line\">            newBitmap = ClipBitmap(newBitmap, <span class=\"keyword\">new</span> System.Drawing.Rectangle((<span class=\"keyword\">int</span>)oldPoint.X, (<span class=\"keyword\">int</span>)oldPoint.Y,</span><br><span class=\"line\">                ((<span class=\"keyword\">int</span>)control.Width == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : (<span class=\"keyword\">int</span>)control.Width), ((<span class=\"keyword\">int</span>)control.Height) == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : (<span class=\"keyword\">int</span>)control.Height));</span><br><span class=\"line\"></span><br><span class=\"line\">            control.Visibility = Visibility.Visible;</span><br><span class=\"line\">            screenImage = <span class=\"keyword\">new</span> Image(newBitmap, imagePtr);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> screenImage;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>在截图的时候这里使用了一个技巧就是，先将控件隐藏，然后截图，最后恢复控件的显示。 </p>\n<p>最后说一下本实现的一些缺陷：</p>\n<ol>\n<li>如果将应用程序的背景设置为透明，则浏览器的背景将呈现白色，因为本实现使用的是应用程序的背景来进行截图，如果应用程序背景被透明，则截图得到的也是一张透明的图片，绘制到页面上后并不能达到透明的效果。如果想在这种情况下实现透明，可以考虑对桌面背景进行截图。</li>\n<li>如果网页过大出现滚动条，那么网页中未呈现的部分并不能透明，因为截图只能作用于已经显示的部分。所以本实现用于显示本地控制好大小的html页面有比较好的效果。</li>\n</ol>\n<p>具体项目下载如下：</p>\n<p><a href=\"http://files.cnblogs.com/chinese-zmm/TransportWebBrowserDemo.rar\" target=\"_blank\" rel=\"noopener\">/Files/chinese-zmm/TransportWebBrowserDemo.rar</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先先看一下效果图：</p>\n<p><img src=\"https://images.cnblogs.com/cnblogs_com/chinese-zmm/%E6%88%AA%E5%9B%BE.jpg\" alt></p>\n<p> 本实现是基于WPF，VS版本2008 SP1。</p>\n<p> 先说一下在Winform中的实现方法：很简单通过设置窗体的opacity来实现，或者还可以设置TransparentKey来实现某种颜色透明。但是在WPF中则如何实现呢？</p>\n<p>通过设置窗体的opacity，那么得到结果就是webbrowser整体消失了。因为这里面涉及到WPF中“空域”的问题，相关的文章如下：</p>\n<p><a href=\"http://blogs.msdn.com/changov/archive/2009/01/19/webbrowser-control-on-transparent-wpf-window.aspx\" target=\"_blank\" rel=\"noopener\">http://blogs.msdn.com/changov/archive/2009/01/19/webbrowser-control-on-transparent-wpf-window.aspx</a></p>\n<p> 由此看来通过直接设置透明度的方法是不行了，那么回到原来的问题，“将浏览器窗体背景成透明”，其实这里的透明只是一个视觉上的感觉，就是浏览器中网页的背景和整个窗体的背景想融合就可以。看到这里，各位看官可能已经想到了，将浏览器中页面的背景绘制成被浏览器控件所覆盖出的背景就可以了。确实，我的实现也是依照这种思路走的。</p>\n<p> 这里主要用到了两个技术：</p>\n<p>1.Mshtml操作网页中元素，通过给body标签添加行为来实现背景的绘制。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ComVisible(true), Guid(<span class=\"meta-string\">\"0015EC28-C85F-49a8-9B1A-DC91E6345274\"</span>),</span></span><br><span class=\"line\"><span class=\"meta\">    ClassInterface(ClassInterfaceType.AutoDispatch)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyGadgetBodyBehavior</span> : <span class=\"title\">IElementBehavior</span>, <span class=\"title\">IHTMLPainter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">SizeChangedEventHandler</span>(<span class=\"params\">SizeChangedEventArgs e</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> SizeChangedEventHandler onSizeChangedEvent;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> AppScreenSnapHelper snapHelper;</span><br></pre></td></tr></table></figure>\n<p>下面是绘制部分的代码</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Draw</span>(<span class=\"params\">RECT rcBounds, RECT rcUpdates, <span class=\"keyword\">int</span> lDrawFlags, IntPtr hdc, IntPtr pvDrawObject</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Graphics g = Graphics.FromHdc(hdc);</span><br><span class=\"line\">            Bitmap buffer = <span class=\"keyword\">new</span> Bitmap(width, height);</span><br><span class=\"line\">            Graphics gBuffer = Graphics.FromImage(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">            AppScreenSnapHelper.Image image = snapHelper.GetScreenSnap();</span><br><span class=\"line\">            gBuffer.DrawImage(image.Bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            image.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">string</span> imageSrc = ((IHTMLElement2)body).currentStyle.backgroundImage;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(imageSrc))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Match match = Regex.Match(imageSrc, <span class=\"string\">@\"url\\(\"\"file:///(?&lt;path&gt;.*)\"\"\\)\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (match.Success)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    imageSrc = match.Groups[<span class=\"string\">\"path\"</span>].Value;</span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (Bitmap bitmap = <span class=\"keyword\">new</span> Bitmap(imageSrc))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">object</span> obj = ((IHTMLElement2)body).currentStyle.marginLeft;</span><br><span class=\"line\">                        gBuffer.DrawImage(bitmap, <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            g.DrawImage(buffer, rcUpdates.left, rcUpdates.top,</span><br><span class=\"line\">                      <span class=\"keyword\">new</span> Rectangle(rcUpdates.left - rcBounds.left,</span><br><span class=\"line\">                      rcUpdates.top - rcBounds.top, rcUpdates.right - rcUpdates.left,</span><br><span class=\"line\">                      rcUpdates.bottom - rcUpdates.top), GraphicsUnit.Pixel);</span><br><span class=\"line\">            buffer.Dispose();</span><br><span class=\"line\">            gBuffer.Dispose();</span><br><span class=\"line\">            g.Dispose();</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>2.RenderTargetBitmap类用来给应用程序截图：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">internal</span> Image <span class=\"title\">GetScreenSnap</span>(<span class=\"params\"><span class=\"keyword\">bool</span> isForceRefresh</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (CheckPositionAndSize() &amp;&amp; !isForceRefresh)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> screenImage;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            control.Visibility = Visibility.Hidden;</span><br><span class=\"line\">            RenderTargetBitmap bitmap = <span class=\"keyword\">new</span> RenderTargetBitmap((<span class=\"keyword\">int</span>)parentWindow.Width,</span><br><span class=\"line\">               (<span class=\"keyword\">int</span>)parentWindow.Width, <span class=\"number\">96</span>, <span class=\"number\">96</span>, PixelFormats.Pbgra32);</span><br><span class=\"line\">            bitmap.Render(parentWindow);</span><br><span class=\"line\">            BitmapSource bitmapSource = bitmap.CloneCurrentValue();</span><br><span class=\"line\">            Bitmap newBitmap = ConvertSourceImageToBitmap(bitmapSource);</span><br><span class=\"line\">            newBitmap = ClipBitmap(newBitmap, <span class=\"keyword\">new</span> System.Drawing.Rectangle((<span class=\"keyword\">int</span>)oldPoint.X, (<span class=\"keyword\">int</span>)oldPoint.Y,</span><br><span class=\"line\">                ((<span class=\"keyword\">int</span>)control.Width == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : (<span class=\"keyword\">int</span>)control.Width), ((<span class=\"keyword\">int</span>)control.Height) == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : (<span class=\"keyword\">int</span>)control.Height));</span><br><span class=\"line\"></span><br><span class=\"line\">            control.Visibility = Visibility.Visible;</span><br><span class=\"line\">            screenImage = <span class=\"keyword\">new</span> Image(newBitmap, imagePtr);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> screenImage;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>在截图的时候这里使用了一个技巧就是，先将控件隐藏，然后截图，最后恢复控件的显示。 </p>\n<p>最后说一下本实现的一些缺陷：</p>\n<ol>\n<li>如果将应用程序的背景设置为透明，则浏览器的背景将呈现白色，因为本实现使用的是应用程序的背景来进行截图，如果应用程序背景被透明，则截图得到的也是一张透明的图片，绘制到页面上后并不能达到透明的效果。如果想在这种情况下实现透明，可以考虑对桌面背景进行截图。</li>\n<li>如果网页过大出现滚动条，那么网页中未呈现的部分并不能透明，因为截图只能作用于已经显示的部分。所以本实现用于显示本地控制好大小的html页面有比较好的效果。</li>\n</ol>\n<p>具体项目下载如下：</p>\n<p><a href=\"http://files.cnblogs.com/chinese-zmm/TransportWebBrowserDemo.rar\" target=\"_blank\" rel=\"noopener\">/Files/chinese-zmm/TransportWebBrowserDemo.rar</a> </p>\n"},{"title":"浏览器扩展系列————给MSTHML添加内置脚本对象【包括自定义事件】","date":"2009-03-02T05:35:00.000Z","_content":"\n使用场合：\n\n 在程序中使用WebBrowser或相关的控件如：axWebBrowser等。打开本地的html文件时，可以在html的脚本中使用自己在.net中定义的类，实现与Internet Explorer server的互操作。此外也可以在充分利用html在设计界面方面高效，简单的同时，也可以实现一些复杂的特性。\n\n实现：\n\n```csharp\n使用场合：\n\n 在程序中使用WebBrowser或相关的控件如：axWebBrowser等。打开本地的html文件时，可以在html的脚本中使用自己在.net中定义的类，实现与Internet Explorer server的互操作。此外也可以在充分利用html在设计界面方面高效，简单的同时，也可以实现一些复杂的特性。\n\n实现：\n\n![](https://www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif)![](https://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif)Code  \npublicclass ScriptEvent  \n    {  \n        //System.__ComObject 对象  \nprivateobject eventObject;  \n   \n        publicobject EventObect  \n        {  \n            get { returnthis.eventObject; }  \n            set { this.eventObject = value; }  \n        }  \n   \n        publicobject Execute()  \n        {  \n            if (null== eventObject)  \n                returnnull;  \n            //JScript.dll中FunctionInstance接口的Guid  \n            Guid fun_gid =new Guid(\"{3EEF9758-35FC-11D1-8CE4-00C04FC2B093}\");  \n            Type functionInstance = Type.GetTypeFromCLSID(fun_gid);  \n            object rev;  \n            rev = functionInstance.InvokeMember(\"call\", BindingFlags.InvokeMethod | BindingFlags.NonPublic, null, eventObject, null);  \n            return rev;  \n        }  \n\nScriptEvent类实现了对脚本事件的封装。\n\n具体使用如下：\n\n![](https://www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif)![](https://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif)Code  \n\\[ComVisibleAttribute(true)\\]  \n    publicclass ScriptObject  \n    {  \n        private Window window;  \n        private ScriptEvent onClickEvent;  \n   \n        public ScriptObject(Window window)  \n        {  \n            this.window = window;  \n            onClickEvent =new ScriptEvent();  \n        }  \n   \n        publicstring WindowTitle  \n        {  \n            get { return window.Title; }  \n        }  \n   \n        publicdouble Add2(double num1, double num2)  \n        {  \n            return num1 + num2;  \n        }  \n   \n        publicobject onClick  \n        {  \n            get { return onClickEvent.EventObect; }  \n            set { onClickEvent.EventObect = value; }  \n        }  \n   \n        publicvoid OnClick()  \n        {  \n            onClickEvent.Execute();  \n        }  \n\nonClick属性对应与Javascript脚本中ScriptObject类的onClick事件。在脚本中可以把一个function实例赋给此类的onClick属性。\n===================================================================================\n\n因为在javascript中事件并不等同于.net中的事件，具体来说就是javascript中不允许绑定多个事件，所以可以一个事件实现为一个函数对象，通过用com viewer查看System32下的Jscript.dll可以看到，此对象对应于其中的FunctionInstance接口，所以在此就使用了反射构造了这个接口，然后调用其真正的脚本函数。\n\n具体代码下载[http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar](http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar)。\n\n```\n\nScriptEvent类实现了对脚本事件的封装。\n\n具体使用如下：\n\n```csharp\n[ComVisibleAttribute(true)]\n    public class ScriptObject\n    {\n        private Window window;\n        private ScriptEvent onClickEvent;\n \n        public ScriptObject(Window window)\n        {\n            this.window = window;\n            onClickEvent = new ScriptEvent();\n        }\n \n        public string WindowTitle\n        {\n            get { return window.Title; }\n        }\n \n        public double Add2(double num1, double num2)\n        {\n            return num1 + num2;\n        }\n \n        public object onClick\n        {\n            get { return onClickEvent.EventObect; }\n            set { onClickEvent.EventObect = value; }\n        }\n \n        public void OnClick()\n        {\n            onClickEvent.Execute();\n        }\n```\n\n\nonClick属性对应与Javascript脚本中ScriptObject类的onClick事件。在脚本中可以把一个function实例赋给此类的onClick属性。\n\n\n因为在javascript中事件并不等同于.net中的事件，具体来说就是javascript中不允许绑定多个事件，所以可以一个事件实现为一个函数对象，通过用com viewer查看System32下的Jscript.dll可以看到，此对象对应于其中的FunctionInstance接口，所以在此就使用了反射构造了这个接口，然后调用其真正的脚本函数。\n\n具体代码下载[http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar](http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar)。\n","source":"_posts/浏览器扩展系列————给MSTHML添加内置脚本对象【包括自定义事件】.md","raw":"---\ntitle: 浏览器扩展系列————给MSTHML添加内置脚本对象【包括自定义事件】\ntags: []\ndate: 2009-03-02 13:35:00\n---\n\n使用场合：\n\n 在程序中使用WebBrowser或相关的控件如：axWebBrowser等。打开本地的html文件时，可以在html的脚本中使用自己在.net中定义的类，实现与Internet Explorer server的互操作。此外也可以在充分利用html在设计界面方面高效，简单的同时，也可以实现一些复杂的特性。\n\n实现：\n\n```csharp\n使用场合：\n\n 在程序中使用WebBrowser或相关的控件如：axWebBrowser等。打开本地的html文件时，可以在html的脚本中使用自己在.net中定义的类，实现与Internet Explorer server的互操作。此外也可以在充分利用html在设计界面方面高效，简单的同时，也可以实现一些复杂的特性。\n\n实现：\n\n![](https://www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif)![](https://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif)Code  \npublicclass ScriptEvent  \n    {  \n        //System.__ComObject 对象  \nprivateobject eventObject;  \n   \n        publicobject EventObect  \n        {  \n            get { returnthis.eventObject; }  \n            set { this.eventObject = value; }  \n        }  \n   \n        publicobject Execute()  \n        {  \n            if (null== eventObject)  \n                returnnull;  \n            //JScript.dll中FunctionInstance接口的Guid  \n            Guid fun_gid =new Guid(\"{3EEF9758-35FC-11D1-8CE4-00C04FC2B093}\");  \n            Type functionInstance = Type.GetTypeFromCLSID(fun_gid);  \n            object rev;  \n            rev = functionInstance.InvokeMember(\"call\", BindingFlags.InvokeMethod | BindingFlags.NonPublic, null, eventObject, null);  \n            return rev;  \n        }  \n\nScriptEvent类实现了对脚本事件的封装。\n\n具体使用如下：\n\n![](https://www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif)![](https://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif)Code  \n\\[ComVisibleAttribute(true)\\]  \n    publicclass ScriptObject  \n    {  \n        private Window window;  \n        private ScriptEvent onClickEvent;  \n   \n        public ScriptObject(Window window)  \n        {  \n            this.window = window;  \n            onClickEvent =new ScriptEvent();  \n        }  \n   \n        publicstring WindowTitle  \n        {  \n            get { return window.Title; }  \n        }  \n   \n        publicdouble Add2(double num1, double num2)  \n        {  \n            return num1 + num2;  \n        }  \n   \n        publicobject onClick  \n        {  \n            get { return onClickEvent.EventObect; }  \n            set { onClickEvent.EventObect = value; }  \n        }  \n   \n        publicvoid OnClick()  \n        {  \n            onClickEvent.Execute();  \n        }  \n\nonClick属性对应与Javascript脚本中ScriptObject类的onClick事件。在脚本中可以把一个function实例赋给此类的onClick属性。\n===================================================================================\n\n因为在javascript中事件并不等同于.net中的事件，具体来说就是javascript中不允许绑定多个事件，所以可以一个事件实现为一个函数对象，通过用com viewer查看System32下的Jscript.dll可以看到，此对象对应于其中的FunctionInstance接口，所以在此就使用了反射构造了这个接口，然后调用其真正的脚本函数。\n\n具体代码下载[http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar](http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar)。\n\n```\n\nScriptEvent类实现了对脚本事件的封装。\n\n具体使用如下：\n\n```csharp\n[ComVisibleAttribute(true)]\n    public class ScriptObject\n    {\n        private Window window;\n        private ScriptEvent onClickEvent;\n \n        public ScriptObject(Window window)\n        {\n            this.window = window;\n            onClickEvent = new ScriptEvent();\n        }\n \n        public string WindowTitle\n        {\n            get { return window.Title; }\n        }\n \n        public double Add2(double num1, double num2)\n        {\n            return num1 + num2;\n        }\n \n        public object onClick\n        {\n            get { return onClickEvent.EventObect; }\n            set { onClickEvent.EventObect = value; }\n        }\n \n        public void OnClick()\n        {\n            onClickEvent.Execute();\n        }\n```\n\n\nonClick属性对应与Javascript脚本中ScriptObject类的onClick事件。在脚本中可以把一个function实例赋给此类的onClick属性。\n\n\n因为在javascript中事件并不等同于.net中的事件，具体来说就是javascript中不允许绑定多个事件，所以可以一个事件实现为一个函数对象，通过用com viewer查看System32下的Jscript.dll可以看到，此对象对应于其中的FunctionInstance接口，所以在此就使用了反射构造了这个接口，然后调用其真正的脚本函数。\n\n具体代码下载[http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar](http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar)。\n","slug":"浏览器扩展系列————给MSTHML添加内置脚本对象【包括自定义事件】","published":1,"updated":"2019-02-25T15:04:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr70008t2zstc0i10lu","content":"<p>使用场合：</p>\n<p> 在程序中使用WebBrowser或相关的控件如：axWebBrowser等。打开本地的html文件时，可以在html的脚本中使用自己在.net中定义的类，实现与Internet Explorer server的互操作。此外也可以在充分利用html在设计界面方面高效，简单的同时，也可以实现一些复杂的特性。</p>\n<p>实现：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用场合：</span><br><span class=\"line\"></span><br><span class=\"line\"> 在程序中使用WebBrowser或相关的控件如：axWebBrowser等。打开本地的html文件时，可以在html的脚本中使用自己在.net中定义的类，实现与Internet Explorer server的互操作。此外也可以在充分利用html在设计界面方面高效，简单的同时，也可以实现一些复杂的特性。</span><br><span class=\"line\"></span><br><span class=\"line\">实现：</span><br><span class=\"line\"></span><br><span class=\"line\">![](https:<span class=\"comment\">//www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif)![](https://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif)Code  </span></span><br><span class=\"line\">publicclass ScriptEvent  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//System.__ComObject 对象  </span></span><br><span class=\"line\">privateobject eventObject;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        publicobject EventObect  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; returnthis.eventObject; &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; <span class=\"keyword\">this</span>.eventObject = <span class=\"keyword\">value</span>; &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"function\">publicobject <span class=\"title\">Execute</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span>== eventObject)  </span><br><span class=\"line\">                returnnull;  </span><br><span class=\"line\">            <span class=\"comment\">//JScript.dll中FunctionInstance接口的Guid  </span></span><br><span class=\"line\">            Guid fun_gid =<span class=\"keyword\">new</span> Guid(<span class=\"string\">\"&#123;3EEF9758-35FC-11D1-8CE4-00C04FC2B093&#125;\"</span>);  </span><br><span class=\"line\">            Type functionInstance = Type.GetTypeFromCLSID(fun_gid);  </span><br><span class=\"line\">            <span class=\"keyword\">object</span> rev;  </span><br><span class=\"line\">            rev = functionInstance.InvokeMember(<span class=\"string\">\"call\"</span>, BindingFlags.InvokeMethod | BindingFlags.NonPublic, <span class=\"literal\">null</span>, eventObject, <span class=\"literal\">null</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> rev;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">ScriptEvent类实现了对脚本事件的封装。</span><br><span class=\"line\"></span><br><span class=\"line\">具体使用如下：</span><br><span class=\"line\"></span><br><span class=\"line\">![](https:<span class=\"comment\">//www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif)![](https://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif)Code  </span></span><br><span class=\"line\">\\[ComVisibleAttribute(<span class=\"literal\">true</span>)\\]  </span><br><span class=\"line\">    publicclass ScriptObject  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> Window window;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> ScriptEvent onClickEvent;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScriptObject</span>(<span class=\"params\">Window window</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.window = window;  </span><br><span class=\"line\">            onClickEvent =<span class=\"keyword\">new</span> ScriptEvent();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        publicstring WindowTitle  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> window.Title; &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"function\">publicdouble <span class=\"title\">Add2</span>(<span class=\"params\"><span class=\"keyword\">double</span> num1, <span class=\"keyword\">double</span> num2</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 + num2;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        publicobject onClick  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> onClickEvent.EventObect; &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; onClickEvent.EventObect = <span class=\"keyword\">value</span>; &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"function\">publicvoid <span class=\"title\">OnClick</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">            onClickEvent.Execute();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">onClick属性对应与Javascript脚本中ScriptObject类的onClick事件。在脚本中可以把一个function实例赋给此类的onClick属性。</span><br><span class=\"line\">===================================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">因为在javascript中事件并不等同于.net中的事件，具体来说就是javascript中不允许绑定多个事件，所以可以一个事件实现为一个函数对象，通过用com viewer查看System32下的Jscript.dll可以看到，此对象对应于其中的FunctionInstance接口，所以在此就使用了反射构造了这个接口，然后调用其真正的脚本函数。</span><br><span class=\"line\"></span><br><span class=\"line\">具体代码下载[http:<span class=\"comment\">//files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar](http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar)。</span></span><br></pre></td></tr></table></figure>\n<p>ScriptEvent类实现了对脚本事件的封装。</p>\n<p>具体使用如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ComVisibleAttribute(true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ScriptObject</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Window window;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> ScriptEvent onClickEvent;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScriptObject</span>(<span class=\"params\">Window window</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.window = window;</span><br><span class=\"line\">            onClickEvent = <span class=\"keyword\">new</span> ScriptEvent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> WindowTitle</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> window.Title; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">Add2</span>(<span class=\"params\"><span class=\"keyword\">double</span> num1, <span class=\"keyword\">double</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">object</span> onClick</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> onClickEvent.EventObect; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; onClickEvent.EventObect = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnClick</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            onClickEvent.Execute();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>onClick属性对应与Javascript脚本中ScriptObject类的onClick事件。在脚本中可以把一个function实例赋给此类的onClick属性。</p>\n<p>因为在javascript中事件并不等同于.net中的事件，具体来说就是javascript中不允许绑定多个事件，所以可以一个事件实现为一个函数对象，通过用com viewer查看System32下的Jscript.dll可以看到，此对象对应于其中的FunctionInstance接口，所以在此就使用了反射构造了这个接口，然后调用其真正的脚本函数。</p>\n<p>具体代码下载<a href=\"http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar\" target=\"_blank\" rel=\"noopener\">http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用场合：</p>\n<p> 在程序中使用WebBrowser或相关的控件如：axWebBrowser等。打开本地的html文件时，可以在html的脚本中使用自己在.net中定义的类，实现与Internet Explorer server的互操作。此外也可以在充分利用html在设计界面方面高效，简单的同时，也可以实现一些复杂的特性。</p>\n<p>实现：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用场合：</span><br><span class=\"line\"></span><br><span class=\"line\"> 在程序中使用WebBrowser或相关的控件如：axWebBrowser等。打开本地的html文件时，可以在html的脚本中使用自己在.net中定义的类，实现与Internet Explorer server的互操作。此外也可以在充分利用html在设计界面方面高效，简单的同时，也可以实现一些复杂的特性。</span><br><span class=\"line\"></span><br><span class=\"line\">实现：</span><br><span class=\"line\"></span><br><span class=\"line\">![](https:<span class=\"comment\">//www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif)![](https://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif)Code  </span></span><br><span class=\"line\">publicclass ScriptEvent  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//System.__ComObject 对象  </span></span><br><span class=\"line\">privateobject eventObject;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        publicobject EventObect  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; returnthis.eventObject; &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; <span class=\"keyword\">this</span>.eventObject = <span class=\"keyword\">value</span>; &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"function\">publicobject <span class=\"title\">Execute</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span>== eventObject)  </span><br><span class=\"line\">                returnnull;  </span><br><span class=\"line\">            <span class=\"comment\">//JScript.dll中FunctionInstance接口的Guid  </span></span><br><span class=\"line\">            Guid fun_gid =<span class=\"keyword\">new</span> Guid(<span class=\"string\">\"&#123;3EEF9758-35FC-11D1-8CE4-00C04FC2B093&#125;\"</span>);  </span><br><span class=\"line\">            Type functionInstance = Type.GetTypeFromCLSID(fun_gid);  </span><br><span class=\"line\">            <span class=\"keyword\">object</span> rev;  </span><br><span class=\"line\">            rev = functionInstance.InvokeMember(<span class=\"string\">\"call\"</span>, BindingFlags.InvokeMethod | BindingFlags.NonPublic, <span class=\"literal\">null</span>, eventObject, <span class=\"literal\">null</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> rev;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">ScriptEvent类实现了对脚本事件的封装。</span><br><span class=\"line\"></span><br><span class=\"line\">具体使用如下：</span><br><span class=\"line\"></span><br><span class=\"line\">![](https:<span class=\"comment\">//www.cnblogs.com/Images/OutliningIndicators/ContractedBlock.gif)![](https://www.cnblogs.com/Images/OutliningIndicators/ExpandedBlockStart.gif)Code  </span></span><br><span class=\"line\">\\[ComVisibleAttribute(<span class=\"literal\">true</span>)\\]  </span><br><span class=\"line\">    publicclass ScriptObject  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> Window window;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> ScriptEvent onClickEvent;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScriptObject</span>(<span class=\"params\">Window window</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.window = window;  </span><br><span class=\"line\">            onClickEvent =<span class=\"keyword\">new</span> ScriptEvent();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        publicstring WindowTitle  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> window.Title; &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"function\">publicdouble <span class=\"title\">Add2</span>(<span class=\"params\"><span class=\"keyword\">double</span> num1, <span class=\"keyword\">double</span> num2</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 + num2;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        publicobject onClick  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> onClickEvent.EventObect; &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; onClickEvent.EventObect = <span class=\"keyword\">value</span>; &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">        <span class=\"function\">publicvoid <span class=\"title\">OnClick</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;  </span><br><span class=\"line\">            onClickEvent.Execute();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">onClick属性对应与Javascript脚本中ScriptObject类的onClick事件。在脚本中可以把一个function实例赋给此类的onClick属性。</span><br><span class=\"line\">===================================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">因为在javascript中事件并不等同于.net中的事件，具体来说就是javascript中不允许绑定多个事件，所以可以一个事件实现为一个函数对象，通过用com viewer查看System32下的Jscript.dll可以看到，此对象对应于其中的FunctionInstance接口，所以在此就使用了反射构造了这个接口，然后调用其真正的脚本函数。</span><br><span class=\"line\"></span><br><span class=\"line\">具体代码下载[http:<span class=\"comment\">//files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar](http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar)。</span></span><br></pre></td></tr></table></figure>\n<p>ScriptEvent类实现了对脚本事件的封装。</p>\n<p>具体使用如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">ComVisibleAttribute(true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ScriptObject</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Window window;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> ScriptEvent onClickEvent;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScriptObject</span>(<span class=\"params\">Window window</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.window = window;</span><br><span class=\"line\">            onClickEvent = <span class=\"keyword\">new</span> ScriptEvent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> WindowTitle</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> window.Title; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">Add2</span>(<span class=\"params\"><span class=\"keyword\">double</span> num1, <span class=\"keyword\">double</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">object</span> onClick</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> onClickEvent.EventObect; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; onClickEvent.EventObect = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnClick</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            onClickEvent.Execute();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>onClick属性对应与Javascript脚本中ScriptObject类的onClick事件。在脚本中可以把一个function实例赋给此类的onClick属性。</p>\n<p>因为在javascript中事件并不等同于.net中的事件，具体来说就是javascript中不允许绑定多个事件，所以可以一个事件实现为一个函数对象，通过用com viewer查看System32下的Jscript.dll可以看到，此对象对应于其中的FunctionInstance接口，所以在此就使用了反射构造了这个接口，然后调用其真正的脚本函数。</p>\n<p>具体代码下载<a href=\"http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar\" target=\"_blank\" rel=\"noopener\">http://files.cnblogs.com/chinese-zmm/ScriptObjectDemo.rar</a>。</p>\n"},{"title":"巧用qmake工具生成专业的makefile","date":"2010-12-11T03:58:00.000Z","_content":"\n**问题描述**\n\n一般来说在Linux下编程写个测试程序，都需要制作一个makefile文件，但是如果自己手动编写每个还是比较麻烦，而且看上去也不太专业。而如果用autoconf工具生成也还是需要加入一些手动操作，也不是很方便。\n\n**解决方法**\n\n利用QT程序里的qmake工具，qmake工具是QT 开发环境中的工具，它可以根据文件夹下的文件生成.pro文件，这个文件类似于vs的.vcproject，然后再根据这个.pro文件生成makefile文件。\n\n**操作步骤**\n\n安装qmake工具\n\n```bash\nsudo apt-get install qt4-qmake\n```\n\n\n<span style=\"font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12pt;\"><span style=\"font-size: 13px; line-height: 19px; white-space: pre;\">在src文件夹下执行</span></span>\n\n```bash\nqmake -project --生成.pro文件 qmake --根据.pro文件生成makefile make\n```\n\n\n&nbsp;\n\n**注意**\n\n由于qmake是QT的工具，所以它会在.pro中加入qt的几个默认库，如果你不想下载这些库，可以在.pro文件中添加加下面两句，去除对默认库的引用。\n\n```\nCONFIG -= qt QT -= gui core\n```\n\n最后附上pro文件的配置文档：\n\n[http://doc.qt.nokia.com/4.6/qmake-variable-reference.html](http://doc.qt.nokia.com/4.6/qmake-variable-reference.html)\n\n\n当然如果要生成复杂的makefile文件还是要通过autoconf类似的工具：\n\n[http://www.chinaunix.net/jh/4/782832.html](http://www.chinaunix.net/jh/4/782832.html)\n\n&nbsp;\n\n虽然这篇文章内容比较简单，但是应该能给大家编写测试代码带来一些方便，所以就发到首页了，希望能给大家带来帮助。","source":"_posts/巧用qmake工具生成专业的makefile.md","raw":"---\ntitle: 巧用qmake工具生成专业的makefile\ntags: []\ndate: 2010-12-11 11:58:00\n---\n\n**问题描述**\n\n一般来说在Linux下编程写个测试程序，都需要制作一个makefile文件，但是如果自己手动编写每个还是比较麻烦，而且看上去也不太专业。而如果用autoconf工具生成也还是需要加入一些手动操作，也不是很方便。\n\n**解决方法**\n\n利用QT程序里的qmake工具，qmake工具是QT 开发环境中的工具，它可以根据文件夹下的文件生成.pro文件，这个文件类似于vs的.vcproject，然后再根据这个.pro文件生成makefile文件。\n\n**操作步骤**\n\n安装qmake工具\n\n```bash\nsudo apt-get install qt4-qmake\n```\n\n\n<span style=\"font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12pt;\"><span style=\"font-size: 13px; line-height: 19px; white-space: pre;\">在src文件夹下执行</span></span>\n\n```bash\nqmake -project --生成.pro文件 qmake --根据.pro文件生成makefile make\n```\n\n\n&nbsp;\n\n**注意**\n\n由于qmake是QT的工具，所以它会在.pro中加入qt的几个默认库，如果你不想下载这些库，可以在.pro文件中添加加下面两句，去除对默认库的引用。\n\n```\nCONFIG -= qt QT -= gui core\n```\n\n最后附上pro文件的配置文档：\n\n[http://doc.qt.nokia.com/4.6/qmake-variable-reference.html](http://doc.qt.nokia.com/4.6/qmake-variable-reference.html)\n\n\n当然如果要生成复杂的makefile文件还是要通过autoconf类似的工具：\n\n[http://www.chinaunix.net/jh/4/782832.html](http://www.chinaunix.net/jh/4/782832.html)\n\n&nbsp;\n\n虽然这篇文章内容比较简单，但是应该能给大家编写测试代码带来一些方便，所以就发到首页了，希望能给大家带来帮助。","slug":"巧用qmake工具生成专业的makefile","published":1,"updated":"2019-02-22T13:38:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjson4wr80009t2zshtxtfxwz","content":"<p><strong>问题描述</strong></p>\n<p>一般来说在Linux下编程写个测试程序，都需要制作一个makefile文件，但是如果自己手动编写每个还是比较麻烦，而且看上去也不太专业。而如果用autoconf工具生成也还是需要加入一些手动操作，也不是很方便。</p>\n<p><strong>解决方法</strong></p>\n<p>利用QT程序里的qmake工具，qmake工具是QT 开发环境中的工具，它可以根据文件夹下的文件生成.pro文件，这个文件类似于vs的.vcproject，然后再根据这个.pro文件生成makefile文件。</p>\n<p><strong>操作步骤</strong></p>\n<p>安装qmake工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install qt4-qmake</span><br></pre></td></tr></table></figure>\n<p><span style=\"font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12pt;\"><span style=\"font-size: 13px; line-height: 19px; white-space: pre;\">在src文件夹下执行</span></span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qmake -project --生成.pro文件 qmake --根据.pro文件生成makefile make</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p><strong>注意</strong></p>\n<p>由于qmake是QT的工具，所以它会在.pro中加入qt的几个默认库，如果你不想下载这些库，可以在.pro文件中添加加下面两句，去除对默认库的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG -= qt QT -= gui core</span><br></pre></td></tr></table></figure>\n<p>最后附上pro文件的配置文档：</p>\n<p><a href=\"http://doc.qt.nokia.com/4.6/qmake-variable-reference.html\" target=\"_blank\" rel=\"noopener\">http://doc.qt.nokia.com/4.6/qmake-variable-reference.html</a></p>\n<p>当然如果要生成复杂的makefile文件还是要通过autoconf类似的工具：</p>\n<p><a href=\"http://www.chinaunix.net/jh/4/782832.html\" target=\"_blank\" rel=\"noopener\">http://www.chinaunix.net/jh/4/782832.html</a></p>\n<p>&nbsp;</p>\n<p>虽然这篇文章内容比较简单，但是应该能给大家编写测试代码带来一些方便，所以就发到首页了，希望能给大家带来帮助。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>问题描述</strong></p>\n<p>一般来说在Linux下编程写个测试程序，都需要制作一个makefile文件，但是如果自己手动编写每个还是比较麻烦，而且看上去也不太专业。而如果用autoconf工具生成也还是需要加入一些手动操作，也不是很方便。</p>\n<p><strong>解决方法</strong></p>\n<p>利用QT程序里的qmake工具，qmake工具是QT 开发环境中的工具，它可以根据文件夹下的文件生成.pro文件，这个文件类似于vs的.vcproject，然后再根据这个.pro文件生成makefile文件。</p>\n<p><strong>操作步骤</strong></p>\n<p>安装qmake工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install qt4-qmake</span><br></pre></td></tr></table></figure>\n<p><span style=\"font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12pt;\"><span style=\"font-size: 13px; line-height: 19px; white-space: pre;\">在src文件夹下执行</span></span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qmake -project --生成.pro文件 qmake --根据.pro文件生成makefile make</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p><strong>注意</strong></p>\n<p>由于qmake是QT的工具，所以它会在.pro中加入qt的几个默认库，如果你不想下载这些库，可以在.pro文件中添加加下面两句，去除对默认库的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG -= qt QT -= gui core</span><br></pre></td></tr></table></figure>\n<p>最后附上pro文件的配置文档：</p>\n<p><a href=\"http://doc.qt.nokia.com/4.6/qmake-variable-reference.html\" target=\"_blank\" rel=\"noopener\">http://doc.qt.nokia.com/4.6/qmake-variable-reference.html</a></p>\n<p>当然如果要生成复杂的makefile文件还是要通过autoconf类似的工具：</p>\n<p><a href=\"http://www.chinaunix.net/jh/4/782832.html\" target=\"_blank\" rel=\"noopener\">http://www.chinaunix.net/jh/4/782832.html</a></p>\n<p>&nbsp;</p>\n<p>虽然这篇文章内容比较简单，但是应该能给大家编写测试代码带来一些方便，所以就发到首页了，希望能给大家带来帮助。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjsbx2f4t000ruszsmokkmxzb","tag_id":"cjsbx2f4v000tuszse0ta3hqg","_id":"cjsbx2f53000uuszso2f1lp6x"}],"Tag":[{"name":"Hexo，定制","_id":"cjsbx2f4v000tuszse0ta3hqg"}]}}